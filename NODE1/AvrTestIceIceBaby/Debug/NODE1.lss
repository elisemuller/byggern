
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800100  000024b0  00002544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  008002f4  008002f4  00002738  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a7d  00000000  00000000  00002b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014e9  00000000  00000000  0000658d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b31  00000000  00000000  00007a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c0  00000000  00000000  000095a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9f  00000000  00000000  00009e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c5a  00000000  00000000  0000ac07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000c861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_1>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_17>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e0 eb       	ldi	r30, 0xB0	; 176
     6d4:	f4 e2       	ldi	r31, 0x24	; 36
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a4 3f       	cpi	r26, 0xF4	; 244
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	a4 ef       	ldi	r26, 0xF4	; 244
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ab 32       	cpi	r26, 0x2B	; 43
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 91 05 	call	0xb22	; 0xb22 <main>
     6f6:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <adc_init>:



void adc_init(void){
	// Configure PD5 pin as output
	DDRD |= (1 << DDD5);
     6fe:	8d 9a       	sbi	0x11, 5	; 17

	// Timer without prescaling
	TCCR1B &= ~(7 << CS10); // Set CS10, CS11, CS12 to 0
     700:	8e b5       	in	r24, 0x2e	; 46
     702:	88 7f       	andi	r24, 0xF8	; 248
     704:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10); // Set CS10 to 1
     706:	8e b5       	in	r24, 0x2e	; 46
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	8e bd       	out	0x2e, r24	; 46

	// Waveform generation mode = CTC, Top = OCR0
	TCCR1A &= ~(1 << WGM10); // WGM10 = 0
     70c:	8f b5       	in	r24, 0x2f	; 47
     70e:	8e 7f       	andi	r24, 0xFE	; 254
     710:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << WGM11); // WGM11 = 0
     712:	8f b5       	in	r24, 0x2f	; 47
     714:	8d 7f       	andi	r24, 0xFD	; 253
     716:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); // WGM12 = 1
     718:	8e b5       	in	r24, 0x2e	; 46
     71a:	88 60       	ori	r24, 0x08	; 8
     71c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1 << WGM13); // WGM13 = 0
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	8f 7e       	andi	r24, 0xEF	; 239
     722:	8e bd       	out	0x2e, r24	; 46
	
	// Toggles pin PD5 when TCNT0 = OCR0
	TCCR1A &= ~(1 << COM1A1); // COM1A1 = 0
     724:	8f b5       	in	r24, 0x2f	; 47
     726:	8f 77       	andi	r24, 0x7F	; 127
     728:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A0); // COM1A0 = 1
     72a:	8f b5       	in	r24, 0x2f	; 47
     72c:	80 64       	ori	r24, 0x40	; 64
     72e:	8f bd       	out	0x2f, r24	; 47
	
	// Defines the top value for the counter
	OCR1A = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	9b bd       	out	0x2b, r25	; 43
     736:	8a bd       	out	0x2a, r24	; 42
     738:	08 95       	ret

0000073a <adc_rd>:
	
	
}

volatile uint8_t adc_rd(uint8_t channel){
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	08 2f       	mov	r16, r24
		
	xmem_write(channel, OFFSET_ADC);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	74 e0       	ldi	r23, 0x04	; 4
     74a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xmem_write>
	_delay_ms((9*4*2/F_CPU));
	
	uint8_t channel_data;
	
	for (int ch = 0; ch < channel; ch++){
     74e:	10 e0       	ldi	r17, 0x00	; 0
     750:	10 16       	cp	r1, r16
     752:	11 06       	cpc	r1, r17
     754:	5c f4       	brge	.+22     	; 0x76c <adc_rd+0x32>
     756:	c0 e0       	ldi	r28, 0x00	; 0
     758:	d0 e0       	ldi	r29, 0x00	; 0
		channel_data = xmem_read(OFFSET_ADC);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xmem_read>
     762:	f8 2e       	mov	r15, r24
	xmem_write(channel, OFFSET_ADC);
	_delay_ms((9*4*2/F_CPU));
	
	uint8_t channel_data;
	
	for (int ch = 0; ch < channel; ch++){
     764:	21 96       	adiw	r28, 0x01	; 1
     766:	c0 17       	cp	r28, r16
     768:	d1 07       	cpc	r29, r17
     76a:	b9 f7       	brne	.-18     	; 0x75a <adc_rd+0x20>
		channel_data = xmem_read(OFFSET_ADC);
	}
	
	return channel_data;
}
     76c:	8f 2d       	mov	r24, r15
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	08 95       	ret

0000077a <CAN_send_message>:
	mcp2515_bit_modify(MODE_MASK, mode, MCP_CANCTRL);
}

// Gjør det noe at vi alltid sender via transmit buffer 0? Kan hende vi vil bruke en annen buffer for andre meldinger i fremtidig kode

void CAN_send_message(can_message* p_msg) {
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	6c 01       	movw	r12, r24
	// Wait for transmit buffer 0 to be empty
	while(MCP_TXB0CTRL & (1 << TXREQ));
	
	// Write message ID
	uint8_t id_high = (uint8_t) ((p_msg->id & 0b11111111000) >> 3);
     78a:	fc 01       	movw	r30, r24
     78c:	c0 81       	ld	r28, Z
     78e:	d1 81       	ldd	r29, Z+1	; 0x01
	uint8_t id_low = (uint8_t) ((p_msg->id & 0b111) << 5);
	
	mcp2515_bit_modify(0xE0, id_low, MCP_TXB0SIDL);
     790:	6c 2f       	mov	r22, r28
     792:	62 95       	swap	r22
     794:	66 0f       	add	r22, r22
     796:	60 7e       	andi	r22, 0xE0	; 224
     798:	42 e3       	ldi	r20, 0x32	; 50
     79a:	80 ee       	ldi	r24, 0xE0	; 224
     79c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
	mcp2515_write(id_high, MCP_TXB0SIDH);
     7a0:	ce 01       	movw	r24, r28
     7a2:	96 95       	lsr	r25
     7a4:	87 95       	ror	r24
     7a6:	96 95       	lsr	r25
     7a8:	87 95       	ror	r24
     7aa:	96 95       	lsr	r25
     7ac:	87 95       	ror	r24
     7ae:	61 e3       	ldi	r22, 0x31	; 49
     7b0:	0e 94 d7 05 	call	0xbae	; 0xbae <mcp2515_write>
	
	// Write data length
	mcp2515_bit_modify(0x0F, p_msg->length, MCP_TXB0DLC);
     7b4:	45 e3       	ldi	r20, 0x35	; 53
     7b6:	f6 01       	movw	r30, r12
     7b8:	62 81       	ldd	r22, Z+2	; 0x02
     7ba:	8f e0       	ldi	r24, 0x0F	; 15
     7bc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
	
	// Write data with specified length
	for(int byte = 0; byte < p_msg->length; byte++){
     7c0:	f6 01       	movw	r30, r12
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	88 23       	and	r24, r24
     7c6:	a9 f0       	breq	.+42     	; 0x7f2 <CAN_send_message+0x78>
     7c8:	76 01       	movw	r14, r12
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	ef 0e       	add	r14, r31
     7ce:	f1 1c       	adc	r15, r1
     7d0:	16 e3       	ldi	r17, 0x36	; 54
     7d2:	c0 e0       	ldi	r28, 0x00	; 0
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(p_msg->data[byte], MCP_TXB0D0+byte);
     7d6:	61 2f       	mov	r22, r17
     7d8:	f7 01       	movw	r30, r14
     7da:	81 91       	ld	r24, Z+
     7dc:	7f 01       	movw	r14, r30
     7de:	0e 94 d7 05 	call	0xbae	; 0xbae <mcp2515_write>
	
	// Write data length
	mcp2515_bit_modify(0x0F, p_msg->length, MCP_TXB0DLC);
	
	// Write data with specified length
	for(int byte = 0; byte < p_msg->length; byte++){
     7e2:	21 96       	adiw	r28, 0x01	; 1
     7e4:	1f 5f       	subi	r17, 0xFF	; 255
     7e6:	f6 01       	movw	r30, r12
     7e8:	82 81       	ldd	r24, Z+2	; 0x02
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	c8 17       	cp	r28, r24
     7ee:	d9 07       	cpc	r29, r25
     7f0:	94 f3       	brlt	.-28     	; 0x7d6 <CAN_send_message+0x5c>
		mcp2515_write(p_msg->data[byte], MCP_TXB0D0+byte);
	}
	
	// Request to send message for transmit buffer 0
	mcp2515_request_to_send(1,0,0);
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <mcp2515_request_to_send>
	
	//printf("Transmitted message: X: %x, Y: %x , button: %x and direction : %x \r\n", p_msg->data[0], p_msg->data[1],  p_msg->data[2],  p_msg->data[3]);
	
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	08 95       	ret

00000812 <CAN_receive_message>:


// Vi har ikke lest filter and masks som spesifisert i lab lecture. 

void CAN_receive_message(can_message* p_msg) {
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	ec 01       	movw	r28, r24
	if(READ_B0_MESSAGE){
     822:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <READ_B0_MESSAGE>
     826:	88 23       	and	r24, r24
     828:	09 f4       	brne	.+2      	; 0x82c <CAN_receive_message+0x1a>
     82a:	41 c0       	rjmp	.+130    	; 0x8ae <CAN_receive_message+0x9c>
		
		// Read data length
		uint8_t length = mcp2515_read(MCP_RXB0DLC);
     82c:	85 e6       	ldi	r24, 0x65	; 101
     82e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
		p_msg->length = (0b1111 & length);
     832:	8f 70       	andi	r24, 0x0F	; 15
     834:	8a 83       	std	Y+2, r24	; 0x02
	
		// Read data with specified length
		for (int byte = 0; byte < p_msg->length; byte ++){
     836:	88 23       	and	r24, r24
     838:	c1 f0       	breq	.+48     	; 0x86a <CAN_receive_message+0x58>
     83a:	6e 01       	movw	r12, r28
     83c:	83 e0       	ldi	r24, 0x03	; 3
     83e:	c8 0e       	add	r12, r24
     840:	d1 1c       	adc	r13, r1
     842:	0f 2e       	mov	r0, r31
     844:	f6 e6       	ldi	r31, 0x66	; 102
     846:	ff 2e       	mov	r15, r31
     848:	f0 2d       	mov	r31, r0
     84a:	00 e0       	ldi	r16, 0x00	; 0
     84c:	10 e0       	ldi	r17, 0x00	; 0
			p_msg->data[byte] = mcp2515_read(MCP_RXB0D0+byte);
     84e:	8f 2d       	mov	r24, r15
     850:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
     854:	f6 01       	movw	r30, r12
     856:	81 93       	st	Z+, r24
     858:	6f 01       	movw	r12, r30
		// Read data length
		uint8_t length = mcp2515_read(MCP_RXB0DLC);
		p_msg->length = (0b1111 & length);
	
		// Read data with specified length
		for (int byte = 0; byte < p_msg->length; byte ++){
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	f3 94       	inc	r15
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	08 17       	cp	r16, r24
     866:	19 07       	cpc	r17, r25
     868:	94 f3       	brlt	.-28     	; 0x84e <CAN_receive_message+0x3c>
			p_msg->data[byte] = mcp2515_read(MCP_RXB0D0+byte);
		}
		// Read message ID
		short id_high = (short) mcp2515_read(MCP_RXB0SIDH);
     86a:	81 e6       	ldi	r24, 0x61	; 97
     86c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
     870:	18 2f       	mov	r17, r24
		short id_low = (short) (mcp2515_read(MCP_RXB0SIDL) & (0b11100000));
     872:	82 e6       	ldi	r24, 0x62	; 98
     874:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
		
		p_msg->id = ((id_high << 3) | (id_low >> 5));
     878:	80 7e       	andi	r24, 0xE0	; 224
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	95 95       	asr	r25
     87e:	87 95       	ror	r24
     880:	95 95       	asr	r25
     882:	87 95       	ror	r24
     884:	95 95       	asr	r25
     886:	87 95       	ror	r24
     888:	95 95       	asr	r25
     88a:	87 95       	ror	r24
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
     890:	21 2f       	mov	r18, r17
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	22 0f       	add	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	22 0f       	add	r18, r18
     89e:	33 1f       	adc	r19, r19
     8a0:	82 2b       	or	r24, r18
     8a2:	93 2b       	or	r25, r19
     8a4:	99 83       	std	Y+1, r25	; 0x01
     8a6:	88 83       	st	Y, r24
	
		// Clear receive flag for receive buffer 0. 
		READ_B0_MESSAGE = 0;
     8a8:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <READ_B0_MESSAGE>
     8ac:	52 c0       	rjmp	.+164    	; 0x952 <CAN_receive_message+0x140>
		
		//printf("Received message: X: %x, Y: %x , button: %x and direction : %x \r\n", p_msg->data[0], p_msg->data[1],  p_msg->data[2],  p_msg->data[3]);
	}
	
	else if(READ_B1_MESSAGE){
     8ae:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end>
     8b2:	88 23       	and	r24, r24
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <CAN_receive_message+0xa6>
     8b6:	4d c0       	rjmp	.+154    	; 0x952 <CAN_receive_message+0x140>
		
		// Read data length
		uint8_t length = mcp2515_read(MCP_RXB1DLC);
     8b8:	85 e7       	ldi	r24, 0x75	; 117
     8ba:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
		p_msg->length = (0b1111 & length);
     8be:	8f 70       	andi	r24, 0x0F	; 15
     8c0:	8a 83       	std	Y+2, r24	; 0x02
		
		// Read data with specified length
		for (int byte = 0; byte < p_msg->length; byte ++){
     8c2:	88 23       	and	r24, r24
     8c4:	c1 f0       	breq	.+48     	; 0x8f6 <CAN_receive_message+0xe4>
     8c6:	6e 01       	movw	r12, r28
     8c8:	f3 e0       	ldi	r31, 0x03	; 3
     8ca:	cf 0e       	add	r12, r31
     8cc:	d1 1c       	adc	r13, r1
     8ce:	0f 2e       	mov	r0, r31
     8d0:	f6 e7       	ldi	r31, 0x76	; 118
     8d2:	ff 2e       	mov	r15, r31
     8d4:	f0 2d       	mov	r31, r0
     8d6:	00 e0       	ldi	r16, 0x00	; 0
     8d8:	10 e0       	ldi	r17, 0x00	; 0
			p_msg->data[byte] = mcp2515_read(MCP_RXB1D0+byte);
     8da:	8f 2d       	mov	r24, r15
     8dc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
     8e0:	f6 01       	movw	r30, r12
     8e2:	81 93       	st	Z+, r24
     8e4:	6f 01       	movw	r12, r30
		// Read data length
		uint8_t length = mcp2515_read(MCP_RXB1DLC);
		p_msg->length = (0b1111 & length);
		
		// Read data with specified length
		for (int byte = 0; byte < p_msg->length; byte ++){
     8e6:	0f 5f       	subi	r16, 0xFF	; 255
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	f3 94       	inc	r15
     8ec:	8a 81       	ldd	r24, Y+2	; 0x02
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	08 17       	cp	r16, r24
     8f2:	19 07       	cpc	r17, r25
     8f4:	94 f3       	brlt	.-28     	; 0x8da <CAN_receive_message+0xc8>
			p_msg->data[byte] = mcp2515_read(MCP_RXB1D0+byte);
		}
		// Read message ID
		short id_high = (short) mcp2515_read(MCP_RXB1SIDH);
     8f6:	81 e7       	ldi	r24, 0x71	; 113
     8f8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
     8fc:	18 2f       	mov	r17, r24
		short id_low = (short) (mcp2515_read(MCP_RXB1SIDL) & (0b11100000));
     8fe:	82 e7       	ldi	r24, 0x72	; 114
     900:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
		
		p_msg->id = ((id_high << 3) | (id_low >> 5));
     904:	80 7e       	andi	r24, 0xE0	; 224
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	95 95       	asr	r25
     90a:	87 95       	ror	r24
     90c:	95 95       	asr	r25
     90e:	87 95       	ror	r24
     910:	95 95       	asr	r25
     912:	87 95       	ror	r24
     914:	95 95       	asr	r25
     916:	87 95       	ror	r24
     918:	95 95       	asr	r25
     91a:	87 95       	ror	r24
     91c:	21 2f       	mov	r18, r17
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	22 0f       	add	r18, r18
     922:	33 1f       	adc	r19, r19
     924:	22 0f       	add	r18, r18
     926:	33 1f       	adc	r19, r19
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	82 2b       	or	r24, r18
     92e:	93 2b       	or	r25, r19
     930:	99 83       	std	Y+1, r25	; 0x01
     932:	88 83       	st	Y, r24
		
		// Clear receive flag for receive buffer 1. 
		READ_B1_MESSAGE = 0;
     934:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <__data_end>
		
		printf("Received message: %x \r\n", p_msg->data[0]);
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	1f 92       	push	r1
     93c:	8f 93       	push	r24
     93e:	86 e0       	ldi	r24, 0x06	; 6
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
	}
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	08 95       	ret

00000962 <CAN_interrupt_init>:


void CAN_interrupt_init(void){
	
	// Disable global interrupts
	cli();
     962:	f8 94       	cli
	
	
	
	DDRD &= ~(1 << PD2);
     964:	8a 98       	cbi	0x11, 2	; 17
	
	// Interrupt at falling edge of INT0
	MCUCR |= (1 << ISC01);
     966:	85 b7       	in	r24, 0x35	; 53
     968:	82 60       	ori	r24, 0x02	; 2
     96a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     96c:	85 b7       	in	r24, 0x35	; 53
     96e:	8e 7f       	andi	r24, 0xFE	; 254
     970:	85 bf       	out	0x35, r24	; 53

	// Define INT0 as interrupt input
	GICR |= (1 << INT0);
     972:	8b b7       	in	r24, 0x3b	; 59
     974:	80 64       	ori	r24, 0x40	; 64
     976:	8b bf       	out	0x3b, r24	; 59
	
	// Enable interrupts on MCP for when messages are received in the receive buffers
	mcp2515_bit_modify(0b00000011, 0xFF, MCP_CANINTE);
     978:	4b e2       	ldi	r20, 0x2B	; 43
     97a:	6f ef       	ldi	r22, 0xFF	; 255
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>

	// Enable global interrupts
	sei();
     982:	78 94       	sei
     984:	08 95       	ret

00000986 <CAN_init>:

volatile highscore record_msg; 



void CAN_init(uint8_t mode){
     986:	cf 93       	push	r28
     988:	c8 2f       	mov	r28, r24
	mcp2515_init(); //Config mode
     98a:	0e 94 30 06 	call	0xc60	; 0xc60 <mcp2515_init>
	CAN_interrupt_init();
     98e:	0e 94 b1 04 	call	0x962	; 0x962 <CAN_interrupt_init>
	mcp2515_bit_modify(MODE_MASK, mode, MCP_CANCTRL);
     992:	4f e0       	ldi	r20, 0x0F	; 15
     994:	6c 2f       	mov	r22, r28
     996:	80 ee       	ldi	r24, 0xE0	; 224
     998:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
}
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <CAN_message_handler>:
	CAN_message_handler();
}



void CAN_message_handler(void){
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	2b 97       	sbiw	r28, 0x0b	; 11
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
	can_message msg; 
	if (READ_B0_MESSAGE || READ_B1_MESSAGE ){
     9b4:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <READ_B0_MESSAGE>
     9b8:	81 11       	cpse	r24, r1
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <CAN_message_handler+0x24>
     9bc:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end>
     9c0:	88 23       	and	r24, r24
     9c2:	21 f0       	breq	.+8      	; 0x9cc <CAN_message_handler+0x2c>
		
		CAN_receive_message(&msg);
     9c4:	ce 01       	movw	r24, r28
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	0e 94 09 04 	call	0x812	; 0x812 <CAN_receive_message>
	}
	switch (msg.id){
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	04 97       	sbiw	r24, 0x04	; 4
     9d2:	01 f5       	brne	.+64     	; 0xa14 <CAN_message_handler+0x74>
		case CAN_GAME_END_ID: {
			printf("END GAME MESSAGE RECEIVED\n\r");
     9d4:	8e e1       	ldi	r24, 0x1E	; 30
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	9f 93       	push	r25
     9da:	8f 93       	push	r24
     9dc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
			if (record_msg.last_playtime < msg.data[0]){
     9e0:	20 91 11 03 	lds	r18, 0x0311	; 0x800311 <record_msg+0x2>
     9e4:	30 91 12 03 	lds	r19, 0x0312	; 0x800312 <record_msg+0x3>
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	24 f4       	brge	.+8      	; 0x9fe <CAN_message_handler+0x5e>
				record_msg.best_highscore = msg.data[0];
     9f6:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <record_msg+0x1>
     9fa:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <record_msg>
			}
			record_msg.last_playtime = msg.data[1];
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <record_msg+0x3>
     a06:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <record_msg+0x2>
			game_set_state(GAME_OVER);
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	0e 94 59 05 	call	0xab2	; 0xab2 <game_set_state>
			game_interrupt_disable();
     a10:	0e 94 65 05 	call	0xaca	; 0xaca <game_interrupt_disable>
		}
	}
}
     a14:	2b 96       	adiw	r28, 0x0b	; 11
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <__vector_1>:

	// Enable global interrupts
	sei();
}

ISR(INT0_vect){
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	cf 93       	push	r28
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
	uint8_t interrupt_flag = mcp2515_read(MCP_CANINTF);
     a4a:	8c e2       	ldi	r24, 0x2C	; 44
     a4c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
     a50:	c8 2f       	mov	r28, r24
	//printf("Received message\n\r");
	if (interrupt_flag & 0x01){
     a52:	80 ff       	sbrs	r24, 0
     a54:	07 c0       	rjmp	.+14     	; 0xa64 <__vector_1+0x3e>
		// Set receive flag for receive buffer 0
		READ_B0_MESSAGE = 1;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <READ_B0_MESSAGE>
		
		// Clear interrupt flag to allow new message reception
		mcp2515_bit_modify(0x01, 0x00, MCP_CANINTF);
     a5c:	4c e2       	ldi	r20, 0x2C	; 44
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
	}
	if (interrupt_flag & 0x02){
     a64:	c1 ff       	sbrs	r28, 1
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <__vector_1+0x52>
		// Set receive flag for receive buffer 1
		READ_B1_MESSAGE = 1;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end>
		
		// Clear interrupt flag to allow new message reception
		mcp2515_bit_modify(0x02, 0x00, MCP_CANINTF);
     a6e:	4c e2       	ldi	r20, 0x2C	; 44
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
	}

	CAN_message_handler();
     a78:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <CAN_message_handler>
}
     a7c:	ff 91       	pop	r31
     a7e:	ef 91       	pop	r30
     a80:	cf 91       	pop	r28
     a82:	bf 91       	pop	r27
     a84:	af 91       	pop	r26
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	7f 91       	pop	r23
     a8c:	6f 91       	pop	r22
     a8e:	5f 91       	pop	r21
     a90:	4f 91       	pop	r20
     a92:	3f 91       	pop	r19
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <CAN_get_highscore>:
	}
}


highscore CAN_get_highscore(void){
	return record_msg;
     aa0:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <record_msg>
     aa4:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <record_msg+0x1>
     aa8:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <record_msg+0x2>
     aac:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <record_msg+0x3>
     ab0:	08 95       	ret

00000ab2 <game_set_state>:
volatile int SEND_GAME_MSG =  0;

volatile game_state current_state = INIT; 

void game_set_state(game_state state){
	current_state = state;
     ab2:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <current_state>
     ab6:	08 95       	ret

00000ab8 <game_get_state>:
}

game_state game_get_state(void){
	return current_state;
     ab8:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <current_state>
}
     abc:	08 95       	ret

00000abe <game_interrupt_enable>:



void game_interrupt_enable(void){
	TIMSK = (1 << TOIE0) | (1 << TOIE1); // enable timer overflow 
     abe:	82 e8       	ldi	r24, 0x82	; 130
     ac0:	89 bf       	out	0x39, r24	; 57
	
	// frequency = 4915200 / 255 (0xFF) / 1024 = 18.82 times per sec
	TCNT0 = 0x00; // initial value is 0
     ac2:	12 be       	out	0x32, r1	; 50
	TCCR0 = ( 1 << CS02) | ( 1 << CS00); // start with 1024 prescaler
     ac4:	85 e0       	ldi	r24, 0x05	; 5
     ac6:	83 bf       	out	0x33, r24	; 51
     ac8:	08 95       	ret

00000aca <game_interrupt_disable>:
}

void game_interrupt_disable(void){
	// disable
	TIMSK &= ~((1 << TOIE0) | (1 << TOIE1));
     aca:	89 b7       	in	r24, 0x39	; 57
     acc:	8d 77       	andi	r24, 0x7D	; 125
     ace:	89 bf       	out	0x39, r24	; 57
     ad0:	08 95       	ret

00000ad2 <__vector_17>:
}

ISR(TIMER0_OVF_vect){
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25

	SEND_GAME_MSG = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <SEND_GAME_MSG+0x1>
     ae8:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <SEND_GAME_MSG>

	// reset TCNT0
	TCNT0 = 0x00;
     aec:	12 be       	out	0x32, r1	; 50
}
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <game_play>:
	

// }

void game_play(void){
	if(SEND_GAME_MSG){
     afc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <SEND_GAME_MSG>
     b00:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <SEND_GAME_MSG+0x1>
     b04:	89 2b       	or	r24, r25
     b06:	61 f0       	breq	.+24     	; 0xb20 <game_play+0x24>
		//printf("Sending message\n\r");
		//_delay_us(20);
		mov_send_can_message(CAN_JOYSTICK_ID);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 8e 0b 	call	0x171c	; 0x171c <mov_send_can_message>
		//_delay_us(20);
		mov_send_can_message(CAN_SLIDER_ID);
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 8e 0b 	call	0x171c	; 0x171c <mov_send_can_message>
		SEND_GAME_MSG = 0; 
     b18:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <SEND_GAME_MSG+0x1>
     b1c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <SEND_GAME_MSG>
     b20:	08 95       	ret

00000b22 <main>:

// -Wl,--defsym=__heap_start=0x801800,--defsym=__heap_end=0x801fff -Wl,--relax

int main(void)
{
	uart_init( MYUBRR );
     b22:	8f e1       	ldi	r24, 0x1F	; 31
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_init>
	xmem_init();
     b2a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <xmem_init>
	adc_init();
     b2e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_init>
	mov_init();
     b32:	0e 94 b1 09 	call	0x1362	; 0x1362 <mov_init>
	CAN_init(MODE_NORMAL);
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 c3 04 	call	0x986	; 0x986 <CAN_init>
	//menu_init();
	

	printf("######## Starting new session ########\n\r");
     b3c:	8a e3       	ldi	r24, 0x3A	; 58
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
	
	//test_CAN_loopback();
	// Error test first

	game_set_state(INIT);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 59 05 	call	0xab2	; 0xab2 <game_set_state>
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
	
	while (1) {
		switch (game_get_state()){
     b52:	0e 94 5c 05 	call	0xab8	; 0xab8 <game_get_state>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	79 f0       	breq	.+30     	; 0xb78 <main+0x56>
     b5a:	28 f0       	brcs	.+10     	; 0xb66 <main+0x44>
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	49 f0       	breq	.+18     	; 0xb72 <main+0x50>
     b60:	83 30       	cpi	r24, 0x03	; 3
     b62:	69 f0       	breq	.+26     	; 0xb7e <main+0x5c>
     b64:	f6 cf       	rjmp	.-20     	; 0xb52 <main+0x30>
			case INIT: {
				if(DEBUG){printf("In init state \n\r");}
				//Flytte init i andre som allerede bruker de for å ikke ha så mange koblinger
				
				menu_init();
     b66:	0e 94 20 08 	call	0x1040	; 0x1040 <menu_init>
				
				game_set_state(LOBBY);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 59 05 	call	0xab2	; 0xab2 <game_set_state>
				break;
     b70:	f0 cf       	rjmp	.-32     	; 0xb52 <main+0x30>
			}
			case LOBBY: {
				if(DEBUG){printf("In lobby state \n\r");}
				menu_state_controller();
     b72:	0e 94 23 09 	call	0x1246	; 0x1246 <menu_state_controller>
				break;
     b76:	ed cf       	rjmp	.-38     	; 0xb52 <main+0x30>
			}
			case PLAY: {
				if(DEBUG){printf("In play state \n\r");}
				game_play();
     b78:	0e 94 7e 05 	call	0xafc	; 0xafc <game_play>
				break;
     b7c:	ea cf       	rjmp	.-44     	; 0xb52 <main+0x30>
			}
			case GAME_OVER:{
				if(DEBUG){printf("In game over state \n\r");}
				
				menu_print();
     b7e:	0e 94 c9 07 	call	0xf92	; 0xf92 <menu_print>
				game_set_state(LOBBY);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	0e 94 59 05 	call	0xab2	; 0xab2 <game_set_state>
				break;
     b88:	e4 cf       	rjmp	.-56     	; 0xb52 <main+0x30>

00000b8a <mcp2515_read>:
	mcp2515_bit_modify(0xFF, CNF1_REG_VALUE, MCP_CNF1); // Modify CNF1.
	
	return 0; 
}

uint8_t mcp2515_read(uint8_t address){
     b8a:	cf 93       	push	r28
     b8c:	c8 2f       	mov	r28, r24
	uint8_t result; 
  
	SPI_select();// Select CAN-controller
     b8e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <SPI_select>
	SPI_send(MCP_READ); //Send read instruction
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_send(address); //Send address
     b98:	8c 2f       	mov	r24, r28
     b9a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	result = SPI_read();
     b9e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <SPI_read>
     ba2:	c8 2f       	mov	r28, r24
  
	SPI_deselect(); // Deselect CAN-controller
     ba4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <SPI_deselect>
  
	return result; 
}
     ba8:	8c 2f       	mov	r24, r28
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <mcp2515_write>:

void mcp2515_write(uint8_t data, uint8_t address){
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	c8 2f       	mov	r28, r24
     bb4:	d6 2f       	mov	r29, r22
	SPI_select();
     bb6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <SPI_select>
	SPI_send(MCP_WRITE);
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_send(address);
     bc0:	8d 2f       	mov	r24, r29
     bc2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_send(data);
     bc6:	8c 2f       	mov	r24, r28
     bc8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_deselect();
     bcc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <SPI_deselect>
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buff_tx0, int buff_tx1, int buff_tx2){
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	7c 01       	movw	r14, r24
     be4:	8b 01       	movw	r16, r22
     be6:	ea 01       	movw	r28, r20
	SPI_select();
     be8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <SPI_select>
	if(buff_tx0){
     bec:	ef 28       	or	r14, r15
     bee:	19 f0       	breq	.+6      	; 0xbf6 <mcp2515_request_to_send+0x20>
		SPI_send(MCP_RTS_TX0);
     bf0:	81 e8       	ldi	r24, 0x81	; 129
     bf2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	}
	if(buff_tx1){
     bf6:	01 2b       	or	r16, r17
     bf8:	19 f0       	breq	.+6      	; 0xc00 <mcp2515_request_to_send+0x2a>
		SPI_send(MCP_RTS_TX1);
     bfa:	82 e8       	ldi	r24, 0x82	; 130
     bfc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	}
	if(buff_tx2){
     c00:	cd 2b       	or	r28, r29
     c02:	19 f0       	breq	.+6      	; 0xc0a <mcp2515_request_to_send+0x34>
		SPI_send(MCP_RTS_TX2);
     c04:	84 e8       	ldi	r24, 0x84	; 132
     c06:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	}
	SPI_deselect();
     c0a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <SPI_deselect>
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	08 95       	ret

00000c1c <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t mask_byte, uint8_t data_byte, uint8_t address){
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	d8 2f       	mov	r29, r24
     c24:	c6 2f       	mov	r28, r22
     c26:	14 2f       	mov	r17, r20
	SPI_select();
     c28:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <SPI_select>
	SPI_send(MCP_BITMOD);
     c2c:	85 e0       	ldi	r24, 0x05	; 5
     c2e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_send(address);
     c32:	81 2f       	mov	r24, r17
     c34:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_send(mask_byte);
     c38:	8d 2f       	mov	r24, r29
     c3a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_send(data_byte);
     c3e:	8c 2f       	mov	r24, r28
     c40:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_deselect();
     c44:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <SPI_deselect>
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	08 95       	ret

00000c50 <mcp2515_reset>:

void mcp2515_reset(void){
	SPI_select();
     c50:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <SPI_select>
	SPI_send(MCP_RESET);
     c54:	80 ec       	ldi	r24, 0xC0	; 192
     c56:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SPI_send>
	SPI_deselect();
     c5a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <SPI_deselect>
     c5e:	08 95       	ret

00000c60 <mcp2515_init>:



uint8_t mcp2515_init(void){
	uint8_t value; 
	SPI_init();
     c60:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <SPI_init>
	mcp2515_reset();
     c64:	0e 94 28 06 	call	0xc50	; 0xc50 <mcp2515_reset>
 
	//Self-test (Should be implemented in all drivers)
	value = mcp2515_read(MCP_CANSTAT);
     c68:	8e e0       	ldi	r24, 0x0E	; 14
     c6a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_read>
	if ((value & MODE_MASK) != MODE_CONFIG){
     c6e:	98 2f       	mov	r25, r24
     c70:	90 7e       	andi	r25, 0xE0	; 224
     c72:	90 38       	cpi	r25, 0x80	; 128
     c74:	71 f0       	breq	.+28     	; 0xc92 <mcp2515_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset: %x\r\n", value);
     c76:	1f 92       	push	r1
     c78:	8f 93       	push	r24
     c7a:	83 e6       	ldi	r24, 0x63	; 99
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	9f 93       	push	r25
     c80:	8f 93       	push	r24
     c82:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
		return 1;        
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	08 95       	ret
	}
	
	// Bit timing configuration
	mcp2515_bit_modify(0xC7, CNF3_REG_VALUE, MCP_CNF3); // Modify CNF3, bits 7, 6, 2-0. 
     c92:	48 e2       	ldi	r20, 0x28	; 40
     c94:	65 e8       	ldi	r22, 0x85	; 133
     c96:	87 ec       	ldi	r24, 0xC7	; 199
     c98:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
	mcp2515_bit_modify(0xFF, CNF2_REG_VALUE, MCP_CNF2); // Modify CNF2.
     c9c:	49 e2       	ldi	r20, 0x29	; 41
     c9e:	61 eb       	ldi	r22, 0xB1	; 177
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
	mcp2515_bit_modify(0xFF, CNF1_REG_VALUE, MCP_CNF1); // Modify CNF1.
     ca6:	4a e2       	ldi	r20, 0x2A	; 42
     ca8:	63 ec       	ldi	r22, 0xC3	; 195
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mcp2515_bit_modify>
	
	return 0; 
     cb0:	80 e0       	ldi	r24, 0x00	; 0
}
     cb2:	08 95       	ret

00000cb4 <menu_clearHighscore>:

void menu_adjustVolume(int vol){
	/*	Implementere her at man leser om slider øker : 
		OLED skjerm viser volum fra 0-10. 
		Trykk høyre slider knapp to confirm. */
	sound.volume = vol;
     cb4:	08 95       	ret

00000cb6 <menu_seeHighscore>:
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	a0 97       	sbiw	r28, 0x20	; 32
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	0e 94 50 05 	call	0xaa0	; 0xaa0 <CAN_get_highscore>
     cde:	d6 2e       	mov	r13, r22
     ce0:	c7 2e       	mov	r12, r23
     ce2:	f8 2e       	mov	r15, r24
     ce4:	e9 2e       	mov	r14, r25
     ce6:	7f 93       	push	r23
     ce8:	6f 93       	push	r22
     cea:	8a e9       	ldi	r24, 0x9A	; 154
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	5c 01       	movw	r10, r24
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <sprintf>
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	88 ea       	ldi	r24, 0xA8	; 168
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	8e 01       	movw	r16, r28
     d0e:	0f 5e       	subi	r16, 0xEF	; 239
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	1f 93       	push	r17
     d14:	0f 93       	push	r16
     d16:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <sprintf>
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 89 0c 	call	0x1912	; 0x1912 <OLED_goto_pos>
     d22:	c5 01       	movw	r24, r10
     d24:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	84 eb       	ldi	r24, 0xB4	; 180
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	9f 93       	push	r25
     d32:	8f 93       	push	r24
     d34:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0e 94 89 0c 	call	0x1912	; 0x1912 <OLED_goto_pos>
     d40:	c8 01       	movw	r24, r16
     d42:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	85 ec       	ldi	r24, 0xC5	; 197
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	a0 96       	adiw	r28, 0x20	; 32
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	08 95       	ret

00000d82 <menu_send_can_message>:
}

void menu_send_can_message(int CAN_ID){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	2b 97       	sbiw	r28, 0x0b	; 11
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
	can_message menu_msg;
	menu_msg.id = CAN_ID;
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
	switch (CAN_ID){
     d9a:	85 30       	cpi	r24, 0x05	; 5
     d9c:	91 05       	cpc	r25, r1
     d9e:	31 f0       	breq	.+12     	; 0xdac <menu_send_can_message+0x2a>
     da0:	86 30       	cpi	r24, 0x06	; 6
     da2:	91 05       	cpc	r25, r1
     da4:	c9 f0       	breq	.+50     	; 0xdd8 <menu_send_can_message+0x56>
     da6:	03 97       	sbiw	r24, 0x03	; 3
     da8:	19 f5       	brne	.+70     	; 0xdf0 <menu_send_can_message+0x6e>
     daa:	0e c0       	rjmp	.+28     	; 0xdc8 <menu_send_can_message+0x46>
		case CAN_BUZZER_ID:{
			menu_msg.length = 2; 
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	8b 83       	std	Y+3, r24	; 0x03
			menu_msg.data[0] = sound.volume;
     db0:	e5 e1       	ldi	r30, 0x15	; 21
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	8c 83       	std	Y+4, r24	; 0x04
			menu_msg.data[1] = sound.list_title;
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	8d 83       	std	Y+5, r24	; 0x05
			CAN_send_message(&menu_msg);
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
			break;
     dc6:	1c c0       	rjmp	.+56     	; 0xe00 <menu_send_can_message+0x7e>
		}
		case CAN_GAME_START_ID:{
			menu_msg.length = 1; 
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	8b 83       	std	Y+3, r24	; 0x03
			menu_msg.data[0] = 1; 
     dcc:	8c 83       	std	Y+4, r24	; 0x04
			CAN_send_message(&menu_msg);
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
			break;
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <menu_send_can_message+0x7e>
		}
		case CAN_GAME_LEVEL_ID:{
			menu_msg.length = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	8b 83       	std	Y+3, r24	; 0x03
			menu_msg.data[0] = level;
     ddc:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <level>
     de0:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <level+0x1>
     de4:	8c 83       	std	Y+4, r24	; 0x04
			CAN_send_message(&menu_msg);
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
			break;
     dee:	08 c0       	rjmp	.+16     	; 0xe00 <menu_send_can_message+0x7e>
		}
		default:{
			printf("Invalid CAN message ID");
     df0:	84 e0       	ldi	r24, 0x04	; 4
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	9f 93       	push	r25
     df6:	8f 93       	push	r24
     df8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
			break;
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
		}
	}
}
     e00:	2b 96       	adiw	r28, 0x0b	; 11
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <menu_setDifficulty>:
	printf("Inside goodbye\r\n");
	OLED_print("Goodbye World");
}

void menu_setDifficulty(void){
	OLED_goto_pos(2,3);
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 89 0c 	call	0x1912	; 0x1912 <OLED_goto_pos>
	switch(menu_position->children[current_child_pointer]->choice){
     e1a:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <menu_position>
     e1e:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <menu_position+0x1>
     e22:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <current_child_pointer>
     e26:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <current_child_pointer+0x1>
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e8 0f       	add	r30, r24
     e30:	f9 1f       	adc	r31, r25
     e32:	05 80       	ldd	r0, Z+5	; 0x05
     e34:	f6 81       	ldd	r31, Z+6	; 0x06
     e36:	e0 2d       	mov	r30, r0
     e38:	80 81       	ld	r24, Z
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	a9 f0       	breq	.+42     	; 0xe68 <menu_setDifficulty+0x56>
     e3e:	28 f0       	brcs	.+10     	; 0xe4a <menu_setDifficulty+0x38>
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	09 f1       	breq	.+66     	; 0xe86 <menu_setDifficulty+0x74>
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	71 f1       	breq	.+92     	; 0xea4 <menu_setDifficulty+0x92>
     e48:	08 95       	ret
		case EASY: {
			OLED_print("Easy peacy lemon squeezy");
     e4a:	8b e1       	ldi	r24, 0x1B	; 27
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
			level = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <level+0x1>
     e5a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <level>
			menu_send_can_message(CAN_GAME_LEVEL_ID);
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 c1 06 	call	0xd82	; 0xd82 <menu_send_can_message>
			break;
     e66:	08 95       	ret
		}
		case NORMAL:
		{
			OLED_print("As normal as normal can be");
     e68:	84 e3       	ldi	r24, 0x34	; 52
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
			level = 2;
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <level+0x1>
     e78:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <level>
			menu_send_can_message(CAN_GAME_LEVEL_ID);
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 c1 06 	call	0xd82	; 0xd82 <menu_send_can_message>
			break;
     e84:	08 95       	ret
		}
		case HARD:{
			OLED_print("So you like it hardcore huh?");
     e86:	8f e4       	ldi	r24, 0x4F	; 79
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
			level = 3;
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <level+0x1>
     e96:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <level>
			menu_send_can_message(CAN_GAME_LEVEL_ID);
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 c1 06 	call	0xd82	; 0xd82 <menu_send_can_message>
			break;
     ea2:	08 95       	ret
		}
		case INSANE:{
			OLED_print("YOU ARE ABSOLUTELY INSANE!!");
     ea4:	8c e6       	ldi	r24, 0x6C	; 108
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
			level = 4;
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <level+0x1>
     eb4:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <level>
			menu_send_can_message(CAN_GAME_LEVEL_ID);
     eb8:	86 e0       	ldi	r24, 0x06	; 6
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 c1 06 	call	0xd82	; 0xd82 <menu_send_can_message>
     ec0:	08 95       	ret

00000ec2 <menu_startGame>:
	// Send til CAN 2 om å cleare highscore der. 
	
}

void menu_startGame(void){
	OLED_print(" Good Luck!");
     ec2:	88 e8       	ldi	r24, 0x88	; 136
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
	game_set_state(PLAY);
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 59 05 	call	0xab2	; 0xab2 <game_set_state>
	//_delay_ms(2000); // debug her
	OLED_reset();
     ed0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <OLED_reset>
	
	// Turn off OLED
	game_interrupt_enable();
     ed4:	0e 94 5f 05 	call	0xabe	; 0xabe <game_interrupt_enable>
	menu_send_can_message(CAN_GAME_START_ID);
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 c1 06 	call	0xd82	; 0xd82 <menu_send_can_message>
     ee0:	08 95       	ret

00000ee2 <menu_new_item>:
	
	menu_print();
}


node* menu_new_item(node* parent, char* name, void (*fpt)(void), menu_choice choice){
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	ec 01       	movw	r28, r24
     ef2:	6b 01       	movw	r12, r22
     ef4:	7a 01       	movw	r14, r20
     ef6:	12 2f       	mov	r17, r18
	node* newItem = (node*) malloc(sizeof(node));
     ef8:	8b e1       	ldi	r24, 0x1B	; 27
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <malloc>
     f00:	dc 01       	movw	r26, r24
	newItem->name = name;
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	dc 92       	st	X, r13
     f06:	ce 92       	st	-X, r12
     f08:	11 97       	sbiw	r26, 0x01	; 1
	newItem->parent = parent;
     f0a:	56 96       	adiw	r26, 0x16	; 22
     f0c:	dc 93       	st	X, r29
     f0e:	ce 93       	st	-X, r28
     f10:	55 97       	sbiw	r26, 0x15	; 21
	newItem->num_children = 0; 
     f12:	5a 96       	adiw	r26, 0x1a	; 26
     f14:	1c 92       	st	X, r1
     f16:	1e 92       	st	-X, r1
     f18:	59 97       	sbiw	r26, 0x19	; 25
	newItem->funcpt = fpt;
     f1a:	58 96       	adiw	r26, 0x18	; 24
     f1c:	fc 92       	st	X, r15
     f1e:	ee 92       	st	-X, r14
     f20:	57 97       	sbiw	r26, 0x17	; 23
	newItem->choice = choice;
     f22:	1c 93       	st	X, r17
     f24:	fc 01       	movw	r30, r24
     f26:	35 96       	adiw	r30, 0x05	; 5
     f28:	9c 01       	movw	r18, r24
     f2a:	2b 5e       	subi	r18, 0xEB	; 235
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i = 0; i < 8; i++){
		newItem->children[i] = NULL;
     f2e:	11 92       	st	Z+, r1
     f30:	11 92       	st	Z+, r1
	newItem->name = name;
	newItem->parent = parent;
	newItem->num_children = 0; 
	newItem->funcpt = fpt;
	newItem->choice = choice;
	for(int i = 0; i < 8; i++){
     f32:	e2 17       	cp	r30, r18
     f34:	f3 07       	cpc	r31, r19
     f36:	d9 f7       	brne	.-10     	; 0xf2e <menu_new_item+0x4c>
		newItem->children[i] = NULL;
	}
	for(int i = 0; i < 8; i++){
		if(parent->children[i] == NULL){
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	89 2b       	or	r24, r25
     f3e:	49 f0       	breq	.+18     	; 0xf52 <menu_new_item+0x70>
     f40:	fe 01       	movw	r30, r28
     f42:	37 96       	adiw	r30, 0x07	; 7
	newItem->funcpt = fpt;
	newItem->choice = choice;
	for(int i = 0; i < 8; i++){
		newItem->children[i] = NULL;
	}
	for(int i = 0; i < 8; i++){
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	30 e0       	ldi	r19, 0x00	; 0
		if(parent->children[i] == NULL){
     f48:	41 91       	ld	r20, Z+
     f4a:	51 91       	ld	r21, Z+
     f4c:	45 2b       	or	r20, r21
     f4e:	91 f4       	brne	.+36     	; 0xf74 <menu_new_item+0x92>
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <menu_new_item+0x74>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
			parent->children[i] = newItem;
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	fe 01       	movw	r30, r28
     f5c:	e2 0f       	add	r30, r18
     f5e:	f3 1f       	adc	r31, r19
     f60:	b6 83       	std	Z+6, r27	; 0x06
     f62:	a5 83       	std	Z+5, r26	; 0x05
			parent->num_children++;
     f64:	89 8d       	ldd	r24, Y+25	; 0x19
     f66:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	9a 8f       	std	Y+26, r25	; 0x1a
     f6c:	89 8f       	std	Y+25, r24	; 0x19
			return newItem;
     f6e:	8a 2f       	mov	r24, r26
     f70:	9b 2f       	mov	r25, r27
     f72:	07 c0       	rjmp	.+14     	; 0xf82 <menu_new_item+0xa0>
	newItem->funcpt = fpt;
	newItem->choice = choice;
	for(int i = 0; i < 8; i++){
		newItem->children[i] = NULL;
	}
	for(int i = 0; i < 8; i++){
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	28 30       	cpi	r18, 0x08	; 8
     f7a:	31 05       	cpc	r19, r1
     f7c:	29 f7       	brne	.-54     	; 0xf48 <menu_new_item+0x66>
			parent->children[i] = newItem;
			parent->num_children++;
			return newItem;
		}
	}
	return NULL;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	08 95       	ret

00000f92 <menu_print>:


void menu_print(void){
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
	OLED_reset();
     f96:	0e 94 2b 0c 	call	0x1856	; 0x1856 <OLED_reset>
	for(int pg= 0; pg <8 ; pg ++) {
     f9a:	c0 e0       	ldi	r28, 0x00	; 0
     f9c:	d0 e0       	ldi	r29, 0x00	; 0
		if(menu_position->children[pg] != NULL){
     f9e:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <menu_position>
     fa2:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <menu_position+0x1>
     fa6:	ce 01       	movw	r24, r28
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	e8 0f       	add	r30, r24
     fae:	f9 1f       	adc	r31, r25
     fb0:	85 81       	ldd	r24, Z+5	; 0x05
     fb2:	96 81       	ldd	r25, Z+6	; 0x06
     fb4:	89 2b       	or	r24, r25
     fb6:	e1 f1       	breq	.+120    	; 0x1030 <menu_print+0x9e>
			OLED_goto_pos(pg, 0);
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	8c 2f       	mov	r24, r28
     fbc:	0e 94 89 0c 	call	0x1912	; 0x1912 <OLED_goto_pos>
			if(pg == current_child_pointer){
     fc0:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <current_child_pointer>
     fc4:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <current_child_pointer+0x1>
     fc8:	8c 17       	cp	r24, r28
     fca:	9d 07       	cpc	r25, r29
     fcc:	e9 f4       	brne	.+58     	; 0x1008 <menu_print+0x76>
				OLED_print(" ");
     fce:	85 e9       	ldi	r24, 0x95	; 149
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
				OLED_print_arrow(pg, 0);
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	8c 2f       	mov	r24, r28
     fda:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <OLED_print_arrow>
				OLED_print("  ");
     fde:	84 e9       	ldi	r24, 0x94	; 148
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
				OLED_print(menu_position->children[pg]->name);
     fe6:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <menu_position>
     fea:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <menu_position+0x1>
     fee:	ce 01       	movw	r24, r28
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	05 80       	ldd	r0, Z+5	; 0x05
     ffa:	f6 81       	ldd	r31, Z+6	; 0x06
     ffc:	e0 2d       	mov	r30, r0
     ffe:	81 81       	ldd	r24, Z+1	; 0x01
    1000:	92 81       	ldd	r25, Z+2	; 0x02
    1002:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <menu_print+0x9e>
			}
			else{
				OLED_print(" ");
    1008:	85 e9       	ldi	r24, 0x95	; 149
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
				OLED_print(menu_position->children[pg]->name);
    1010:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <menu_position>
    1014:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <menu_position+0x1>
    1018:	ce 01       	movw	r24, r28
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	05 80       	ldd	r0, Z+5	; 0x05
    1024:	f6 81       	ldd	r31, Z+6	; 0x06
    1026:	e0 2d       	mov	r30, r0
    1028:	81 81       	ldd	r24, Z+1	; 0x01
    102a:	92 81       	ldd	r25, Z+2	; 0x02
    102c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <OLED_print>
}


void menu_print(void){
	OLED_reset();
	for(int pg= 0; pg <8 ; pg ++) {
    1030:	21 96       	adiw	r28, 0x01	; 1
    1032:	c8 30       	cpi	r28, 0x08	; 8
    1034:	d1 05       	cpc	r29, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <menu_print+0xa8>
    1038:	b2 cf       	rjmp	.-156    	; 0xf9e <menu_print+0xc>
				OLED_print(" ");
				OLED_print(menu_position->children[pg]->name);
			}
		}
	}
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <menu_init>:
			break;
		}
	}
}

void menu_init(void){
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
	OLED_init();
    104c:	0e 94 39 0c 	call	0x1872	; 0x1872 <OLED_init>
	//Root
	node* root = menu_new_item(NULL, "Main menu", NULL, NO_CHOICE);
    1050:	28 e0       	ldi	r18, 0x08	; 8
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	67 e9       	ldi	r22, 0x97	; 151
    1058:	72 e0       	ldi	r23, 0x02	; 2
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
    1062:	ec 01       	movw	r28, r24
	menu_position = root; 
    1064:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <menu_position+0x1>
    1068:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <menu_position>
	
	//Main menu
	node* start_game = menu_new_item(root, "Start game", &menu_startGame, NO_CHOICE);	
    106c:	28 e0       	ldi	r18, 0x08	; 8
    106e:	41 e6       	ldi	r20, 0x61	; 97
    1070:	57 e0       	ldi	r21, 0x07	; 7
    1072:	61 ea       	ldi	r22, 0xA1	; 161
    1074:	72 e0       	ldi	r23, 0x02	; 2
    1076:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	node* difficulty = menu_new_item(root, "Difficulty", NULL, NO_CHOICE);
    107a:	28 e0       	ldi	r18, 0x08	; 8
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	6c ea       	ldi	r22, 0xAC	; 172
    1082:	72 e0       	ldi	r23, 0x02	; 2
    1084:	ce 01       	movw	r24, r28
    1086:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
    108a:	8c 01       	movw	r16, r24
	node* highscore = menu_new_item(root, "Highscore", NULL, NO_CHOICE);
    108c:	28 e0       	ldi	r18, 0x08	; 8
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	67 eb       	ldi	r22, 0xB7	; 183
    1094:	72 e0       	ldi	r23, 0x02	; 2
    1096:	ce 01       	movw	r24, r28
    1098:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
    109c:	7c 01       	movw	r14, r24
	node* sound_settings = menu_new_item(root, "Sound", NULL, NO_CHOICE);
    109e:	28 e0       	ldi	r18, 0x08	; 8
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	61 ec       	ldi	r22, 0xC1	; 193
    10a6:	72 e0       	ldi	r23, 0x02	; 2
    10a8:	ce 01       	movw	r24, r28
    10aa:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	node* mini = menu_new_item(root, "Minigames", NULL, NO_CHOICE);
    10ae:	28 e0       	ldi	r18, 0x08	; 8
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	67 ec       	ldi	r22, 0xC7	; 199
    10b6:	72 e0       	ldi	r23, 0x02	; 2
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	
	//Difficulty
	node* easy = menu_new_item(difficulty, "Easy", &menu_setDifficulty, EASY );
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	49 e0       	ldi	r20, 0x09	; 9
    10c2:	57 e0       	ldi	r21, 0x07	; 7
    10c4:	61 ed       	ldi	r22, 0xD1	; 209
    10c6:	72 e0       	ldi	r23, 0x02	; 2
    10c8:	c8 01       	movw	r24, r16
    10ca:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	node* normal = menu_new_item(difficulty, "Normal", &menu_setDifficulty, NORMAL );
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	49 e0       	ldi	r20, 0x09	; 9
    10d2:	57 e0       	ldi	r21, 0x07	; 7
    10d4:	66 ed       	ldi	r22, 0xD6	; 214
    10d6:	72 e0       	ldi	r23, 0x02	; 2
    10d8:	c8 01       	movw	r24, r16
    10da:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	node* hard = menu_new_item(difficulty, "Hard", &menu_setDifficulty, HARD );
    10de:	22 e0       	ldi	r18, 0x02	; 2
    10e0:	49 e0       	ldi	r20, 0x09	; 9
    10e2:	57 e0       	ldi	r21, 0x07	; 7
    10e4:	6d ed       	ldi	r22, 0xDD	; 221
    10e6:	72 e0       	ldi	r23, 0x02	; 2
    10e8:	c8 01       	movw	r24, r16
    10ea:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	node* insane = menu_new_item(difficulty, "Insane", &menu_setDifficulty, INSANE );
    10ee:	23 e0       	ldi	r18, 0x03	; 3
    10f0:	49 e0       	ldi	r20, 0x09	; 9
    10f2:	57 e0       	ldi	r21, 0x07	; 7
    10f4:	62 ee       	ldi	r22, 0xE2	; 226
    10f6:	72 e0       	ldi	r23, 0x02	; 2
    10f8:	c8 01       	movw	r24, r16
    10fa:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	
	////Highscore
	node* see = menu_new_item(highscore, "See", &menu_seeHighscore, SEE );
    10fe:	24 e0       	ldi	r18, 0x04	; 4
    1100:	4b e5       	ldi	r20, 0x5B	; 91
    1102:	56 e0       	ldi	r21, 0x06	; 6
    1104:	69 ee       	ldi	r22, 0xE9	; 233
    1106:	72 e0       	ldi	r23, 0x02	; 2
    1108:	c7 01       	movw	r24, r14
    110a:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	node* clear = menu_new_item(highscore, "Clear", &menu_clearHighscore, CLEAR );
    110e:	25 e0       	ldi	r18, 0x05	; 5
    1110:	4a e5       	ldi	r20, 0x5A	; 90
    1112:	56 e0       	ldi	r21, 0x06	; 6
    1114:	6d ee       	ldi	r22, 0xED	; 237
    1116:	72 e0       	ldi	r23, 0x02	; 2
    1118:	c7 01       	movw	r24, r14
    111a:	0e 94 71 07 	call	0xee2	; 0xee2 <menu_new_item>
	//node* draw_pic = menu_new_item(mini, "Make art", NULL, NO_CHOICE); 
	//node* pong = menu_new_item(mini, "Ping pong", NULL, NO_CHOICE);
	//node* led_game = menu_new_item(mini, "Light up LED", NULL, NO_CHOICE);
	
	// Initialize sound settings
	sound.list_title = LOBBY_MUSIC;
    111e:	e5 e1       	ldi	r30, 0x15	; 21
    1120:	f3 e0       	ldi	r31, 0x03	; 3
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	82 83       	std	Z+2, r24	; 0x02
	sound.volume = 10; // Max volume
    1126:	8a e0       	ldi	r24, 0x0A	; 10
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
	
	menu_print();
    112e:	0e 94 c9 07 	call	0xf92	; 0xf92 <menu_print>
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret

00001140 <menu_move_pointer>:
	}
}


void menu_move_pointer(dir direction){
	switch(direction){
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	09 f4       	brne	.+2      	; 0x1146 <menu_move_pointer+0x6>
    1144:	4f c0       	rjmp	.+158    	; 0x11e4 <menu_move_pointer+0xa4>
    1146:	a0 f1       	brcs	.+104    	; 0x11b0 <menu_move_pointer+0x70>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	f1 f0       	breq	.+60     	; 0x1188 <menu_move_pointer+0x48>
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	09 f0       	breq	.+2      	; 0x1152 <menu_move_pointer+0x12>
    1150:	79 c0       	rjmp	.+242    	; 0x1244 <menu_move_pointer+0x104>
		case DOWN:{
			if(current_child_pointer < menu_position->num_children - 1){
    1152:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <menu_position>
    1156:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <menu_position+0x1>
    115a:	81 8d       	ldd	r24, Z+25	; 0x19
    115c:	92 8d       	ldd	r25, Z+26	; 0x1a
    115e:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <current_child_pointer>
    1162:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <current_child_pointer+0x1>
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	28 17       	cp	r18, r24
    116a:	39 07       	cpc	r19, r25
    116c:	0c f0       	brlt	.+2      	; 0x1170 <menu_move_pointer+0x30>
    116e:	6a c0       	rjmp	.+212    	; 0x1244 <menu_move_pointer+0x104>
				current_child_pointer++;
    1170:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <current_child_pointer>
    1174:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <current_child_pointer+0x1>
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <current_child_pointer+0x1>
    117e:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <current_child_pointer>
				menu_print();
    1182:	0e 94 c9 07 	call	0xf92	; 0xf92 <menu_print>
    1186:	08 95       	ret
			}
			break; 
		}
		case UP:{
			if(current_child_pointer > 0){
    1188:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <current_child_pointer>
    118c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <current_child_pointer+0x1>
    1190:	18 16       	cp	r1, r24
    1192:	19 06       	cpc	r1, r25
    1194:	0c f0       	brlt	.+2      	; 0x1198 <menu_move_pointer+0x58>
    1196:	56 c0       	rjmp	.+172    	; 0x1244 <menu_move_pointer+0x104>
				current_child_pointer--;
    1198:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <current_child_pointer>
    119c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <current_child_pointer+0x1>
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <current_child_pointer+0x1>
    11a6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <current_child_pointer>
				menu_print();
    11aa:	0e 94 c9 07 	call	0xf92	; 0xf92 <menu_print>
    11ae:	08 95       	ret
			}
			break;
		}
		case LEFT:{
			if(menu_position->parent != NULL){
    11b0:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <menu_position>
    11b4:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <menu_position+0x1>
    11b8:	85 89       	ldd	r24, Z+21	; 0x15
    11ba:	96 89       	ldd	r25, Z+22	; 0x16
    11bc:	89 2b       	or	r24, r25
    11be:	09 f4       	brne	.+2      	; 0x11c2 <menu_move_pointer+0x82>
    11c0:	41 c0       	rjmp	.+130    	; 0x1244 <menu_move_pointer+0x104>
				menu_position = menu_position->parent; 
    11c2:	85 89       	ldd	r24, Z+21	; 0x15
    11c4:	96 89       	ldd	r25, Z+22	; 0x16
    11c6:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <menu_position+0x1>
    11ca:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <menu_position>
				current_child_pointer = previous_parent;
    11ce:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <previous_parent>
    11d2:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <previous_parent+0x1>
    11d6:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <current_child_pointer+0x1>
    11da:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <current_child_pointer>
				menu_print();
    11de:	0e 94 c9 07 	call	0xf92	; 0xf92 <menu_print>
    11e2:	08 95       	ret
			}
			break;
		}
		case RIGHT:{
			if(menu_position->children[current_child_pointer]->num_children != 0){
    11e4:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <menu_position>
    11e8:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <menu_position+0x1>
    11ec:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <current_child_pointer>
    11f0:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <current_child_pointer+0x1>
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	e8 0f       	add	r30, r24
    11fa:	f9 1f       	adc	r31, r25
    11fc:	05 80       	ldd	r0, Z+5	; 0x05
    11fe:	f6 81       	ldd	r31, Z+6	; 0x06
    1200:	e0 2d       	mov	r30, r0
    1202:	21 8d       	ldd	r18, Z+25	; 0x19
    1204:	32 8d       	ldd	r19, Z+26	; 0x1a
    1206:	23 2b       	or	r18, r19
    1208:	e9 f0       	breq	.+58     	; 0x1244 <menu_move_pointer+0x104>
				menu_position = menu_position->children[current_child_pointer];
    120a:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <current_child_pointer>
    120e:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <current_child_pointer+0x1>
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	fc 01       	movw	r30, r24
    1218:	e2 0f       	add	r30, r18
    121a:	f3 1f       	adc	r31, r19
    121c:	85 81       	ldd	r24, Z+5	; 0x05
    121e:	96 81       	ldd	r25, Z+6	; 0x06
    1220:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <menu_position+0x1>
    1224:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <menu_position>
				previous_parent = current_child_pointer;
    1228:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <current_child_pointer>
    122c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <current_child_pointer+0x1>
    1230:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <previous_parent+0x1>
    1234:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <previous_parent>
				current_child_pointer = 0; 
    1238:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <current_child_pointer+0x1>
    123c:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <current_child_pointer>
				menu_print();
    1240:	0e 94 c9 07 	call	0xf92	; 0xf92 <menu_print>
    1244:	08 95       	ret

00001246 <menu_state_controller>:
	}
}


void menu_state_controller(){
	joystick_input = mov_get_joy_input();
    1246:	0e 94 18 0b 	call	0x1630	; 0x1630 <mov_get_joy_input>
    124a:	20 93 18 03 	sts	0x0318, r18	; 0x800318 <joystick_input>
    124e:	30 93 19 03 	sts	0x0319, r19	; 0x800319 <joystick_input+0x1>
    1252:	40 93 1a 03 	sts	0x031A, r20	; 0x80031a <joystick_input+0x2>
    1256:	50 93 1b 03 	sts	0x031B, r21	; 0x80031b <joystick_input+0x3>
    125a:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <joystick_input+0x4>
    125e:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <joystick_input+0x5>
    1262:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <joystick_input+0x6>
	switch (joystick_input.direction){
    1266:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <joystick_input+0x6>
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	09 f4       	brne	.+2      	; 0x1270 <menu_state_controller+0x2a>
    126e:	4f c0       	rjmp	.+158    	; 0x130e <menu_state_controller+0xc8>
    1270:	38 f4       	brcc	.+14     	; 0x1280 <menu_state_controller+0x3a>
    1272:	88 23       	and	r24, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <menu_state_controller+0x32>
    1276:	59 c0       	rjmp	.+178    	; 0x132a <menu_state_controller+0xe4>
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	09 f4       	brne	.+2      	; 0x127e <menu_state_controller+0x38>
    127c:	64 c0       	rjmp	.+200    	; 0x1346 <menu_state_controller+0x100>
    127e:	08 95       	ret
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	b9 f1       	breq	.+110    	; 0x12f2 <menu_state_controller+0xac>
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	09 f0       	breq	.+2      	; 0x128a <menu_state_controller+0x44>
    1288:	6b c0       	rjmp	.+214    	; 0x1360 <menu_state_controller+0x11a>
		case NEUTRAL: {
			if (mov_read_button(jb)){
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <mov_read_button>
    1290:	89 2b       	or	r24, r25
    1292:	41 f1       	breq	.+80     	; 0x12e4 <menu_state_controller+0x9e>
				if (menu_position->children[current_child_pointer]->funcpt != NULL){
    1294:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <menu_position>
    1298:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <menu_position+0x1>
    129c:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <current_child_pointer>
    12a0:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <current_child_pointer+0x1>
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	e8 0f       	add	r30, r24
    12aa:	f9 1f       	adc	r31, r25
    12ac:	05 80       	ldd	r0, Z+5	; 0x05
    12ae:	f6 81       	ldd	r31, Z+6	; 0x06
    12b0:	e0 2d       	mov	r30, r0
    12b2:	87 89       	ldd	r24, Z+23	; 0x17
    12b4:	90 8d       	ldd	r25, Z+24	; 0x18
    12b6:	89 2b       	or	r24, r25
    12b8:	a9 f0       	breq	.+42     	; 0x12e4 <menu_state_controller+0x9e>
					OLED_reset();
    12ba:	0e 94 2b 0c 	call	0x1856	; 0x1856 <OLED_reset>
					menu_position->children[current_child_pointer]->funcpt();
    12be:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <menu_position>
    12c2:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <menu_position+0x1>
    12c6:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <current_child_pointer>
    12ca:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <current_child_pointer+0x1>
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	e8 0f       	add	r30, r24
    12d4:	f9 1f       	adc	r31, r25
    12d6:	05 80       	ldd	r0, Z+5	; 0x05
    12d8:	f6 81       	ldd	r31, Z+6	; 0x06
    12da:	e0 2d       	mov	r30, r0
    12dc:	07 88       	ldd	r0, Z+23	; 0x17
    12de:	f0 8d       	ldd	r31, Z+24	; 0x18
    12e0:	e0 2d       	mov	r30, r0
    12e2:	09 95       	icall
				}
			}
			neutral_flag = 1; 
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <neutral_flag+0x1>
    12ec:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <neutral_flag>
			break;
    12f0:	08 95       	ret
		}
		case DOWN:{
			if(neutral_flag){
    12f2:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <neutral_flag>
    12f6:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <neutral_flag+0x1>
    12fa:	89 2b       	or	r24, r25
    12fc:	89 f1       	breq	.+98     	; 0x1360 <menu_state_controller+0x11a>
				menu_move_pointer(DOWN);
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	0e 94 a0 08 	call	0x1140	; 0x1140 <menu_move_pointer>
				neutral_flag = 0; 
    1304:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag+0x1>
    1308:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <neutral_flag>
    130c:	08 95       	ret
			}
			break;
		}
		case UP:{
			if(neutral_flag){
    130e:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <neutral_flag>
    1312:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <neutral_flag+0x1>
    1316:	89 2b       	or	r24, r25
    1318:	19 f1       	breq	.+70     	; 0x1360 <menu_state_controller+0x11a>
				menu_move_pointer(UP);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	0e 94 a0 08 	call	0x1140	; 0x1140 <menu_move_pointer>
				neutral_flag = 0;
    1320:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag+0x1>
    1324:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <neutral_flag>
    1328:	08 95       	ret
			}
			break;
		}
		case LEFT:{
			if(neutral_flag){
    132a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <neutral_flag>
    132e:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <neutral_flag+0x1>
    1332:	89 2b       	or	r24, r25
    1334:	a9 f0       	breq	.+42     	; 0x1360 <menu_state_controller+0x11a>
				menu_move_pointer(LEFT);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 a0 08 	call	0x1140	; 0x1140 <menu_move_pointer>
				neutral_flag = 0;
    133c:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag+0x1>
    1340:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <neutral_flag>
    1344:	08 95       	ret
			}
			break;
		}
		case RIGHT:{
			if(neutral_flag){
    1346:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <neutral_flag>
    134a:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <neutral_flag+0x1>
    134e:	89 2b       	or	r24, r25
    1350:	39 f0       	breq	.+14     	; 0x1360 <menu_state_controller+0x11a>
				menu_move_pointer(RIGHT);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	0e 94 a0 08 	call	0x1140	; 0x1140 <menu_move_pointer>
				neutral_flag = 0;
    1358:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag+0x1>
    135c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <neutral_flag>
    1360:	08 95       	ret

00001362 <mov_init>:




void mov_init(void){
	null_x = adc_rd(JOYSTICK_CHANNEL_X);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <null_x+0x1>
    136e:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <null_x>
	null_y = adc_rd(JOYSTICK_CHANNEL_Y);
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <null_y+0x1>
    137e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <null_y>
	DDRB &= ~(0b111);
    1382:	87 b3       	in	r24, 0x17	; 23
    1384:	88 7f       	andi	r24, 0xF8	; 248
    1386:	87 bb       	out	0x17, r24	; 23
    1388:	08 95       	ret

0000138a <mov_pos_joy_rd>:
}


void mov_pos_joy_rd(void){
    138a:	cf 92       	push	r12
    138c:	df 92       	push	r13
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
	char x = adc_rd(JOYSTICK_CHANNEL_X);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
    1398:	f8 2e       	mov	r15, r24
	char y = adc_rd(JOYSTICK_CHANNEL_Y);
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
	int32_t data_x = (int32_t)x;
    13a0:	4f 2d       	mov	r20, r15
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
	int32_t data_y = (int32_t)y;
    13a8:	c8 2e       	mov	r12, r24
    13aa:	d1 2c       	mov	r13, r1
    13ac:	e1 2c       	mov	r14, r1
    13ae:	f1 2c       	mov	r15, r1

	if (data_x >= null_x ){
    13b0:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <null_x>
    13b4:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <null_x+0x1>
    13b8:	09 2e       	mov	r0, r25
    13ba:	00 0c       	add	r0, r0
    13bc:	aa 0b       	sbc	r26, r26
    13be:	bb 0b       	sbc	r27, r27
    13c0:	48 17       	cp	r20, r24
    13c2:	59 07       	cpc	r21, r25
    13c4:	6a 07       	cpc	r22, r26
    13c6:	7b 07       	cpc	r23, r27
    13c8:	2c f1       	brlt	.+74     	; 0x1414 <mov_pos_joy_rd+0x8a>
		x_pos = (data_x - null_x)*100/(255 - null_x);
    13ca:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <null_x>
    13ce:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <null_x+0x1>
    13d2:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <null_x>
    13d6:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <null_x+0x1>
    13da:	09 2e       	mov	r0, r25
    13dc:	00 0c       	add	r0, r0
    13de:	aa 0b       	sbc	r26, r26
    13e0:	bb 0b       	sbc	r27, r27
    13e2:	9a 01       	movw	r18, r20
    13e4:	ab 01       	movw	r20, r22
    13e6:	28 1b       	sub	r18, r24
    13e8:	39 0b       	sbc	r19, r25
    13ea:	4a 0b       	sbc	r20, r26
    13ec:	5b 0b       	sbc	r21, r27
    13ee:	a4 e6       	ldi	r26, 0x64	; 100
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__muluhisi3>
    13f6:	2f ef       	ldi	r18, 0xFF	; 255
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	2e 1b       	sub	r18, r30
    13fc:	3f 0b       	sbc	r19, r31
    13fe:	03 2e       	mov	r0, r19
    1400:	00 0c       	add	r0, r0
    1402:	44 0b       	sbc	r20, r20
    1404:	55 0b       	sbc	r21, r21
    1406:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__divmodsi4>
    140a:	30 93 08 03 	sts	0x0308, r19	; 0x800308 <x_pos+0x1>
    140e:	20 93 07 03 	sts	0x0307, r18	; 0x800307 <x_pos>
    1412:	20 c0       	rjmp	.+64     	; 0x1454 <mov_pos_joy_rd+0xca>
	}
	else {
		x_pos = (data_x - null_x)*100/(null_x);
    1414:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <null_x>
    1418:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <null_x+0x1>
    141c:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <null_x>
    1420:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <null_x+0x1>
    1424:	09 2e       	mov	r0, r25
    1426:	00 0c       	add	r0, r0
    1428:	aa 0b       	sbc	r26, r26
    142a:	bb 0b       	sbc	r27, r27
    142c:	9a 01       	movw	r18, r20
    142e:	ab 01       	movw	r20, r22
    1430:	28 1b       	sub	r18, r24
    1432:	39 0b       	sbc	r19, r25
    1434:	4a 0b       	sbc	r20, r26
    1436:	5b 0b       	sbc	r21, r27
    1438:	a4 e6       	ldi	r26, 0x64	; 100
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__muluhisi3>
    1440:	9f 01       	movw	r18, r30
    1442:	ff 0f       	add	r31, r31
    1444:	44 0b       	sbc	r20, r20
    1446:	55 0b       	sbc	r21, r21
    1448:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__divmodsi4>
    144c:	30 93 08 03 	sts	0x0308, r19	; 0x800308 <x_pos+0x1>
    1450:	20 93 07 03 	sts	0x0307, r18	; 0x800307 <x_pos>
	}
	if (data_y >= null_y ){
    1454:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <null_y>
    1458:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <null_y+0x1>
    145c:	09 2e       	mov	r0, r25
    145e:	00 0c       	add	r0, r0
    1460:	aa 0b       	sbc	r26, r26
    1462:	bb 0b       	sbc	r27, r27
    1464:	c8 16       	cp	r12, r24
    1466:	d9 06       	cpc	r13, r25
    1468:	ea 06       	cpc	r14, r26
    146a:	fb 06       	cpc	r15, r27
    146c:	2c f1       	brlt	.+74     	; 0x14b8 <mov_pos_joy_rd+0x12e>
		y_pos = (data_y - null_y)*100/(255 - null_y);
    146e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <null_y>
    1472:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <null_y+0x1>
    1476:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <null_y>
    147a:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <null_y+0x1>
    147e:	09 2e       	mov	r0, r25
    1480:	00 0c       	add	r0, r0
    1482:	aa 0b       	sbc	r26, r26
    1484:	bb 0b       	sbc	r27, r27
    1486:	a7 01       	movw	r20, r14
    1488:	96 01       	movw	r18, r12
    148a:	28 1b       	sub	r18, r24
    148c:	39 0b       	sbc	r19, r25
    148e:	4a 0b       	sbc	r20, r26
    1490:	5b 0b       	sbc	r21, r27
    1492:	a4 e6       	ldi	r26, 0x64	; 100
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__muluhisi3>
    149a:	2f ef       	ldi	r18, 0xFF	; 255
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	2e 1b       	sub	r18, r30
    14a0:	3f 0b       	sbc	r19, r31
    14a2:	03 2e       	mov	r0, r19
    14a4:	00 0c       	add	r0, r0
    14a6:	44 0b       	sbc	r20, r20
    14a8:	55 0b       	sbc	r21, r21
    14aa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__divmodsi4>
    14ae:	30 93 0e 03 	sts	0x030E, r19	; 0x80030e <y_pos+0x1>
    14b2:	20 93 0d 03 	sts	0x030D, r18	; 0x80030d <y_pos>
    14b6:	20 c0       	rjmp	.+64     	; 0x14f8 <mov_pos_joy_rd+0x16e>
	}
	else {
		y_pos = (data_y - null_y)*100/(null_y);
    14b8:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <null_y>
    14bc:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <null_y+0x1>
    14c0:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <null_y>
    14c4:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <null_y+0x1>
    14c8:	09 2e       	mov	r0, r25
    14ca:	00 0c       	add	r0, r0
    14cc:	aa 0b       	sbc	r26, r26
    14ce:	bb 0b       	sbc	r27, r27
    14d0:	a7 01       	movw	r20, r14
    14d2:	96 01       	movw	r18, r12
    14d4:	28 1b       	sub	r18, r24
    14d6:	39 0b       	sbc	r19, r25
    14d8:	4a 0b       	sbc	r20, r26
    14da:	5b 0b       	sbc	r21, r27
    14dc:	a4 e6       	ldi	r26, 0x64	; 100
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__muluhisi3>
    14e4:	9f 01       	movw	r18, r30
    14e6:	ff 0f       	add	r31, r31
    14e8:	44 0b       	sbc	r20, r20
    14ea:	55 0b       	sbc	r21, r21
    14ec:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__divmodsi4>
    14f0:	30 93 0e 03 	sts	0x030E, r19	; 0x80030e <y_pos+0x1>
    14f4:	20 93 0d 03 	sts	0x030D, r18	; 0x80030d <y_pos>
	}
}
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	08 95       	ret

00001502 <mov_pos_slider_rd>:

void mov_pos_slider_rd(void){
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
	char right = adc_rd(SLIDER_CHANNEL_R);
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
    1514:	d8 2f       	mov	r29, r24
	char left = adc_rd(SLIDER_CHANNEL_L);
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
    151c:	c8 2f       	mov	r28, r24
	int32_t data_right = (int32_t)right;
	int32_t data_left = (int32_t)left;
	r_pos = (data_right*100)/255;
    151e:	2d 2f       	mov	r18, r29
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	a4 e6       	ldi	r26, 0x64	; 100
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__umulhisi3>
    152a:	c1 2c       	mov	r12, r1
    152c:	d1 2c       	mov	r13, r1
    152e:	76 01       	movw	r14, r12
    1530:	ca 94       	dec	r12
    1532:	a7 01       	movw	r20, r14
    1534:	96 01       	movw	r18, r12
    1536:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__divmodsi4>
    153a:	30 93 0a 03 	sts	0x030A, r19	; 0x80030a <r_pos+0x1>
    153e:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <r_pos>
	l_pos = (data_left*100)/255;
    1542:	2c 2f       	mov	r18, r28
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	a4 e6       	ldi	r26, 0x64	; 100
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__umulhisi3>
    154e:	a7 01       	movw	r20, r14
    1550:	96 01       	movw	r18, r12
    1552:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__divmodsi4>
    1556:	30 93 04 03 	sts	0x0304, r19	; 0x800304 <l_pos+0x1>
    155a:	20 93 03 03 	sts	0x0303, r18	; 0x800303 <l_pos>
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	08 95       	ret

0000156c <mov_get_joy_dir>:

dir mov_get_joy_dir(void){
	mov_pos_joy_rd();
    156c:	0e 94 c5 09 	call	0x138a	; 0x138a <mov_pos_joy_rd>
	const int neutral_threshold = 70;
	dir direction = UNDEFINED;
	
	int abs_x = abs(x_pos);
    1570:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <x_pos>
    1574:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <x_pos+0x1>
    1578:	99 23       	and	r25, r25
    157a:	1c f4       	brge	.+6      	; 0x1582 <mov_get_joy_dir+0x16>
    157c:	91 95       	neg	r25
    157e:	81 95       	neg	r24
    1580:	91 09       	sbc	r25, r1
	int abs_y = abs(y_pos);
    1582:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <y_pos>
    1586:	30 91 0e 03 	lds	r19, 0x030E	; 0x80030e <y_pos+0x1>
    158a:	33 23       	and	r19, r19
    158c:	1c f4       	brge	.+6      	; 0x1594 <mov_get_joy_dir+0x28>
    158e:	31 95       	neg	r19
    1590:	21 95       	neg	r18
    1592:	31 09       	sbc	r19, r1
	
	if (abs_x < neutral_threshold && abs_y < neutral_threshold){
    1594:	86 34       	cpi	r24, 0x46	; 70
    1596:	91 05       	cpc	r25, r1
    1598:	1c f4       	brge	.+6      	; 0x15a0 <mov_get_joy_dir+0x34>
    159a:	26 34       	cpi	r18, 0x46	; 70
    159c:	31 05       	cpc	r19, r1
    159e:	fc f0       	brlt	.+62     	; 0x15de <mov_get_joy_dir+0x72>
		direction = NEUTRAL;
		//printf("Direction: NEUTRAL \r\n");
	}
	else if((abs_x > abs_y) && (abs_x > neutral_threshold)){
    15a0:	28 17       	cp	r18, r24
    15a2:	39 07       	cpc	r19, r25
    15a4:	6c f4       	brge	.+26     	; 0x15c0 <mov_get_joy_dir+0x54>
    15a6:	87 34       	cpi	r24, 0x47	; 71
    15a8:	91 05       	cpc	r25, r1
    15aa:	54 f0       	brlt	.+20     	; 0x15c0 <mov_get_joy_dir+0x54>
		if (x_pos > 0){
    15ac:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <x_pos>
    15b0:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <x_pos+0x1>
	
	int abs_x = abs(x_pos);
	int abs_y = abs(y_pos);
	
	if (abs_x < neutral_threshold && abs_y < neutral_threshold){
		direction = NEUTRAL;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	12 16       	cp	r1, r18
    15b8:	13 06       	cpc	r1, r19
    15ba:	c4 f0       	brlt	.+48     	; 0x15ec <mov_get_joy_dir+0x80>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	08 95       	ret
		else {
			//printf("Direction: LEFT \r\n");
			direction = LEFT;
		}
	}
	else if ((abs_y > abs_x) && (abs_y > neutral_threshold)){
    15c0:	82 17       	cp	r24, r18
    15c2:	93 07       	cpc	r25, r19
    15c4:	74 f4       	brge	.+28     	; 0x15e2 <mov_get_joy_dir+0x76>
    15c6:	27 34       	cpi	r18, 0x47	; 71
    15c8:	31 05       	cpc	r19, r1
    15ca:	6c f0       	brlt	.+26     	; 0x15e6 <mov_get_joy_dir+0x7a>
		if(y_pos > 0){
    15cc:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <y_pos>
    15d0:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <y_pos+0x1>
    15d4:	18 16       	cp	r1, r24
    15d6:	19 06       	cpc	r1, r25
    15d8:	44 f0       	brlt	.+16     	; 0x15ea <mov_get_joy_dir+0x7e>
			direction = UP;
			//printf("Direction: UP \r\n");
		}
		else{
			direction = DOWN;
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	08 95       	ret
	
	int abs_x = abs(x_pos);
	int abs_y = abs(y_pos);
	
	if (abs_x < neutral_threshold && abs_y < neutral_threshold){
		direction = NEUTRAL;
    15de:	84 e0       	ldi	r24, 0x04	; 4
    15e0:	08 95       	ret
}

dir mov_get_joy_dir(void){
	mov_pos_joy_rd();
	const int neutral_threshold = 70;
	dir direction = UNDEFINED;
    15e2:	85 e0       	ldi	r24, 0x05	; 5
    15e4:	08 95       	ret
    15e6:	85 e0       	ldi	r24, 0x05	; 5
    15e8:	08 95       	ret
			direction = LEFT;
		}
	}
	else if ((abs_y > abs_x) && (abs_y > neutral_threshold)){
		if(y_pos > 0){
			direction = UP;
    15ea:	82 e0       	ldi	r24, 0x02	; 2
			direction = DOWN;
			//printf("Direction: DOWN \r\n");
		}
	}
	return direction;
}
    15ec:	08 95       	ret

000015ee <mov_read_button>:

int mov_read_button(button b){
	int button_pushed = 0; 
	switch (b){
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	69 f0       	breq	.+26     	; 0x160c <mov_read_button+0x1e>
    15f2:	18 f0       	brcs	.+6      	; 0x15fa <mov_read_button+0xc>
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	79 f0       	breq	.+30     	; 0x1616 <mov_read_button+0x28>
    15f8:	12 c0       	rjmp	.+36     	; 0x161e <mov_read_button+0x30>
		case jb:{
			if(DEBUG_BUTTON){
				printf("Reading joystick button:\r\n");
			}
			button_pushed = !(PINB & (1 << PB2));
    15fa:	86 b3       	in	r24, 0x16	; 22
    15fc:	86 95       	lsr	r24
    15fe:	86 95       	lsr	r24
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	89 27       	eor	r24, r25
    1604:	28 2f       	mov	r18, r24
    1606:	21 70       	andi	r18, 0x01	; 1
    1608:	30 e0       	ldi	r19, 0x00	; 0
			break;
    160a:	0b c0       	rjmp	.+22     	; 0x1622 <mov_read_button+0x34>
		}
		case rb:{
			if(DEBUG_BUTTON){
				printf("Reading right slider button:\r\n");
			}
			button_pushed = PINB & (1 << PB0);
    160c:	86 b3       	in	r24, 0x16	; 22
    160e:	28 2f       	mov	r18, r24
    1610:	21 70       	andi	r18, 0x01	; 1
    1612:	30 e0       	ldi	r19, 0x00	; 0
			break;
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <mov_read_button+0x34>
		}
		case lb:{
			if(DEBUG_BUTTON){
				printf("Reading left slider button:\r\n");
			}
			button_pushed = PINB & (1 << PB1);
    1616:	26 b3       	in	r18, 0x16	; 22
    1618:	22 70       	andi	r18, 0x02	; 2
    161a:	30 e0       	ldi	r19, 0x00	; 0
			break;
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <mov_read_button+0x34>
	}
	return direction;
}

int mov_read_button(button b){
	int button_pushed = 0; 
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	23 2b       	or	r18, r19
    1628:	11 f4       	brne	.+4      	; 0x162e <mov_read_button+0x40>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
			printf("Button pressed\r\n");
		}
		return 1; 
	}
	return 0; 
}
    162e:	08 95       	ret

00001630 <mov_get_joy_input>:


input_j mov_get_joy_input(void){
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	27 97       	sbiw	r28, 0x07	; 7
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
	mov_pos_joy_rd();
    1650:	0e 94 c5 09 	call	0x138a	; 0x138a <mov_pos_joy_rd>
	input_j joy_input;
	joy_input.pos_x = x_pos;
    1654:	c0 90 07 03 	lds	r12, 0x0307	; 0x800307 <x_pos>
    1658:	d0 90 08 03 	lds	r13, 0x0308	; 0x800308 <x_pos+0x1>
	joy_input.pos_y = y_pos;
    165c:	e0 90 0d 03 	lds	r14, 0x030D	; 0x80030d <y_pos>
    1660:	f0 90 0e 03 	lds	r15, 0x030E	; 0x80030e <y_pos+0x1>
	joy_input.j_button_pressed = mov_read_button(jb);
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <mov_read_button>
    166a:	18 2f       	mov	r17, r24
    166c:	09 2f       	mov	r16, r25
	joy_input.direction = mov_get_joy_dir();
    166e:	0e 94 b6 0a 	call	0x156c	; 0x156c <mov_get_joy_dir>
	return joy_input;
    1672:	da 82       	std	Y+2, r13	; 0x02
    1674:	c9 82       	std	Y+1, r12	; 0x01
    1676:	fc 82       	std	Y+4, r15	; 0x04
    1678:	eb 82       	std	Y+3, r14	; 0x03
    167a:	2c 2d       	mov	r18, r12
    167c:	3a 81       	ldd	r19, Y+2	; 0x02
    167e:	4e 2d       	mov	r20, r14
    1680:	5c 81       	ldd	r21, Y+4	; 0x04
    1682:	61 2f       	mov	r22, r17
    1684:	70 2f       	mov	r23, r16
}
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	27 96       	adiw	r28, 0x07	; 7
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	df 90       	pop	r13
    16a2:	cf 90       	pop	r12
    16a4:	08 95       	ret

000016a6 <mov_get_slider_input>:

input_s mov_get_slider_input(void){
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	28 97       	sbiw	r28, 0x08	; 8
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
	mov_pos_slider_rd();
    16c6:	0e 94 81 0a 	call	0x1502	; 0x1502 <mov_pos_slider_rd>
	input_s slider_input;
	slider_input.pos_l_slider = l_pos;
    16ca:	e0 90 03 03 	lds	r14, 0x0303	; 0x800303 <l_pos>
    16ce:	f0 90 04 03 	lds	r15, 0x0304	; 0x800304 <l_pos+0x1>
	slider_input.pos_r_slider = r_pos;
    16d2:	c0 90 09 03 	lds	r12, 0x0309	; 0x800309 <r_pos>
    16d6:	d0 90 0a 03 	lds	r13, 0x030A	; 0x80030a <r_pos+0x1>
	slider_input.r_button_pressed =  mov_read_button(rb);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <mov_read_button>
    16e0:	18 2f       	mov	r17, r24
    16e2:	09 2f       	mov	r16, r25
	slider_input.l_button_pressed = mov_read_button(lb);
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <mov_read_button>
	return slider_input;
    16ea:	da 82       	std	Y+2, r13	; 0x02
    16ec:	c9 82       	std	Y+1, r12	; 0x01
    16ee:	fc 82       	std	Y+4, r15	; 0x04
    16f0:	eb 82       	std	Y+3, r14	; 0x03
    16f2:	2c 2d       	mov	r18, r12
    16f4:	3a 81       	ldd	r19, Y+2	; 0x02
    16f6:	4e 2d       	mov	r20, r14
    16f8:	5c 81       	ldd	r21, Y+4	; 0x04
    16fa:	61 2f       	mov	r22, r17
    16fc:	70 2f       	mov	r23, r16
}
    16fe:	28 96       	adiw	r28, 0x08	; 8
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	08 95       	ret

0000171c <mov_send_can_message>:


// Se på frekvens av meldinger som sendes under spill modus
void mov_send_can_message(int CAN_ID){
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	63 97       	sbiw	r28, 0x13	; 19
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
	can_message movement_msg;
	movement_msg.id = CAN_ID;
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
	movement_msg.length = 4;
    1734:	24 e0       	ldi	r18, 0x04	; 4
    1736:	2b 83       	std	Y+3, r18	; 0x03
	switch (CAN_ID){
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	19 f0       	breq	.+6      	; 0x1744 <mov_send_can_message+0x28>
    173e:	02 97       	sbiw	r24, 0x02	; 2
    1740:	a1 f0       	breq	.+40     	; 0x176a <mov_send_can_message+0x4e>
    1742:	26 c0       	rjmp	.+76     	; 0x1790 <mov_send_can_message+0x74>
		case CAN_JOYSTICK_ID:{
			printf("\n\r");
    1744:	87 ed       	ldi	r24, 0xD7	; 215
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	9f 93       	push	r25
    174a:	8f 93       	push	r24
    174c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
			input_j joystick_input = mov_get_joy_input();
    1750:	0e 94 18 0b 	call	0x1630	; 0x1630 <mov_get_joy_input>
			movement_msg.data[0] = joystick_input.pos_x;
    1754:	2c 83       	std	Y+4, r18	; 0x04
			movement_msg.data[1] = joystick_input.pos_y;
    1756:	4d 83       	std	Y+5, r20	; 0x05
			movement_msg.data[2] = joystick_input.j_button_pressed;
    1758:	6e 83       	std	Y+6, r22	; 0x06
			movement_msg.data[3] = joystick_input.direction;
    175a:	8f 83       	std	Y+7, r24	; 0x07
			CAN_send_message(&movement_msg);
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	1b c0       	rjmp	.+54     	; 0x17a0 <mov_send_can_message+0x84>
			//printf("Sent joystick pos %d\r\n", joystick_input.pos_x);
			break;
			}
		case CAN_SLIDER_ID:{
			printf("\n\r");
    176a:	87 ed       	ldi	r24, 0xD7	; 215
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
			input_s slider_input = mov_get_slider_input();
    1776:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <mov_get_slider_input>
			movement_msg.data[0] = slider_input.pos_r_slider;;
    177a:	2c 83       	std	Y+4, r18	; 0x04
			movement_msg.data[1] = slider_input.pos_l_slider;
    177c:	4d 83       	std	Y+5, r20	; 0x05
			movement_msg.data[2] = slider_input.r_button_pressed;
    177e:	6e 83       	std	Y+6, r22	; 0x06
			movement_msg.data[3] = slider_input.l_button_pressed;
    1780:	8f 83       	std	Y+7, r24	; 0x07
			CAN_send_message(&movement_msg);
    1782:	ce 01       	movw	r24, r28
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <mov_send_can_message+0x84>
			break;
		}
		default:
			printf("Invalid CAN message ID");
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	92 e0       	ldi	r25, 0x02	; 2
    1794:	9f 93       	push	r25
    1796:	8f 93       	push	r24
    1798:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <printf>
			break;
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
		}

}
    17a0:	63 96       	adiw	r28, 0x13	; 19
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <OLED_write_d>:
	OLED_goto_page(row);
	OLED_goto_column(col); 
}

void OLED_select_font(font format){
	style = format; 
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	1f 92       	push	r1
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	72 e1       	ldi	r23, 0x12	; 18
    17c4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xmem_write>
    17c8:	0f 90       	pop	r0
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <OLED_write_c>:
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	1f 92       	push	r1
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	70 e1       	ldi	r23, 0x10	; 16
    17e2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xmem_write>
    17e6:	0f 90       	pop	r0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <OLED_goto_column>:
    17ee:	cf 93       	push	r28
    17f0:	84 fb       	bst	r24, 4
    17f2:	cc 27       	eor	r28, r28
    17f4:	c0 f9       	bld	r28, 0
    17f6:	81 70       	andi	r24, 0x01	; 1
    17f8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    17fc:	80 e1       	ldi	r24, 0x10	; 16
    17fe:	8c 0f       	add	r24, r28
    1800:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <OLED_goto_page>:
    1808:	cf 93       	push	r28
    180a:	c8 2f       	mov	r28, r24
    180c:	80 eb       	ldi	r24, 0xB0	; 176
    180e:	8c 0f       	add	r24, r28
    1810:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1814:	8c 2f       	mov	r24, r28
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <current_page+0x1>
    181c:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <current_page>
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <OLED_home>:
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	0e 94 04 0c 	call	0x1808	; 0x1808 <OLED_goto_page>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <OLED_goto_column>
    1830:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <current_page+0x1>
    1834:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <current_page>
    1838:	08 95       	ret

0000183a <OLED_clear_page>:
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	0e 94 04 0c 	call	0x1808	; 0x1808 <OLED_goto_page>
    1842:	c0 e8       	ldi	r28, 0x80	; 128
    1844:	d0 e0       	ldi	r29, 0x00	; 0
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
    184c:	21 97       	sbiw	r28, 0x01	; 1
    184e:	d9 f7       	brne	.-10     	; 0x1846 <OLED_clear_page+0xc>
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <OLED_reset>:
    1856:	cf 93       	push	r28
    1858:	0e 94 12 0c 	call	0x1824	; 0x1824 <OLED_home>
    185c:	c0 e0       	ldi	r28, 0x00	; 0
    185e:	8c 2f       	mov	r24, r28
    1860:	0e 94 1d 0c 	call	0x183a	; 0x183a <OLED_clear_page>
    1864:	cf 5f       	subi	r28, 0xFF	; 255
    1866:	c8 30       	cpi	r28, 0x08	; 8
    1868:	d1 f7       	brne	.-12     	; 0x185e <OLED_reset+0x8>
    186a:	0e 94 12 0c 	call	0x1824	; 0x1824 <OLED_home>
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <OLED_init>:
    1872:	8e ea       	ldi	r24, 0xAE	; 174
    1874:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1878:	81 ea       	ldi	r24, 0xA1	; 161
    187a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    187e:	8a ed       	ldi	r24, 0xDA	; 218
    1880:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1884:	82 e1       	ldi	r24, 0x12	; 18
    1886:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1890:	88 ea       	ldi	r24, 0xA8	; 168
    1892:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1896:	8f e3       	ldi	r24, 0x3F	; 63
    1898:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    189c:	85 ed       	ldi	r24, 0xD5	; 213
    189e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18a2:	80 e8       	ldi	r24, 0x80	; 128
    18a4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18a8:	81 e8       	ldi	r24, 0x81	; 129
    18aa:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18ae:	80 e5       	ldi	r24, 0x50	; 80
    18b0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18b4:	89 ed       	ldi	r24, 0xD9	; 217
    18b6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18ba:	81 e2       	ldi	r24, 0x21	; 33
    18bc:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18c0:	80 e2       	ldi	r24, 0x20	; 32
    18c2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18cc:	8b ed       	ldi	r24, 0xDB	; 219
    18ce:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18d2:	80 e3       	ldi	r24, 0x30	; 48
    18d4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18d8:	8d ea       	ldi	r24, 0xAD	; 173
    18da:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18e4:	84 ea       	ldi	r24, 0xA4	; 164
    18e6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18ea:	86 ea       	ldi	r24, 0xA6	; 166
    18ec:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18f0:	8f ea       	ldi	r24, 0xAF	; 175
    18f2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18f6:	80 eb       	ldi	r24, 0xB0	; 176
    18f8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1902:	80 e1       	ldi	r24, 0x10	; 16
    1904:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <OLED_write_c>
    1908:	0e 94 2b 0c 	call	0x1856	; 0x1856 <OLED_reset>
    190c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <style>
    1910:	08 95       	ret

00001912 <OLED_goto_pos>:
    1912:	cf 93       	push	r28
    1914:	c6 2f       	mov	r28, r22
    1916:	0e 94 04 0c 	call	0x1808	; 0x1808 <OLED_goto_page>
    191a:	8c 2f       	mov	r24, r28
    191c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <OLED_goto_column>
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <OLED_write_char>:
}

void OLED_write_char(uint8_t ch){
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
	switch(style){
    192c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <style>
    1930:	91 30       	cpi	r25, 0x01	; 1
    1932:	b1 f0       	breq	.+44     	; 0x1960 <OLED_write_char+0x3c>
    1934:	58 f1       	brcs	.+86     	; 0x198c <OLED_write_char+0x68>
    1936:	92 30       	cpi	r25, 0x02	; 2
    1938:	09 f0       	breq	.+2      	; 0x193c <OLED_write_char+0x18>
    193a:	44 c0       	rjmp	.+136    	; 0x19c4 <OLED_write_char+0xa0>
    193c:	c8 2f       	mov	r28, r24
    193e:	d0 e0       	ldi	r29, 0x00	; 0
    1940:	cc 0f       	add	r28, r28
    1942:	dd 1f       	adc	r29, r29
    1944:	cc 0f       	add	r28, r28
    1946:	dd 1f       	adc	r29, r29
    1948:	c0 51       	subi	r28, 0x10	; 16
    194a:	d0 40       	sbci	r29, 0x00	; 0
    194c:	14 e0       	ldi	r17, 0x04	; 4
		case SMALL:
			for(uint8_t data = 0; data < 4; data ++){
				uint8_t byte = pgm_read_byte(&(font4[ch-32][data])); 
    194e:	fe 01       	movw	r30, r28
    1950:	84 91       	lpm	r24, Z
				OLED_write_d(byte);
    1952:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
    1956:	11 50       	subi	r17, 0x01	; 1
    1958:	21 96       	adiw	r28, 0x01	; 1
}

void OLED_write_char(uint8_t ch){
	switch(style){
		case SMALL:
			for(uint8_t data = 0; data < 4; data ++){
    195a:	11 11       	cpse	r17, r1
    195c:	f8 cf       	rjmp	.-16     	; 0x194e <OLED_write_char+0x2a>
    195e:	32 c0       	rjmp	.+100    	; 0x19c4 <OLED_write_char+0xa0>
    1960:	c8 2f       	mov	r28, r24
    1962:	d0 e0       	ldi	r29, 0x00	; 0
    1964:	a0 97       	sbiw	r28, 0x20	; 32
    1966:	ce 01       	movw	r24, r28
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	c8 0f       	add	r28, r24
    1972:	d9 1f       	adc	r29, r25
    1974:	c4 51       	subi	r28, 0x14	; 20
    1976:	de 4f       	sbci	r29, 0xFE	; 254
void OLED_select_font(font format){
	style = format; 
}

void OLED_write_char(uint8_t ch){
	switch(style){
    1978:	15 e0       	ldi	r17, 0x05	; 5
				OLED_write_d(byte);
			}
			break; 
		case MEDIUM:
			for(uint8_t data = 0; data < 5; data ++){
				uint8_t byte = pgm_read_byte(&(font5[ch-32][data])); 
    197a:	fe 01       	movw	r30, r28
    197c:	84 91       	lpm	r24, Z
				OLED_write_d(byte);
    197e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
    1982:	11 50       	subi	r17, 0x01	; 1
    1984:	21 96       	adiw	r28, 0x01	; 1
				uint8_t byte = pgm_read_byte(&(font4[ch-32][data])); 
				OLED_write_d(byte);
			}
			break; 
		case MEDIUM:
			for(uint8_t data = 0; data < 5; data ++){
    1986:	11 11       	cpse	r17, r1
    1988:	f8 cf       	rjmp	.-16     	; 0x197a <OLED_write_char+0x56>
    198a:	1c c0       	rjmp	.+56     	; 0x19c4 <OLED_write_char+0xa0>
    198c:	c8 2f       	mov	r28, r24
    198e:	d0 e0       	ldi	r29, 0x00	; 0
    1990:	8e 01       	movw	r16, r28
    1992:	00 0f       	add	r16, r16
    1994:	11 1f       	adc	r17, r17
    1996:	00 0f       	add	r16, r16
    1998:	11 1f       	adc	r17, r17
    199a:	00 0f       	add	r16, r16
    199c:	11 1f       	adc	r17, r17
    199e:	09 53       	subi	r16, 0x39	; 57
    19a0:	1d 4f       	sbci	r17, 0xFD	; 253
    19a2:	cc 0f       	add	r28, r28
    19a4:	dd 1f       	adc	r29, r29
    19a6:	cc 0f       	add	r28, r28
    19a8:	dd 1f       	adc	r29, r29
    19aa:	cc 0f       	add	r28, r28
    19ac:	dd 1f       	adc	r29, r29
    19ae:	c1 53       	subi	r28, 0x31	; 49
    19b0:	dd 4f       	sbci	r29, 0xFD	; 253
				OLED_write_d(byte);
			}			
			break; 
		case LARGE: 
			for(uint8_t data = 0; data < 8; data ++){
				uint8_t byte = pgm_read_byte(&(font8[ch-32][data])); 
    19b2:	f8 01       	movw	r30, r16
    19b4:	84 91       	lpm	r24, Z
				OLED_write_d(byte);
    19b6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
    19ba:	0f 5f       	subi	r16, 0xFF	; 255
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t byte = pgm_read_byte(&(font5[ch-32][data])); 
				OLED_write_d(byte);
			}			
			break; 
		case LARGE: 
			for(uint8_t data = 0; data < 8; data ++){
    19be:	0c 17       	cp	r16, r28
    19c0:	1d 07       	cpc	r17, r29
    19c2:	b9 f7       	brne	.-18     	; 0x19b2 <OLED_write_char+0x8e>
				uint8_t byte = pgm_read_byte(&(font8[ch-32][data])); 
				OLED_write_d(byte);
			}

	}
}
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <OLED_print>:



void OLED_print(char* data){
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	7c 01       	movw	r14, r24
	int size_ch = 0;
	int ch = 0;
    19dc:	00 e0       	ldi	r16, 0x00	; 0
    19de:	10 e0       	ldi	r17, 0x00	; 0
}



void OLED_print(char* data){
	int size_ch = 0;
    19e0:	c0 e0       	ldi	r28, 0x00	; 0
    19e2:	d0 e0       	ldi	r29, 0x00	; 0
	int ch = 0;
	while (data[ch] != '\0'){
    19e4:	19 c0       	rjmp	.+50     	; 0x1a18 <OLED_print+0x4a>
		if(size_ch*8 < OLED_SCREEN_WIDTH){
    19e6:	9e 01       	movw	r18, r28
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	22 0f       	add	r18, r18
    19ee:	33 1f       	adc	r19, r19
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	20 38       	cpi	r18, 0x80	; 128
    19f6:	31 05       	cpc	r19, r1
    19f8:	34 f4       	brge	.+12     	; 0x1a06 <OLED_print+0x38>
			OLED_write_char(data[ch]);
    19fa:	0e 94 92 0c 	call	0x1924	; 0x1924 <OLED_write_char>
			size_ch++;
    19fe:	21 96       	adiw	r28, 0x01	; 1
			ch++;		
    1a00:	0f 5f       	subi	r16, 0xFF	; 255
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	09 c0       	rjmp	.+18     	; 0x1a18 <OLED_print+0x4a>
		}
		else{
			OLED_goto_page(current_page + 1);
    1a06:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <current_page>
    1a0a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <current_page+0x1>
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	0e 94 04 0c 	call	0x1808	; 0x1808 <OLED_goto_page>
			size_ch = 0; 
    1a14:	c0 e0       	ldi	r28, 0x00	; 0
    1a16:	d0 e0       	ldi	r29, 0x00	; 0


void OLED_print(char* data){
	int size_ch = 0;
	int ch = 0;
	while (data[ch] != '\0'){
    1a18:	f7 01       	movw	r30, r14
    1a1a:	e0 0f       	add	r30, r16
    1a1c:	f1 1f       	adc	r31, r17
    1a1e:	80 81       	ld	r24, Z
    1a20:	81 11       	cpse	r24, r1
    1a22:	e1 cf       	rjmp	.-62     	; 0x19e6 <OLED_print+0x18>
			size_ch = 0; 
		}

	}
	//printf("Size of data is: %d byte \r\n", size_ch);
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	08 95       	ret

00001a32 <OLED_print_arrow>:


void OLED_print_arrow(uint8_t row, uint8_t col){
  OLED_goto_pos(row, col); 
    1a32:	0e 94 89 0c 	call	0x1912	; 0x1912 <OLED_goto_pos>
  OLED_write_d(0b00011000);
    1a36:	88 e1       	ldi	r24, 0x18	; 24
    1a38:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
  OLED_write_d(0b00011000);
    1a3c:	88 e1       	ldi	r24, 0x18	; 24
    1a3e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
  OLED_write_d(0b01111110);
    1a42:	8e e7       	ldi	r24, 0x7E	; 126
    1a44:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
  OLED_write_d(0b00111100);
    1a48:	8c e3       	ldi	r24, 0x3C	; 60
    1a4a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
  OLED_write_d(0b00011000);
    1a4e:	88 e1       	ldi	r24, 0x18	; 24
    1a50:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <OLED_write_d>
    1a54:	08 95       	ret

00001a56 <SPI_init>:
#define CAN_CS PB4
#define SPI_PORT PORTB

void SPI_init(void){
  // Set MOSI, SS and SCK output, all others input
  DDRB |= (1 << PB5) | (1 << CAN_CS) | (1 << PB7);
    1a56:	87 b3       	in	r24, 0x17	; 23
    1a58:	80 6b       	ori	r24, 0xB0	; 176
    1a5a:	87 bb       	out	0x17, r24	; 23
  DDRB &= ~(1 << PB6); // PB6 = 0, MISO is input
    1a5c:	be 98       	cbi	0x17, 6	; 23
	
  // Enable SPI, Master, set clock rate fck/16
  SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    1a5e:	8d b1       	in	r24, 0x0d	; 13
    1a60:	81 65       	ori	r24, 0x51	; 81
    1a62:	8d b9       	out	0x0d, r24	; 13
  SPCR &= ~(1 << SPR1); // SPR1 = 0 (clk rate)
    1a64:	69 98       	cbi	0x0d, 1	; 13
  
  // SPI Mode = 0 -> Leading edge: sample, Trailing edge: setup
  SPCR &= ~(1 << CPOL); // CPOL = 0
    1a66:	6b 98       	cbi	0x0d, 3	; 13
  SPCR &= ~(1 << CPHA); // CPHA = 0
    1a68:	6a 98       	cbi	0x0d, 2	; 13
    1a6a:	08 95       	ret

00001a6c <SPI_send>:
}


void SPI_send(char cData){
  //Start transmission
  SPDR = cData; //SPI Data register
    1a6c:	8f b9       	out	0x0f, r24	; 15
  //Wait for transmission complete
  while(!(SPSR & (1 << SPIF))){} //SPIF sets interrupt flag IF when transmission is completed
    1a6e:	77 9b       	sbis	0x0e, 7	; 14
    1a70:	fe cf       	rjmp	.-4      	; 0x1a6e <SPI_send+0x2>
}
    1a72:	08 95       	ret

00001a74 <SPI_read>:

char SPI_read(void){
	//Send dummy byte
	SPDR = 0xFF; //SPI Data register
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	8f b9       	out	0x0f, r24	; 15
  
	//Wait for transmission complete
	while(!(SPSR & (1 << SPIF))){} //SPIF sets interrupt flag IF when transmission is completed
    1a78:	77 9b       	sbis	0x0e, 7	; 14
    1a7a:	fe cf       	rjmp	.-4      	; 0x1a78 <SPI_read+0x4>
		
	return SPDR;
    1a7c:	8f b1       	in	r24, 0x0f	; 15
}
    1a7e:	08 95       	ret

00001a80 <SPI_select>:

void SPI_select(void){
  SPI_PORT &= ~(1 << CAN_CS);
    1a80:	c4 98       	cbi	0x18, 4	; 24
    1a82:	08 95       	ret

00001a84 <SPI_deselect>:
}
 
        
void SPI_deselect(void){
  SPI_PORT |= (1 << CAN_CS);
    1a84:	c4 9a       	sbi	0x18, 4	; 24
    1a86:	08 95       	ret

00001a88 <uart_transmit>:
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
	fdevopen(uart_transmit,uart_receive);
}

void uart_transmit(unsigned char message){
	while ( !(UCSR0A & (1 << UDRE0)) ); // Wait until last message has been sent and transmit buffer is empty.
    1a88:	5d 9b       	sbis	0x0b, 5	; 11
    1a8a:	fe cf       	rjmp	.-4      	; 0x1a88 <uart_transmit>
	UDR0 = message;						// Put data in buffer
    1a8c:	8c b9       	out	0x0c, r24	; 12
    1a8e:	08 95       	ret

00001a90 <uart_receive>:
}

unsigned char uart_receive(void){
	while ( !(UCSR0A & (1 << RXC0)) );	// Wait until last message has been received
    1a90:	5f 9b       	sbis	0x0b, 7	; 11
    1a92:	fe cf       	rjmp	.-4      	; 0x1a90 <uart_receive>
	
	UCSR0A |= (1 << RXC0);
    1a94:	5f 9a       	sbi	0x0b, 7	; 11
	return UDR0;					// Put data in buffer
    1a96:	8c b1       	in	r24, 0x0c	; 12
}
    1a98:	08 95       	ret

00001a9a <uart_init>:

// Here, using USART0-registers

void uart_init(unsigned int UBRR){
	// Baud rate
	UBRR0H = (unsigned char) (UBRR >> 8);	// Baud rate high register
    1a9a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (UBRR);		// Baud rate low register
    1a9c:	89 b9       	out	0x09, r24	; 9
	// Enable receivers and transmitter on usart 0
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1a9e:	88 e1       	ldi	r24, 0x18	; 24
    1aa0:	8a b9       	out	0x0a, r24	; 10
	// Data format (char = 8 bit, + 2 stop bit)
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
    1aa2:	8e e8       	ldi	r24, 0x8E	; 142
    1aa4:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_transmit,uart_receive);
    1aa6:	68 e4       	ldi	r22, 0x48	; 72
    1aa8:	7d e0       	ldi	r23, 0x0D	; 13
    1aaa:	84 e4       	ldi	r24, 0x44	; 68
    1aac:	9d e0       	ldi	r25, 0x0D	; 13
    1aae:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fdevopen>
    1ab2:	08 95       	ret

00001ab4 <xmem_init>:
#define BASE_ADDRESS 0x1000


void xmem_init(void) {
	// Enables external memory
	MCUCR |= (1 << SRE); 
    1ab4:	85 b7       	in	r24, 0x35	; 53
    1ab6:	80 68       	ori	r24, 0x80	; 128
    1ab8:	85 bf       	out	0x35, r24	; 53
	
	// Masks PC4-PC7 pins
	SFIOR &= ~(7 << XMM0);
    1aba:	80 b7       	in	r24, 0x30	; 48
    1abc:	87 7c       	andi	r24, 0xC7	; 199
    1abe:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1 << XMM2); 
    1ac0:	80 b7       	in	r24, 0x30	; 48
    1ac2:	80 62       	ori	r24, 0x20	; 32
    1ac4:	80 bf       	out	0x30, r24	; 48
    1ac6:	08 95       	ret

00001ac8 <xmem_write>:

// xmem read og write er hentet fra labforelesning

void xmem_write(uint8_t data, uint16_t offset) {
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[offset] = data;
    1ac8:	fb 01       	movw	r30, r22
    1aca:	f0 5f       	subi	r31, 0xF0	; 240
    1acc:	80 83       	st	Z, r24
    1ace:	08 95       	ret

00001ad0 <xmem_read>:
}

uint8_t xmem_read(uint16_t offset) {	
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[offset];	
    1ad0:	90 5f       	subi	r25, 0xF0	; 240
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	80 81       	ld	r24, Z
	return ret_val;
}
    1ad6:	08 95       	ret

00001ad8 <__divmodsi4>:
    1ad8:	05 2e       	mov	r0, r21
    1ada:	97 fb       	bst	r25, 7
    1adc:	1e f4       	brtc	.+6      	; 0x1ae4 <__divmodsi4+0xc>
    1ade:	00 94       	com	r0
    1ae0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__negsi2>
    1ae4:	57 fd       	sbrc	r21, 7
    1ae6:	07 d0       	rcall	.+14     	; 0x1af6 <__divmodsi4_neg2>
    1ae8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__udivmodsi4>
    1aec:	07 fc       	sbrc	r0, 7
    1aee:	03 d0       	rcall	.+6      	; 0x1af6 <__divmodsi4_neg2>
    1af0:	4e f4       	brtc	.+18     	; 0x1b04 <__divmodsi4_exit>
    1af2:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__negsi2>

00001af6 <__divmodsi4_neg2>:
    1af6:	50 95       	com	r21
    1af8:	40 95       	com	r20
    1afa:	30 95       	com	r19
    1afc:	21 95       	neg	r18
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	4f 4f       	sbci	r20, 0xFF	; 255
    1b02:	5f 4f       	sbci	r21, 0xFF	; 255

00001b04 <__divmodsi4_exit>:
    1b04:	08 95       	ret

00001b06 <__negsi2>:
    1b06:	90 95       	com	r25
    1b08:	80 95       	com	r24
    1b0a:	70 95       	com	r23
    1b0c:	61 95       	neg	r22
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	8f 4f       	sbci	r24, 0xFF	; 255
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	08 95       	ret

00001b16 <__umulhisi3>:
    1b16:	a2 9f       	mul	r26, r18
    1b18:	b0 01       	movw	r22, r0
    1b1a:	b3 9f       	mul	r27, r19
    1b1c:	c0 01       	movw	r24, r0
    1b1e:	a3 9f       	mul	r26, r19
    1b20:	70 0d       	add	r23, r0
    1b22:	81 1d       	adc	r24, r1
    1b24:	11 24       	eor	r1, r1
    1b26:	91 1d       	adc	r25, r1
    1b28:	b2 9f       	mul	r27, r18
    1b2a:	70 0d       	add	r23, r0
    1b2c:	81 1d       	adc	r24, r1
    1b2e:	11 24       	eor	r1, r1
    1b30:	91 1d       	adc	r25, r1
    1b32:	08 95       	ret

00001b34 <__muluhisi3>:
    1b34:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__umulhisi3>
    1b38:	a5 9f       	mul	r26, r21
    1b3a:	90 0d       	add	r25, r0
    1b3c:	b4 9f       	mul	r27, r20
    1b3e:	90 0d       	add	r25, r0
    1b40:	a4 9f       	mul	r26, r20
    1b42:	80 0d       	add	r24, r0
    1b44:	91 1d       	adc	r25, r1
    1b46:	11 24       	eor	r1, r1
    1b48:	08 95       	ret

00001b4a <__udivmodsi4>:
    1b4a:	a1 e2       	ldi	r26, 0x21	; 33
    1b4c:	1a 2e       	mov	r1, r26
    1b4e:	aa 1b       	sub	r26, r26
    1b50:	bb 1b       	sub	r27, r27
    1b52:	fd 01       	movw	r30, r26
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <__udivmodsi4_ep>

00001b56 <__udivmodsi4_loop>:
    1b56:	aa 1f       	adc	r26, r26
    1b58:	bb 1f       	adc	r27, r27
    1b5a:	ee 1f       	adc	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	a2 17       	cp	r26, r18
    1b60:	b3 07       	cpc	r27, r19
    1b62:	e4 07       	cpc	r30, r20
    1b64:	f5 07       	cpc	r31, r21
    1b66:	20 f0       	brcs	.+8      	; 0x1b70 <__udivmodsi4_ep>
    1b68:	a2 1b       	sub	r26, r18
    1b6a:	b3 0b       	sbc	r27, r19
    1b6c:	e4 0b       	sbc	r30, r20
    1b6e:	f5 0b       	sbc	r31, r21

00001b70 <__udivmodsi4_ep>:
    1b70:	66 1f       	adc	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	88 1f       	adc	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	1a 94       	dec	r1
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <__udivmodsi4_loop>
    1b7c:	60 95       	com	r22
    1b7e:	70 95       	com	r23
    1b80:	80 95       	com	r24
    1b82:	90 95       	com	r25
    1b84:	9b 01       	movw	r18, r22
    1b86:	ac 01       	movw	r20, r24
    1b88:	bd 01       	movw	r22, r26
    1b8a:	cf 01       	movw	r24, r30
    1b8c:	08 95       	ret

00001b8e <malloc>:
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	91 05       	cpc	r25, r1
    1b9a:	10 f4       	brcc	.+4      	; 0x1ba0 <malloc+0x12>
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <__flp>
    1ba4:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <__flp+0x1>
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	30 97       	sbiw	r30, 0x00	; 0
    1bb2:	19 f1       	breq	.+70     	; 0x1bfa <malloc+0x6c>
    1bb4:	40 81       	ld	r20, Z
    1bb6:	51 81       	ldd	r21, Z+1	; 0x01
    1bb8:	02 81       	ldd	r16, Z+2	; 0x02
    1bba:	13 81       	ldd	r17, Z+3	; 0x03
    1bbc:	48 17       	cp	r20, r24
    1bbe:	59 07       	cpc	r21, r25
    1bc0:	c8 f0       	brcs	.+50     	; 0x1bf4 <malloc+0x66>
    1bc2:	84 17       	cp	r24, r20
    1bc4:	95 07       	cpc	r25, r21
    1bc6:	69 f4       	brne	.+26     	; 0x1be2 <malloc+0x54>
    1bc8:	10 97       	sbiw	r26, 0x00	; 0
    1bca:	31 f0       	breq	.+12     	; 0x1bd8 <malloc+0x4a>
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	0c 93       	st	X, r16
    1bd0:	12 97       	sbiw	r26, 0x02	; 2
    1bd2:	13 96       	adiw	r26, 0x03	; 3
    1bd4:	1c 93       	st	X, r17
    1bd6:	27 c0       	rjmp	.+78     	; 0x1c26 <malloc+0x98>
    1bd8:	00 93 23 03 	sts	0x0323, r16	; 0x800323 <__flp>
    1bdc:	10 93 24 03 	sts	0x0324, r17	; 0x800324 <__flp+0x1>
    1be0:	22 c0       	rjmp	.+68     	; 0x1c26 <malloc+0x98>
    1be2:	21 15       	cp	r18, r1
    1be4:	31 05       	cpc	r19, r1
    1be6:	19 f0       	breq	.+6      	; 0x1bee <malloc+0x60>
    1be8:	42 17       	cp	r20, r18
    1bea:	53 07       	cpc	r21, r19
    1bec:	18 f4       	brcc	.+6      	; 0x1bf4 <malloc+0x66>
    1bee:	9a 01       	movw	r18, r20
    1bf0:	bd 01       	movw	r22, r26
    1bf2:	ef 01       	movw	r28, r30
    1bf4:	df 01       	movw	r26, r30
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	db cf       	rjmp	.-74     	; 0x1bb0 <malloc+0x22>
    1bfa:	21 15       	cp	r18, r1
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	f9 f0       	breq	.+62     	; 0x1c3e <malloc+0xb0>
    1c00:	28 1b       	sub	r18, r24
    1c02:	39 0b       	sbc	r19, r25
    1c04:	24 30       	cpi	r18, 0x04	; 4
    1c06:	31 05       	cpc	r19, r1
    1c08:	80 f4       	brcc	.+32     	; 0x1c2a <malloc+0x9c>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	61 15       	cp	r22, r1
    1c10:	71 05       	cpc	r23, r1
    1c12:	21 f0       	breq	.+8      	; 0x1c1c <malloc+0x8e>
    1c14:	fb 01       	movw	r30, r22
    1c16:	93 83       	std	Z+3, r25	; 0x03
    1c18:	82 83       	std	Z+2, r24	; 0x02
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <malloc+0x96>
    1c1c:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <__flp+0x1>
    1c20:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <__flp>
    1c24:	fe 01       	movw	r30, r28
    1c26:	32 96       	adiw	r30, 0x02	; 2
    1c28:	44 c0       	rjmp	.+136    	; 0x1cb2 <malloc+0x124>
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e2 0f       	add	r30, r18
    1c2e:	f3 1f       	adc	r31, r19
    1c30:	81 93       	st	Z+, r24
    1c32:	91 93       	st	Z+, r25
    1c34:	22 50       	subi	r18, 0x02	; 2
    1c36:	31 09       	sbc	r19, r1
    1c38:	39 83       	std	Y+1, r19	; 0x01
    1c3a:	28 83       	st	Y, r18
    1c3c:	3a c0       	rjmp	.+116    	; 0x1cb2 <malloc+0x124>
    1c3e:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <__brkval>
    1c42:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <__brkval+0x1>
    1c46:	23 2b       	or	r18, r19
    1c48:	41 f4       	brne	.+16     	; 0x1c5a <malloc+0xcc>
    1c4a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1c4e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1c52:	30 93 22 03 	sts	0x0322, r19	; 0x800322 <__brkval+0x1>
    1c56:	20 93 21 03 	sts	0x0321, r18	; 0x800321 <__brkval>
    1c5a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1c5e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1c62:	21 15       	cp	r18, r1
    1c64:	31 05       	cpc	r19, r1
    1c66:	41 f4       	brne	.+16     	; 0x1c78 <malloc+0xea>
    1c68:	2d b7       	in	r18, 0x3d	; 61
    1c6a:	3e b7       	in	r19, 0x3e	; 62
    1c6c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1c70:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1c74:	24 1b       	sub	r18, r20
    1c76:	35 0b       	sbc	r19, r21
    1c78:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <__brkval>
    1c7c:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <__brkval+0x1>
    1c80:	e2 17       	cp	r30, r18
    1c82:	f3 07       	cpc	r31, r19
    1c84:	a0 f4       	brcc	.+40     	; 0x1cae <malloc+0x120>
    1c86:	2e 1b       	sub	r18, r30
    1c88:	3f 0b       	sbc	r19, r31
    1c8a:	28 17       	cp	r18, r24
    1c8c:	39 07       	cpc	r19, r25
    1c8e:	78 f0       	brcs	.+30     	; 0x1cae <malloc+0x120>
    1c90:	ac 01       	movw	r20, r24
    1c92:	4e 5f       	subi	r20, 0xFE	; 254
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	24 17       	cp	r18, r20
    1c98:	35 07       	cpc	r19, r21
    1c9a:	48 f0       	brcs	.+18     	; 0x1cae <malloc+0x120>
    1c9c:	4e 0f       	add	r20, r30
    1c9e:	5f 1f       	adc	r21, r31
    1ca0:	50 93 22 03 	sts	0x0322, r21	; 0x800322 <__brkval+0x1>
    1ca4:	40 93 21 03 	sts	0x0321, r20	; 0x800321 <__brkval>
    1ca8:	81 93       	st	Z+, r24
    1caa:	91 93       	st	Z+, r25
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <malloc+0x124>
    1cae:	e0 e0       	ldi	r30, 0x00	; 0
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	cf 01       	movw	r24, r30
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	08 95       	ret

00001cbe <free>:
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <free+0xa>
    1cc6:	81 c0       	rjmp	.+258    	; 0x1dca <free+0x10c>
    1cc8:	fc 01       	movw	r30, r24
    1cca:	32 97       	sbiw	r30, 0x02	; 2
    1ccc:	13 82       	std	Z+3, r1	; 0x03
    1cce:	12 82       	std	Z+2, r1	; 0x02
    1cd0:	a0 91 23 03 	lds	r26, 0x0323	; 0x800323 <__flp>
    1cd4:	b0 91 24 03 	lds	r27, 0x0324	; 0x800324 <__flp+0x1>
    1cd8:	10 97       	sbiw	r26, 0x00	; 0
    1cda:	81 f4       	brne	.+32     	; 0x1cfc <free+0x3e>
    1cdc:	20 81       	ld	r18, Z
    1cde:	31 81       	ldd	r19, Z+1	; 0x01
    1ce0:	82 0f       	add	r24, r18
    1ce2:	93 1f       	adc	r25, r19
    1ce4:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <__brkval>
    1ce8:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <__brkval+0x1>
    1cec:	28 17       	cp	r18, r24
    1cee:	39 07       	cpc	r19, r25
    1cf0:	51 f5       	brne	.+84     	; 0x1d46 <free+0x88>
    1cf2:	f0 93 22 03 	sts	0x0322, r31	; 0x800322 <__brkval+0x1>
    1cf6:	e0 93 21 03 	sts	0x0321, r30	; 0x800321 <__brkval>
    1cfa:	67 c0       	rjmp	.+206    	; 0x1dca <free+0x10c>
    1cfc:	ed 01       	movw	r28, r26
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	ce 17       	cp	r28, r30
    1d04:	df 07       	cpc	r29, r31
    1d06:	40 f4       	brcc	.+16     	; 0x1d18 <free+0x5a>
    1d08:	4a 81       	ldd	r20, Y+2	; 0x02
    1d0a:	5b 81       	ldd	r21, Y+3	; 0x03
    1d0c:	9e 01       	movw	r18, r28
    1d0e:	41 15       	cp	r20, r1
    1d10:	51 05       	cpc	r21, r1
    1d12:	f1 f0       	breq	.+60     	; 0x1d50 <free+0x92>
    1d14:	ea 01       	movw	r28, r20
    1d16:	f5 cf       	rjmp	.-22     	; 0x1d02 <free+0x44>
    1d18:	d3 83       	std	Z+3, r29	; 0x03
    1d1a:	c2 83       	std	Z+2, r28	; 0x02
    1d1c:	40 81       	ld	r20, Z
    1d1e:	51 81       	ldd	r21, Z+1	; 0x01
    1d20:	84 0f       	add	r24, r20
    1d22:	95 1f       	adc	r25, r21
    1d24:	c8 17       	cp	r28, r24
    1d26:	d9 07       	cpc	r29, r25
    1d28:	59 f4       	brne	.+22     	; 0x1d40 <free+0x82>
    1d2a:	88 81       	ld	r24, Y
    1d2c:	99 81       	ldd	r25, Y+1	; 0x01
    1d2e:	84 0f       	add	r24, r20
    1d30:	95 1f       	adc	r25, r21
    1d32:	02 96       	adiw	r24, 0x02	; 2
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	93 83       	std	Z+3, r25	; 0x03
    1d3e:	82 83       	std	Z+2, r24	; 0x02
    1d40:	21 15       	cp	r18, r1
    1d42:	31 05       	cpc	r19, r1
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <free+0x92>
    1d46:	f0 93 24 03 	sts	0x0324, r31	; 0x800324 <__flp+0x1>
    1d4a:	e0 93 23 03 	sts	0x0323, r30	; 0x800323 <__flp>
    1d4e:	3d c0       	rjmp	.+122    	; 0x1dca <free+0x10c>
    1d50:	e9 01       	movw	r28, r18
    1d52:	fb 83       	std	Y+3, r31	; 0x03
    1d54:	ea 83       	std	Y+2, r30	; 0x02
    1d56:	49 91       	ld	r20, Y+
    1d58:	59 91       	ld	r21, Y+
    1d5a:	c4 0f       	add	r28, r20
    1d5c:	d5 1f       	adc	r29, r21
    1d5e:	ec 17       	cp	r30, r28
    1d60:	fd 07       	cpc	r31, r29
    1d62:	61 f4       	brne	.+24     	; 0x1d7c <free+0xbe>
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	84 0f       	add	r24, r20
    1d6a:	95 1f       	adc	r25, r21
    1d6c:	02 96       	adiw	r24, 0x02	; 2
    1d6e:	e9 01       	movw	r28, r18
    1d70:	99 83       	std	Y+1, r25	; 0x01
    1d72:	88 83       	st	Y, r24
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	9b 83       	std	Y+3, r25	; 0x03
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
    1d7c:	e0 e0       	ldi	r30, 0x00	; 0
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	12 96       	adiw	r26, 0x02	; 2
    1d82:	8d 91       	ld	r24, X+
    1d84:	9c 91       	ld	r25, X
    1d86:	13 97       	sbiw	r26, 0x03	; 3
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <free+0xd4>
    1d8c:	fd 01       	movw	r30, r26
    1d8e:	dc 01       	movw	r26, r24
    1d90:	f7 cf       	rjmp	.-18     	; 0x1d80 <free+0xc2>
    1d92:	8d 91       	ld	r24, X+
    1d94:	9c 91       	ld	r25, X
    1d96:	11 97       	sbiw	r26, 0x01	; 1
    1d98:	9d 01       	movw	r18, r26
    1d9a:	2e 5f       	subi	r18, 0xFE	; 254
    1d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9e:	82 0f       	add	r24, r18
    1da0:	93 1f       	adc	r25, r19
    1da2:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <__brkval>
    1da6:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <__brkval+0x1>
    1daa:	28 17       	cp	r18, r24
    1dac:	39 07       	cpc	r19, r25
    1dae:	69 f4       	brne	.+26     	; 0x1dca <free+0x10c>
    1db0:	30 97       	sbiw	r30, 0x00	; 0
    1db2:	29 f4       	brne	.+10     	; 0x1dbe <free+0x100>
    1db4:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <__flp+0x1>
    1db8:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <__flp>
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <free+0x104>
    1dbe:	13 82       	std	Z+3, r1	; 0x03
    1dc0:	12 82       	std	Z+2, r1	; 0x02
    1dc2:	b0 93 22 03 	sts	0x0322, r27	; 0x800322 <__brkval+0x1>
    1dc6:	a0 93 21 03 	sts	0x0321, r26	; 0x800321 <__brkval>
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	08 95       	ret

00001dd0 <fdevopen>:
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	31 f4       	brne	.+12     	; 0x1de8 <fdevopen+0x18>
    1ddc:	61 15       	cp	r22, r1
    1dde:	71 05       	cpc	r23, r1
    1de0:	19 f4       	brne	.+6      	; 0x1de8 <fdevopen+0x18>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	3a c0       	rjmp	.+116    	; 0x1e5c <fdevopen+0x8c>
    1de8:	8b 01       	movw	r16, r22
    1dea:	ec 01       	movw	r28, r24
    1dec:	6e e0       	ldi	r22, 0x0E	; 14
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 4c 11 	call	0x2298	; 0x2298 <calloc>
    1df8:	fc 01       	movw	r30, r24
    1dfa:	89 2b       	or	r24, r25
    1dfc:	91 f3       	breq	.-28     	; 0x1de2 <fdevopen+0x12>
    1dfe:	80 e8       	ldi	r24, 0x80	; 128
    1e00:	83 83       	std	Z+3, r24	; 0x03
    1e02:	01 15       	cp	r16, r1
    1e04:	11 05       	cpc	r17, r1
    1e06:	71 f0       	breq	.+28     	; 0x1e24 <fdevopen+0x54>
    1e08:	13 87       	std	Z+11, r17	; 0x0b
    1e0a:	02 87       	std	Z+10, r16	; 0x0a
    1e0c:	81 e8       	ldi	r24, 0x81	; 129
    1e0e:	83 83       	std	Z+3, r24	; 0x03
    1e10:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__iob>
    1e14:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <__iob+0x1>
    1e18:	89 2b       	or	r24, r25
    1e1a:	21 f4       	brne	.+8      	; 0x1e24 <fdevopen+0x54>
    1e1c:	f0 93 26 03 	sts	0x0326, r31	; 0x800326 <__iob+0x1>
    1e20:	e0 93 25 03 	sts	0x0325, r30	; 0x800325 <__iob>
    1e24:	20 97       	sbiw	r28, 0x00	; 0
    1e26:	c9 f0       	breq	.+50     	; 0x1e5a <fdevopen+0x8a>
    1e28:	d1 87       	std	Z+9, r29	; 0x09
    1e2a:	c0 87       	std	Z+8, r28	; 0x08
    1e2c:	83 81       	ldd	r24, Z+3	; 0x03
    1e2e:	82 60       	ori	r24, 0x02	; 2
    1e30:	83 83       	std	Z+3, r24	; 0x03
    1e32:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <__iob+0x2>
    1e36:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <__iob+0x3>
    1e3a:	89 2b       	or	r24, r25
    1e3c:	71 f4       	brne	.+28     	; 0x1e5a <fdevopen+0x8a>
    1e3e:	f0 93 28 03 	sts	0x0328, r31	; 0x800328 <__iob+0x3>
    1e42:	e0 93 27 03 	sts	0x0327, r30	; 0x800327 <__iob+0x2>
    1e46:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <__iob+0x4>
    1e4a:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <__iob+0x5>
    1e4e:	89 2b       	or	r24, r25
    1e50:	21 f4       	brne	.+8      	; 0x1e5a <fdevopen+0x8a>
    1e52:	f0 93 2a 03 	sts	0x032A, r31	; 0x80032a <__iob+0x5>
    1e56:	e0 93 29 03 	sts	0x0329, r30	; 0x800329 <__iob+0x4>
    1e5a:	cf 01       	movw	r24, r30
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret

00001e66 <printf>:
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e9 e3       	ldi	r30, 0x39	; 57
    1e6c:	ff e0       	ldi	r31, 0x0F	; 15
    1e6e:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x20>
    1e72:	ae 01       	movw	r20, r28
    1e74:	4b 5f       	subi	r20, 0xFB	; 251
    1e76:	5f 4f       	sbci	r21, 0xFF	; 255
    1e78:	fa 01       	movw	r30, r20
    1e7a:	61 91       	ld	r22, Z+
    1e7c:	71 91       	ld	r23, Z+
    1e7e:	af 01       	movw	r20, r30
    1e80:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <__iob+0x2>
    1e84:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <__iob+0x3>
    1e88:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <vfprintf>
    1e8c:	e2 e0       	ldi	r30, 0x02	; 2
    1e8e:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x20>

00001e92 <sprintf>:
    1e92:	ae e0       	ldi	r26, 0x0E	; 14
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	ef e4       	ldi	r30, 0x4F	; 79
    1e98:	ff e0       	ldi	r31, 0x0F	; 15
    1e9a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x1c>
    1e9e:	0d 89       	ldd	r16, Y+21	; 0x15
    1ea0:	1e 89       	ldd	r17, Y+22	; 0x16
    1ea2:	86 e0       	ldi	r24, 0x06	; 6
    1ea4:	8c 83       	std	Y+4, r24	; 0x04
    1ea6:	1a 83       	std	Y+2, r17	; 0x02
    1ea8:	09 83       	std	Y+1, r16	; 0x01
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	9f e7       	ldi	r25, 0x7F	; 127
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	ae 01       	movw	r20, r28
    1eb4:	47 5e       	subi	r20, 0xE7	; 231
    1eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb8:	6f 89       	ldd	r22, Y+23	; 0x17
    1eba:	78 8d       	ldd	r23, Y+24	; 0x18
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <vfprintf>
    1ec4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ec6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ec8:	e0 0f       	add	r30, r16
    1eca:	f1 1f       	adc	r31, r17
    1ecc:	10 82       	st	Z, r1
    1ece:	2e 96       	adiw	r28, 0x0e	; 14
    1ed0:	e4 e0       	ldi	r30, 0x04	; 4
    1ed2:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x1c>

00001ed6 <vfprintf>:
    1ed6:	ab e0       	ldi	r26, 0x0B	; 11
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e1 e7       	ldi	r30, 0x71	; 113
    1edc:	ff e0       	ldi	r31, 0x0F	; 15
    1ede:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__>
    1ee2:	6c 01       	movw	r12, r24
    1ee4:	7b 01       	movw	r14, r22
    1ee6:	8a 01       	movw	r16, r20
    1ee8:	fc 01       	movw	r30, r24
    1eea:	17 82       	std	Z+7, r1	; 0x07
    1eec:	16 82       	std	Z+6, r1	; 0x06
    1eee:	83 81       	ldd	r24, Z+3	; 0x03
    1ef0:	81 ff       	sbrs	r24, 1
    1ef2:	cc c1       	rjmp	.+920    	; 0x228c <vfprintf+0x3b6>
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	3c 01       	movw	r6, r24
    1efa:	f6 01       	movw	r30, r12
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	f7 01       	movw	r30, r14
    1f00:	93 fd       	sbrc	r25, 3
    1f02:	85 91       	lpm	r24, Z+
    1f04:	93 ff       	sbrs	r25, 3
    1f06:	81 91       	ld	r24, Z+
    1f08:	7f 01       	movw	r14, r30
    1f0a:	88 23       	and	r24, r24
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <vfprintf+0x3a>
    1f0e:	ba c1       	rjmp	.+884    	; 0x2284 <vfprintf+0x3ae>
    1f10:	85 32       	cpi	r24, 0x25	; 37
    1f12:	39 f4       	brne	.+14     	; 0x1f22 <vfprintf+0x4c>
    1f14:	93 fd       	sbrc	r25, 3
    1f16:	85 91       	lpm	r24, Z+
    1f18:	93 ff       	sbrs	r25, 3
    1f1a:	81 91       	ld	r24, Z+
    1f1c:	7f 01       	movw	r14, r30
    1f1e:	85 32       	cpi	r24, 0x25	; 37
    1f20:	29 f4       	brne	.+10     	; 0x1f2c <vfprintf+0x56>
    1f22:	b6 01       	movw	r22, r12
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    1f2a:	e7 cf       	rjmp	.-50     	; 0x1efa <vfprintf+0x24>
    1f2c:	91 2c       	mov	r9, r1
    1f2e:	21 2c       	mov	r2, r1
    1f30:	31 2c       	mov	r3, r1
    1f32:	ff e1       	ldi	r31, 0x1F	; 31
    1f34:	f3 15       	cp	r31, r3
    1f36:	d8 f0       	brcs	.+54     	; 0x1f6e <vfprintf+0x98>
    1f38:	8b 32       	cpi	r24, 0x2B	; 43
    1f3a:	79 f0       	breq	.+30     	; 0x1f5a <vfprintf+0x84>
    1f3c:	38 f4       	brcc	.+14     	; 0x1f4c <vfprintf+0x76>
    1f3e:	80 32       	cpi	r24, 0x20	; 32
    1f40:	79 f0       	breq	.+30     	; 0x1f60 <vfprintf+0x8a>
    1f42:	83 32       	cpi	r24, 0x23	; 35
    1f44:	a1 f4       	brne	.+40     	; 0x1f6e <vfprintf+0x98>
    1f46:	23 2d       	mov	r18, r3
    1f48:	20 61       	ori	r18, 0x10	; 16
    1f4a:	1d c0       	rjmp	.+58     	; 0x1f86 <vfprintf+0xb0>
    1f4c:	8d 32       	cpi	r24, 0x2D	; 45
    1f4e:	61 f0       	breq	.+24     	; 0x1f68 <vfprintf+0x92>
    1f50:	80 33       	cpi	r24, 0x30	; 48
    1f52:	69 f4       	brne	.+26     	; 0x1f6e <vfprintf+0x98>
    1f54:	23 2d       	mov	r18, r3
    1f56:	21 60       	ori	r18, 0x01	; 1
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <vfprintf+0xb0>
    1f5a:	83 2d       	mov	r24, r3
    1f5c:	82 60       	ori	r24, 0x02	; 2
    1f5e:	38 2e       	mov	r3, r24
    1f60:	e3 2d       	mov	r30, r3
    1f62:	e4 60       	ori	r30, 0x04	; 4
    1f64:	3e 2e       	mov	r3, r30
    1f66:	2a c0       	rjmp	.+84     	; 0x1fbc <vfprintf+0xe6>
    1f68:	f3 2d       	mov	r31, r3
    1f6a:	f8 60       	ori	r31, 0x08	; 8
    1f6c:	1d c0       	rjmp	.+58     	; 0x1fa8 <vfprintf+0xd2>
    1f6e:	37 fc       	sbrc	r3, 7
    1f70:	2d c0       	rjmp	.+90     	; 0x1fcc <vfprintf+0xf6>
    1f72:	20 ed       	ldi	r18, 0xD0	; 208
    1f74:	28 0f       	add	r18, r24
    1f76:	2a 30       	cpi	r18, 0x0A	; 10
    1f78:	40 f0       	brcs	.+16     	; 0x1f8a <vfprintf+0xb4>
    1f7a:	8e 32       	cpi	r24, 0x2E	; 46
    1f7c:	b9 f4       	brne	.+46     	; 0x1fac <vfprintf+0xd6>
    1f7e:	36 fc       	sbrc	r3, 6
    1f80:	81 c1       	rjmp	.+770    	; 0x2284 <vfprintf+0x3ae>
    1f82:	23 2d       	mov	r18, r3
    1f84:	20 64       	ori	r18, 0x40	; 64
    1f86:	32 2e       	mov	r3, r18
    1f88:	19 c0       	rjmp	.+50     	; 0x1fbc <vfprintf+0xe6>
    1f8a:	36 fe       	sbrs	r3, 6
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <vfprintf+0xc4>
    1f8e:	8a e0       	ldi	r24, 0x0A	; 10
    1f90:	98 9e       	mul	r9, r24
    1f92:	20 0d       	add	r18, r0
    1f94:	11 24       	eor	r1, r1
    1f96:	92 2e       	mov	r9, r18
    1f98:	11 c0       	rjmp	.+34     	; 0x1fbc <vfprintf+0xe6>
    1f9a:	ea e0       	ldi	r30, 0x0A	; 10
    1f9c:	2e 9e       	mul	r2, r30
    1f9e:	20 0d       	add	r18, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	22 2e       	mov	r2, r18
    1fa4:	f3 2d       	mov	r31, r3
    1fa6:	f0 62       	ori	r31, 0x20	; 32
    1fa8:	3f 2e       	mov	r3, r31
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <vfprintf+0xe6>
    1fac:	8c 36       	cpi	r24, 0x6C	; 108
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <vfprintf+0xe2>
    1fb0:	83 2d       	mov	r24, r3
    1fb2:	80 68       	ori	r24, 0x80	; 128
    1fb4:	38 2e       	mov	r3, r24
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <vfprintf+0xe6>
    1fb8:	88 36       	cpi	r24, 0x68	; 104
    1fba:	41 f4       	brne	.+16     	; 0x1fcc <vfprintf+0xf6>
    1fbc:	f7 01       	movw	r30, r14
    1fbe:	93 fd       	sbrc	r25, 3
    1fc0:	85 91       	lpm	r24, Z+
    1fc2:	93 ff       	sbrs	r25, 3
    1fc4:	81 91       	ld	r24, Z+
    1fc6:	7f 01       	movw	r14, r30
    1fc8:	81 11       	cpse	r24, r1
    1fca:	b3 cf       	rjmp	.-154    	; 0x1f32 <vfprintf+0x5c>
    1fcc:	98 2f       	mov	r25, r24
    1fce:	9f 7d       	andi	r25, 0xDF	; 223
    1fd0:	95 54       	subi	r25, 0x45	; 69
    1fd2:	93 30       	cpi	r25, 0x03	; 3
    1fd4:	28 f4       	brcc	.+10     	; 0x1fe0 <vfprintf+0x10a>
    1fd6:	0c 5f       	subi	r16, 0xFC	; 252
    1fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fda:	9f e3       	ldi	r25, 0x3F	; 63
    1fdc:	99 83       	std	Y+1, r25	; 0x01
    1fde:	0d c0       	rjmp	.+26     	; 0x1ffa <vfprintf+0x124>
    1fe0:	83 36       	cpi	r24, 0x63	; 99
    1fe2:	31 f0       	breq	.+12     	; 0x1ff0 <vfprintf+0x11a>
    1fe4:	83 37       	cpi	r24, 0x73	; 115
    1fe6:	71 f0       	breq	.+28     	; 0x2004 <vfprintf+0x12e>
    1fe8:	83 35       	cpi	r24, 0x53	; 83
    1fea:	09 f0       	breq	.+2      	; 0x1fee <vfprintf+0x118>
    1fec:	59 c0       	rjmp	.+178    	; 0x20a0 <vfprintf+0x1ca>
    1fee:	21 c0       	rjmp	.+66     	; 0x2032 <vfprintf+0x15c>
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	80 81       	ld	r24, Z
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	0e 5f       	subi	r16, 0xFE	; 254
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	88 24       	eor	r8, r8
    1ffc:	83 94       	inc	r8
    1ffe:	91 2c       	mov	r9, r1
    2000:	53 01       	movw	r10, r6
    2002:	13 c0       	rjmp	.+38     	; 0x202a <vfprintf+0x154>
    2004:	28 01       	movw	r4, r16
    2006:	f2 e0       	ldi	r31, 0x02	; 2
    2008:	4f 0e       	add	r4, r31
    200a:	51 1c       	adc	r5, r1
    200c:	f8 01       	movw	r30, r16
    200e:	a0 80       	ld	r10, Z
    2010:	b1 80       	ldd	r11, Z+1	; 0x01
    2012:	36 fe       	sbrs	r3, 6
    2014:	03 c0       	rjmp	.+6      	; 0x201c <vfprintf+0x146>
    2016:	69 2d       	mov	r22, r9
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <vfprintf+0x14a>
    201c:	6f ef       	ldi	r22, 0xFF	; 255
    201e:	7f ef       	ldi	r23, 0xFF	; 255
    2020:	c5 01       	movw	r24, r10
    2022:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <strnlen>
    2026:	4c 01       	movw	r8, r24
    2028:	82 01       	movw	r16, r4
    202a:	f3 2d       	mov	r31, r3
    202c:	ff 77       	andi	r31, 0x7F	; 127
    202e:	3f 2e       	mov	r3, r31
    2030:	16 c0       	rjmp	.+44     	; 0x205e <vfprintf+0x188>
    2032:	28 01       	movw	r4, r16
    2034:	22 e0       	ldi	r18, 0x02	; 2
    2036:	42 0e       	add	r4, r18
    2038:	51 1c       	adc	r5, r1
    203a:	f8 01       	movw	r30, r16
    203c:	a0 80       	ld	r10, Z
    203e:	b1 80       	ldd	r11, Z+1	; 0x01
    2040:	36 fe       	sbrs	r3, 6
    2042:	03 c0       	rjmp	.+6      	; 0x204a <vfprintf+0x174>
    2044:	69 2d       	mov	r22, r9
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	02 c0       	rjmp	.+4      	; 0x204e <vfprintf+0x178>
    204a:	6f ef       	ldi	r22, 0xFF	; 255
    204c:	7f ef       	ldi	r23, 0xFF	; 255
    204e:	c5 01       	movw	r24, r10
    2050:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strnlen_P>
    2054:	4c 01       	movw	r8, r24
    2056:	f3 2d       	mov	r31, r3
    2058:	f0 68       	ori	r31, 0x80	; 128
    205a:	3f 2e       	mov	r3, r31
    205c:	82 01       	movw	r16, r4
    205e:	33 fc       	sbrc	r3, 3
    2060:	1b c0       	rjmp	.+54     	; 0x2098 <vfprintf+0x1c2>
    2062:	82 2d       	mov	r24, r2
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	88 16       	cp	r8, r24
    2068:	99 06       	cpc	r9, r25
    206a:	b0 f4       	brcc	.+44     	; 0x2098 <vfprintf+0x1c2>
    206c:	b6 01       	movw	r22, r12
    206e:	80 e2       	ldi	r24, 0x20	; 32
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    2076:	2a 94       	dec	r2
    2078:	f4 cf       	rjmp	.-24     	; 0x2062 <vfprintf+0x18c>
    207a:	f5 01       	movw	r30, r10
    207c:	37 fc       	sbrc	r3, 7
    207e:	85 91       	lpm	r24, Z+
    2080:	37 fe       	sbrs	r3, 7
    2082:	81 91       	ld	r24, Z+
    2084:	5f 01       	movw	r10, r30
    2086:	b6 01       	movw	r22, r12
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    208e:	21 10       	cpse	r2, r1
    2090:	2a 94       	dec	r2
    2092:	21 e0       	ldi	r18, 0x01	; 1
    2094:	82 1a       	sub	r8, r18
    2096:	91 08       	sbc	r9, r1
    2098:	81 14       	cp	r8, r1
    209a:	91 04       	cpc	r9, r1
    209c:	71 f7       	brne	.-36     	; 0x207a <vfprintf+0x1a4>
    209e:	e8 c0       	rjmp	.+464    	; 0x2270 <vfprintf+0x39a>
    20a0:	84 36       	cpi	r24, 0x64	; 100
    20a2:	11 f0       	breq	.+4      	; 0x20a8 <vfprintf+0x1d2>
    20a4:	89 36       	cpi	r24, 0x69	; 105
    20a6:	41 f5       	brne	.+80     	; 0x20f8 <vfprintf+0x222>
    20a8:	f8 01       	movw	r30, r16
    20aa:	37 fe       	sbrs	r3, 7
    20ac:	07 c0       	rjmp	.+14     	; 0x20bc <vfprintf+0x1e6>
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	0c 5f       	subi	r16, 0xFC	; 252
    20b8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <vfprintf+0x1f6>
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	07 2e       	mov	r0, r23
    20c2:	00 0c       	add	r0, r0
    20c4:	88 0b       	sbc	r24, r24
    20c6:	99 0b       	sbc	r25, r25
    20c8:	0e 5f       	subi	r16, 0xFE	; 254
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	f3 2d       	mov	r31, r3
    20ce:	ff 76       	andi	r31, 0x6F	; 111
    20d0:	3f 2e       	mov	r3, r31
    20d2:	97 ff       	sbrs	r25, 7
    20d4:	09 c0       	rjmp	.+18     	; 0x20e8 <vfprintf+0x212>
    20d6:	90 95       	com	r25
    20d8:	80 95       	com	r24
    20da:	70 95       	com	r23
    20dc:	61 95       	neg	r22
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	8f 4f       	sbci	r24, 0xFF	; 255
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	f0 68       	ori	r31, 0x80	; 128
    20e6:	3f 2e       	mov	r3, r31
    20e8:	2a e0       	ldi	r18, 0x0A	; 10
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	a3 01       	movw	r20, r6
    20ee:	0e 94 c1 11 	call	0x2382	; 0x2382 <__ultoa_invert>
    20f2:	88 2e       	mov	r8, r24
    20f4:	86 18       	sub	r8, r6
    20f6:	45 c0       	rjmp	.+138    	; 0x2182 <vfprintf+0x2ac>
    20f8:	85 37       	cpi	r24, 0x75	; 117
    20fa:	31 f4       	brne	.+12     	; 0x2108 <vfprintf+0x232>
    20fc:	23 2d       	mov	r18, r3
    20fe:	2f 7e       	andi	r18, 0xEF	; 239
    2100:	b2 2e       	mov	r11, r18
    2102:	2a e0       	ldi	r18, 0x0A	; 10
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	25 c0       	rjmp	.+74     	; 0x2152 <vfprintf+0x27c>
    2108:	93 2d       	mov	r25, r3
    210a:	99 7f       	andi	r25, 0xF9	; 249
    210c:	b9 2e       	mov	r11, r25
    210e:	8f 36       	cpi	r24, 0x6F	; 111
    2110:	c1 f0       	breq	.+48     	; 0x2142 <vfprintf+0x26c>
    2112:	18 f4       	brcc	.+6      	; 0x211a <vfprintf+0x244>
    2114:	88 35       	cpi	r24, 0x58	; 88
    2116:	79 f0       	breq	.+30     	; 0x2136 <vfprintf+0x260>
    2118:	b5 c0       	rjmp	.+362    	; 0x2284 <vfprintf+0x3ae>
    211a:	80 37       	cpi	r24, 0x70	; 112
    211c:	19 f0       	breq	.+6      	; 0x2124 <vfprintf+0x24e>
    211e:	88 37       	cpi	r24, 0x78	; 120
    2120:	21 f0       	breq	.+8      	; 0x212a <vfprintf+0x254>
    2122:	b0 c0       	rjmp	.+352    	; 0x2284 <vfprintf+0x3ae>
    2124:	e9 2f       	mov	r30, r25
    2126:	e0 61       	ori	r30, 0x10	; 16
    2128:	be 2e       	mov	r11, r30
    212a:	b4 fe       	sbrs	r11, 4
    212c:	0d c0       	rjmp	.+26     	; 0x2148 <vfprintf+0x272>
    212e:	fb 2d       	mov	r31, r11
    2130:	f4 60       	ori	r31, 0x04	; 4
    2132:	bf 2e       	mov	r11, r31
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <vfprintf+0x272>
    2136:	34 fe       	sbrs	r3, 4
    2138:	0a c0       	rjmp	.+20     	; 0x214e <vfprintf+0x278>
    213a:	29 2f       	mov	r18, r25
    213c:	26 60       	ori	r18, 0x06	; 6
    213e:	b2 2e       	mov	r11, r18
    2140:	06 c0       	rjmp	.+12     	; 0x214e <vfprintf+0x278>
    2142:	28 e0       	ldi	r18, 0x08	; 8
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	05 c0       	rjmp	.+10     	; 0x2152 <vfprintf+0x27c>
    2148:	20 e1       	ldi	r18, 0x10	; 16
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <vfprintf+0x27c>
    214e:	20 e1       	ldi	r18, 0x10	; 16
    2150:	32 e0       	ldi	r19, 0x02	; 2
    2152:	f8 01       	movw	r30, r16
    2154:	b7 fe       	sbrs	r11, 7
    2156:	07 c0       	rjmp	.+14     	; 0x2166 <vfprintf+0x290>
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	0c 5f       	subi	r16, 0xFC	; 252
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	06 c0       	rjmp	.+12     	; 0x2172 <vfprintf+0x29c>
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 5f       	subi	r16, 0xFE	; 254
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	a3 01       	movw	r20, r6
    2174:	0e 94 c1 11 	call	0x2382	; 0x2382 <__ultoa_invert>
    2178:	88 2e       	mov	r8, r24
    217a:	86 18       	sub	r8, r6
    217c:	fb 2d       	mov	r31, r11
    217e:	ff 77       	andi	r31, 0x7F	; 127
    2180:	3f 2e       	mov	r3, r31
    2182:	36 fe       	sbrs	r3, 6
    2184:	0d c0       	rjmp	.+26     	; 0x21a0 <vfprintf+0x2ca>
    2186:	23 2d       	mov	r18, r3
    2188:	2e 7f       	andi	r18, 0xFE	; 254
    218a:	a2 2e       	mov	r10, r18
    218c:	89 14       	cp	r8, r9
    218e:	58 f4       	brcc	.+22     	; 0x21a6 <vfprintf+0x2d0>
    2190:	34 fe       	sbrs	r3, 4
    2192:	0b c0       	rjmp	.+22     	; 0x21aa <vfprintf+0x2d4>
    2194:	32 fc       	sbrc	r3, 2
    2196:	09 c0       	rjmp	.+18     	; 0x21aa <vfprintf+0x2d4>
    2198:	83 2d       	mov	r24, r3
    219a:	8e 7e       	andi	r24, 0xEE	; 238
    219c:	a8 2e       	mov	r10, r24
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <vfprintf+0x2d4>
    21a0:	b8 2c       	mov	r11, r8
    21a2:	a3 2c       	mov	r10, r3
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <vfprintf+0x2d6>
    21a6:	b8 2c       	mov	r11, r8
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <vfprintf+0x2d6>
    21aa:	b9 2c       	mov	r11, r9
    21ac:	a4 fe       	sbrs	r10, 4
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <vfprintf+0x2f8>
    21b0:	fe 01       	movw	r30, r28
    21b2:	e8 0d       	add	r30, r8
    21b4:	f1 1d       	adc	r31, r1
    21b6:	80 81       	ld	r24, Z
    21b8:	80 33       	cpi	r24, 0x30	; 48
    21ba:	21 f4       	brne	.+8      	; 0x21c4 <vfprintf+0x2ee>
    21bc:	9a 2d       	mov	r25, r10
    21be:	99 7e       	andi	r25, 0xE9	; 233
    21c0:	a9 2e       	mov	r10, r25
    21c2:	09 c0       	rjmp	.+18     	; 0x21d6 <vfprintf+0x300>
    21c4:	a2 fe       	sbrs	r10, 2
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <vfprintf+0x2fe>
    21c8:	b3 94       	inc	r11
    21ca:	b3 94       	inc	r11
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <vfprintf+0x300>
    21ce:	8a 2d       	mov	r24, r10
    21d0:	86 78       	andi	r24, 0x86	; 134
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <vfprintf+0x300>
    21d4:	b3 94       	inc	r11
    21d6:	a3 fc       	sbrc	r10, 3
    21d8:	11 c0       	rjmp	.+34     	; 0x21fc <vfprintf+0x326>
    21da:	a0 fe       	sbrs	r10, 0
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <vfprintf+0x314>
    21de:	b2 14       	cp	r11, r2
    21e0:	88 f4       	brcc	.+34     	; 0x2204 <vfprintf+0x32e>
    21e2:	28 0c       	add	r2, r8
    21e4:	92 2c       	mov	r9, r2
    21e6:	9b 18       	sub	r9, r11
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <vfprintf+0x330>
    21ea:	b2 14       	cp	r11, r2
    21ec:	60 f4       	brcc	.+24     	; 0x2206 <vfprintf+0x330>
    21ee:	b6 01       	movw	r22, r12
    21f0:	80 e2       	ldi	r24, 0x20	; 32
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    21f8:	b3 94       	inc	r11
    21fa:	f7 cf       	rjmp	.-18     	; 0x21ea <vfprintf+0x314>
    21fc:	b2 14       	cp	r11, r2
    21fe:	18 f4       	brcc	.+6      	; 0x2206 <vfprintf+0x330>
    2200:	2b 18       	sub	r2, r11
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <vfprintf+0x332>
    2204:	98 2c       	mov	r9, r8
    2206:	21 2c       	mov	r2, r1
    2208:	a4 fe       	sbrs	r10, 4
    220a:	10 c0       	rjmp	.+32     	; 0x222c <vfprintf+0x356>
    220c:	b6 01       	movw	r22, r12
    220e:	80 e3       	ldi	r24, 0x30	; 48
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    2216:	a2 fe       	sbrs	r10, 2
    2218:	17 c0       	rjmp	.+46     	; 0x2248 <vfprintf+0x372>
    221a:	a1 fc       	sbrc	r10, 1
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <vfprintf+0x34e>
    221e:	88 e7       	ldi	r24, 0x78	; 120
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <vfprintf+0x352>
    2224:	88 e5       	ldi	r24, 0x58	; 88
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	b6 01       	movw	r22, r12
    222a:	0c c0       	rjmp	.+24     	; 0x2244 <vfprintf+0x36e>
    222c:	8a 2d       	mov	r24, r10
    222e:	86 78       	andi	r24, 0x86	; 134
    2230:	59 f0       	breq	.+22     	; 0x2248 <vfprintf+0x372>
    2232:	a1 fe       	sbrs	r10, 1
    2234:	02 c0       	rjmp	.+4      	; 0x223a <vfprintf+0x364>
    2236:	8b e2       	ldi	r24, 0x2B	; 43
    2238:	01 c0       	rjmp	.+2      	; 0x223c <vfprintf+0x366>
    223a:	80 e2       	ldi	r24, 0x20	; 32
    223c:	a7 fc       	sbrc	r10, 7
    223e:	8d e2       	ldi	r24, 0x2D	; 45
    2240:	b6 01       	movw	r22, r12
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    2248:	89 14       	cp	r8, r9
    224a:	38 f4       	brcc	.+14     	; 0x225a <vfprintf+0x384>
    224c:	b6 01       	movw	r22, r12
    224e:	80 e3       	ldi	r24, 0x30	; 48
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    2256:	9a 94       	dec	r9
    2258:	f7 cf       	rjmp	.-18     	; 0x2248 <vfprintf+0x372>
    225a:	8a 94       	dec	r8
    225c:	f3 01       	movw	r30, r6
    225e:	e8 0d       	add	r30, r8
    2260:	f1 1d       	adc	r31, r1
    2262:	80 81       	ld	r24, Z
    2264:	b6 01       	movw	r22, r12
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    226c:	81 10       	cpse	r8, r1
    226e:	f5 cf       	rjmp	.-22     	; 0x225a <vfprintf+0x384>
    2270:	22 20       	and	r2, r2
    2272:	09 f4       	brne	.+2      	; 0x2276 <vfprintf+0x3a0>
    2274:	42 ce       	rjmp	.-892    	; 0x1efa <vfprintf+0x24>
    2276:	b6 01       	movw	r22, r12
    2278:	80 e2       	ldi	r24, 0x20	; 32
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 85 11 	call	0x230a	; 0x230a <fputc>
    2280:	2a 94       	dec	r2
    2282:	f6 cf       	rjmp	.-20     	; 0x2270 <vfprintf+0x39a>
    2284:	f6 01       	movw	r30, r12
    2286:	86 81       	ldd	r24, Z+6	; 0x06
    2288:	97 81       	ldd	r25, Z+7	; 0x07
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <vfprintf+0x3ba>
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	9f ef       	ldi	r25, 0xFF	; 255
    2290:	2b 96       	adiw	r28, 0x0b	; 11
    2292:	e2 e1       	ldi	r30, 0x12	; 18
    2294:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__>

00002298 <calloc>:
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	86 9f       	mul	r24, r22
    22a2:	80 01       	movw	r16, r0
    22a4:	87 9f       	mul	r24, r23
    22a6:	10 0d       	add	r17, r0
    22a8:	96 9f       	mul	r25, r22
    22aa:	10 0d       	add	r17, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	c8 01       	movw	r24, r16
    22b0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <malloc>
    22b4:	ec 01       	movw	r28, r24
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	29 f0       	breq	.+10     	; 0x22c4 <calloc+0x2c>
    22ba:	a8 01       	movw	r20, r16
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <memset>
    22c4:	ce 01       	movw	r24, r28
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	08 95       	ret

000022d0 <strnlen_P>:
    22d0:	fc 01       	movw	r30, r24
    22d2:	05 90       	lpm	r0, Z+
    22d4:	61 50       	subi	r22, 0x01	; 1
    22d6:	70 40       	sbci	r23, 0x00	; 0
    22d8:	01 10       	cpse	r0, r1
    22da:	d8 f7       	brcc	.-10     	; 0x22d2 <strnlen_P+0x2>
    22dc:	80 95       	com	r24
    22de:	90 95       	com	r25
    22e0:	8e 0f       	add	r24, r30
    22e2:	9f 1f       	adc	r25, r31
    22e4:	08 95       	ret

000022e6 <memset>:
    22e6:	dc 01       	movw	r26, r24
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <memset+0x6>
    22ea:	6d 93       	st	X+, r22
    22ec:	41 50       	subi	r20, 0x01	; 1
    22ee:	50 40       	sbci	r21, 0x00	; 0
    22f0:	e0 f7       	brcc	.-8      	; 0x22ea <memset+0x4>
    22f2:	08 95       	ret

000022f4 <strnlen>:
    22f4:	fc 01       	movw	r30, r24
    22f6:	61 50       	subi	r22, 0x01	; 1
    22f8:	70 40       	sbci	r23, 0x00	; 0
    22fa:	01 90       	ld	r0, Z+
    22fc:	01 10       	cpse	r0, r1
    22fe:	d8 f7       	brcc	.-10     	; 0x22f6 <strnlen+0x2>
    2300:	80 95       	com	r24
    2302:	90 95       	com	r25
    2304:	8e 0f       	add	r24, r30
    2306:	9f 1f       	adc	r25, r31
    2308:	08 95       	ret

0000230a <fputc>:
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	fb 01       	movw	r30, r22
    2314:	23 81       	ldd	r18, Z+3	; 0x03
    2316:	21 fd       	sbrc	r18, 1
    2318:	03 c0       	rjmp	.+6      	; 0x2320 <fputc+0x16>
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	9f ef       	ldi	r25, 0xFF	; 255
    231e:	2c c0       	rjmp	.+88     	; 0x2378 <fputc+0x6e>
    2320:	22 ff       	sbrs	r18, 2
    2322:	16 c0       	rjmp	.+44     	; 0x2350 <fputc+0x46>
    2324:	46 81       	ldd	r20, Z+6	; 0x06
    2326:	57 81       	ldd	r21, Z+7	; 0x07
    2328:	24 81       	ldd	r18, Z+4	; 0x04
    232a:	35 81       	ldd	r19, Z+5	; 0x05
    232c:	42 17       	cp	r20, r18
    232e:	53 07       	cpc	r21, r19
    2330:	44 f4       	brge	.+16     	; 0x2342 <fputc+0x38>
    2332:	a0 81       	ld	r26, Z
    2334:	b1 81       	ldd	r27, Z+1	; 0x01
    2336:	9d 01       	movw	r18, r26
    2338:	2f 5f       	subi	r18, 0xFF	; 255
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	31 83       	std	Z+1, r19	; 0x01
    233e:	20 83       	st	Z, r18
    2340:	8c 93       	st	X, r24
    2342:	26 81       	ldd	r18, Z+6	; 0x06
    2344:	37 81       	ldd	r19, Z+7	; 0x07
    2346:	2f 5f       	subi	r18, 0xFF	; 255
    2348:	3f 4f       	sbci	r19, 0xFF	; 255
    234a:	37 83       	std	Z+7, r19	; 0x07
    234c:	26 83       	std	Z+6, r18	; 0x06
    234e:	14 c0       	rjmp	.+40     	; 0x2378 <fputc+0x6e>
    2350:	8b 01       	movw	r16, r22
    2352:	ec 01       	movw	r28, r24
    2354:	fb 01       	movw	r30, r22
    2356:	00 84       	ldd	r0, Z+8	; 0x08
    2358:	f1 85       	ldd	r31, Z+9	; 0x09
    235a:	e0 2d       	mov	r30, r0
    235c:	09 95       	icall
    235e:	89 2b       	or	r24, r25
    2360:	e1 f6       	brne	.-72     	; 0x231a <fputc+0x10>
    2362:	d8 01       	movw	r26, r16
    2364:	16 96       	adiw	r26, 0x06	; 6
    2366:	8d 91       	ld	r24, X+
    2368:	9c 91       	ld	r25, X
    236a:	17 97       	sbiw	r26, 0x07	; 7
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	17 96       	adiw	r26, 0x07	; 7
    2370:	9c 93       	st	X, r25
    2372:	8e 93       	st	-X, r24
    2374:	16 97       	sbiw	r26, 0x06	; 6
    2376:	ce 01       	movw	r24, r28
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <__ultoa_invert>:
    2382:	fa 01       	movw	r30, r20
    2384:	aa 27       	eor	r26, r26
    2386:	28 30       	cpi	r18, 0x08	; 8
    2388:	51 f1       	breq	.+84     	; 0x23de <__ultoa_invert+0x5c>
    238a:	20 31       	cpi	r18, 0x10	; 16
    238c:	81 f1       	breq	.+96     	; 0x23ee <__ultoa_invert+0x6c>
    238e:	e8 94       	clt
    2390:	6f 93       	push	r22
    2392:	6e 7f       	andi	r22, 0xFE	; 254
    2394:	6e 5f       	subi	r22, 0xFE	; 254
    2396:	7f 4f       	sbci	r23, 0xFF	; 255
    2398:	8f 4f       	sbci	r24, 0xFF	; 255
    239a:	9f 4f       	sbci	r25, 0xFF	; 255
    239c:	af 4f       	sbci	r26, 0xFF	; 255
    239e:	b1 e0       	ldi	r27, 0x01	; 1
    23a0:	3e d0       	rcall	.+124    	; 0x241e <__ultoa_invert+0x9c>
    23a2:	b4 e0       	ldi	r27, 0x04	; 4
    23a4:	3c d0       	rcall	.+120    	; 0x241e <__ultoa_invert+0x9c>
    23a6:	67 0f       	add	r22, r23
    23a8:	78 1f       	adc	r23, r24
    23aa:	89 1f       	adc	r24, r25
    23ac:	9a 1f       	adc	r25, r26
    23ae:	a1 1d       	adc	r26, r1
    23b0:	68 0f       	add	r22, r24
    23b2:	79 1f       	adc	r23, r25
    23b4:	8a 1f       	adc	r24, r26
    23b6:	91 1d       	adc	r25, r1
    23b8:	a1 1d       	adc	r26, r1
    23ba:	6a 0f       	add	r22, r26
    23bc:	71 1d       	adc	r23, r1
    23be:	81 1d       	adc	r24, r1
    23c0:	91 1d       	adc	r25, r1
    23c2:	a1 1d       	adc	r26, r1
    23c4:	20 d0       	rcall	.+64     	; 0x2406 <__ultoa_invert+0x84>
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__ultoa_invert+0x48>
    23c8:	68 94       	set
    23ca:	3f 91       	pop	r19
    23cc:	2a e0       	ldi	r18, 0x0A	; 10
    23ce:	26 9f       	mul	r18, r22
    23d0:	11 24       	eor	r1, r1
    23d2:	30 19       	sub	r19, r0
    23d4:	30 5d       	subi	r19, 0xD0	; 208
    23d6:	31 93       	st	Z+, r19
    23d8:	de f6       	brtc	.-74     	; 0x2390 <__ultoa_invert+0xe>
    23da:	cf 01       	movw	r24, r30
    23dc:	08 95       	ret
    23de:	46 2f       	mov	r20, r22
    23e0:	47 70       	andi	r20, 0x07	; 7
    23e2:	40 5d       	subi	r20, 0xD0	; 208
    23e4:	41 93       	st	Z+, r20
    23e6:	b3 e0       	ldi	r27, 0x03	; 3
    23e8:	0f d0       	rcall	.+30     	; 0x2408 <__ultoa_invert+0x86>
    23ea:	c9 f7       	brne	.-14     	; 0x23de <__ultoa_invert+0x5c>
    23ec:	f6 cf       	rjmp	.-20     	; 0x23da <__ultoa_invert+0x58>
    23ee:	46 2f       	mov	r20, r22
    23f0:	4f 70       	andi	r20, 0x0F	; 15
    23f2:	40 5d       	subi	r20, 0xD0	; 208
    23f4:	4a 33       	cpi	r20, 0x3A	; 58
    23f6:	18 f0       	brcs	.+6      	; 0x23fe <__ultoa_invert+0x7c>
    23f8:	49 5d       	subi	r20, 0xD9	; 217
    23fa:	31 fd       	sbrc	r19, 1
    23fc:	40 52       	subi	r20, 0x20	; 32
    23fe:	41 93       	st	Z+, r20
    2400:	02 d0       	rcall	.+4      	; 0x2406 <__ultoa_invert+0x84>
    2402:	a9 f7       	brne	.-22     	; 0x23ee <__ultoa_invert+0x6c>
    2404:	ea cf       	rjmp	.-44     	; 0x23da <__ultoa_invert+0x58>
    2406:	b4 e0       	ldi	r27, 0x04	; 4
    2408:	a6 95       	lsr	r26
    240a:	97 95       	ror	r25
    240c:	87 95       	ror	r24
    240e:	77 95       	ror	r23
    2410:	67 95       	ror	r22
    2412:	ba 95       	dec	r27
    2414:	c9 f7       	brne	.-14     	; 0x2408 <__ultoa_invert+0x86>
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	61 05       	cpc	r22, r1
    241a:	71 05       	cpc	r23, r1
    241c:	08 95       	ret
    241e:	9b 01       	movw	r18, r22
    2420:	ac 01       	movw	r20, r24
    2422:	0a 2e       	mov	r0, r26
    2424:	06 94       	lsr	r0
    2426:	57 95       	ror	r21
    2428:	47 95       	ror	r20
    242a:	37 95       	ror	r19
    242c:	27 95       	ror	r18
    242e:	ba 95       	dec	r27
    2430:	c9 f7       	brne	.-14     	; 0x2424 <__ultoa_invert+0xa2>
    2432:	62 0f       	add	r22, r18
    2434:	73 1f       	adc	r23, r19
    2436:	84 1f       	adc	r24, r20
    2438:	95 1f       	adc	r25, r21
    243a:	a0 1d       	adc	r26, r0
    243c:	08 95       	ret

0000243e <__prologue_saves__>:
    243e:	2f 92       	push	r2
    2440:	3f 92       	push	r3
    2442:	4f 92       	push	r4
    2444:	5f 92       	push	r5
    2446:	6f 92       	push	r6
    2448:	7f 92       	push	r7
    244a:	8f 92       	push	r8
    244c:	9f 92       	push	r9
    244e:	af 92       	push	r10
    2450:	bf 92       	push	r11
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	ca 1b       	sub	r28, r26
    2468:	db 0b       	sbc	r29, r27
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	09 94       	ijmp

00002476 <__epilogue_restores__>:
    2476:	2a 88       	ldd	r2, Y+18	; 0x12
    2478:	39 88       	ldd	r3, Y+17	; 0x11
    247a:	48 88       	ldd	r4, Y+16	; 0x10
    247c:	5f 84       	ldd	r5, Y+15	; 0x0f
    247e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2480:	7d 84       	ldd	r7, Y+13	; 0x0d
    2482:	8c 84       	ldd	r8, Y+12	; 0x0c
    2484:	9b 84       	ldd	r9, Y+11	; 0x0b
    2486:	aa 84       	ldd	r10, Y+10	; 0x0a
    2488:	b9 84       	ldd	r11, Y+9	; 0x09
    248a:	c8 84       	ldd	r12, Y+8	; 0x08
    248c:	df 80       	ldd	r13, Y+7	; 0x07
    248e:	ee 80       	ldd	r14, Y+6	; 0x06
    2490:	fd 80       	ldd	r15, Y+5	; 0x05
    2492:	0c 81       	ldd	r16, Y+4	; 0x04
    2494:	1b 81       	ldd	r17, Y+3	; 0x03
    2496:	aa 81       	ldd	r26, Y+2	; 0x02
    2498:	b9 81       	ldd	r27, Y+1	; 0x01
    249a:	ce 0f       	add	r28, r30
    249c:	d1 1d       	adc	r29, r1
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	ed 01       	movw	r28, r26
    24aa:	08 95       	ret

000024ac <_exit>:
    24ac:	f8 94       	cli

000024ae <__stop_program>:
    24ae:	ff cf       	rjmp	.-2      	; 0x24ae <__stop_program>
