
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fa  00800100  00001f3c  00001fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008002fa  008002fa  000021ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003308  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000132b  00000000  00000000  00005854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e1  00000000  00000000  00006b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  00008360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be5  00000000  00000000  00008b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000189b  00000000  00000000  00009731  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000afcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_1>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ec e3       	ldi	r30, 0x3C	; 60
     6d4:	ff e1       	ldi	r31, 0x1F	; 31
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	aa 3f       	cpi	r26, 0xFA	; 250
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	aa ef       	ldi	r26, 0xFA	; 250
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ae 31       	cpi	r26, 0x1E	; 30
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
     6f6:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <adc_init>:



void adc_init(void){
	// Configure PD5 pin as output
	DDRD |= (1 << DDD5);
     6fe:	8d 9a       	sbi	0x11, 5	; 17

	// Timer without prescaling
	TCCR1B &= ~(7 << CS10); // Set CS10, CS11, CS12 to 0
     700:	8e b5       	in	r24, 0x2e	; 46
     702:	88 7f       	andi	r24, 0xF8	; 248
     704:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10); // Set CS10 to 1
     706:	8e b5       	in	r24, 0x2e	; 46
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	8e bd       	out	0x2e, r24	; 46

	// Waveform generation mode = CTC, Top = OCR0
	TCCR1A &= ~(1 << WGM10); // WGM10 = 0
     70c:	8f b5       	in	r24, 0x2f	; 47
     70e:	8e 7f       	andi	r24, 0xFE	; 254
     710:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << WGM11); // WGM11 = 0
     712:	8f b5       	in	r24, 0x2f	; 47
     714:	8d 7f       	andi	r24, 0xFD	; 253
     716:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); // WGM12 = 1
     718:	8e b5       	in	r24, 0x2e	; 46
     71a:	88 60       	ori	r24, 0x08	; 8
     71c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1 << WGM13); // WGM13 = 0
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	8f 7e       	andi	r24, 0xEF	; 239
     722:	8e bd       	out	0x2e, r24	; 46
	
	// Toggles pin PD5 when TCNT0 = OCR0
	TCCR1A &= ~(1 << COM1A1); // COM1A1 = 0
     724:	8f b5       	in	r24, 0x2f	; 47
     726:	8f 77       	andi	r24, 0x7F	; 127
     728:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A0); // COM1A0 = 1
     72a:	8f b5       	in	r24, 0x2f	; 47
     72c:	80 64       	ori	r24, 0x40	; 64
     72e:	8f bd       	out	0x2f, r24	; 47
	
	// Defines the top value for the counter
	OCR1A = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	9b bd       	out	0x2b, r25	; 43
     736:	8a bd       	out	0x2a, r24	; 42
     738:	08 95       	ret

0000073a <adc_rd>:
	
	
}

volatile uint8_t adc_rd(uint8_t channel){
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	08 2f       	mov	r16, r24
		
	xmem_write(channel, OFFSET_ADC);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	74 e0       	ldi	r23, 0x04	; 4
     74a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xmem_write>
	_delay_ms((9*4*2/F_CPU));
	
	uint8_t channel_data;
	
	for (int ch = 0; ch < channel; ch++){
     74e:	10 e0       	ldi	r17, 0x00	; 0
     750:	10 16       	cp	r1, r16
     752:	11 06       	cpc	r1, r17
     754:	5c f4       	brge	.+22     	; 0x76c <adc_rd+0x32>
     756:	c0 e0       	ldi	r28, 0x00	; 0
     758:	d0 e0       	ldi	r29, 0x00	; 0
		channel_data = xmem_read(OFFSET_ADC);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <xmem_read>
     762:	f8 2e       	mov	r15, r24
	xmem_write(channel, OFFSET_ADC);
	_delay_ms((9*4*2/F_CPU));
	
	uint8_t channel_data;
	
	for (int ch = 0; ch < channel; ch++){
     764:	21 96       	adiw	r28, 0x01	; 1
     766:	c0 17       	cp	r28, r16
     768:	d1 07       	cpc	r29, r17
     76a:	b9 f7       	brne	.-18     	; 0x75a <adc_rd+0x20>
		channel_data = xmem_read(OFFSET_ADC);
	}
	
	return channel_data;
}
     76c:	8f 2d       	mov	r24, r15
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	08 95       	ret

0000077a <CAN_send_message>:
		// Clear receive flag for receive buffer 1. 
		READ_B1_MESSAGE = 0;
		
		printf("Received message: %x \r\n", p_msg->data[0]);
	}
}
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	6c 01       	movw	r12, r24
     78a:	fc 01       	movw	r30, r24
     78c:	c0 81       	ld	r28, Z
     78e:	d1 81       	ldd	r29, Z+1	; 0x01
     790:	6c 2f       	mov	r22, r28
     792:	62 95       	swap	r22
     794:	66 0f       	add	r22, r22
     796:	60 7e       	andi	r22, 0xE0	; 224
     798:	42 e3       	ldi	r20, 0x32	; 50
     79a:	80 ee       	ldi	r24, 0xE0	; 224
     79c:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
     7a0:	ce 01       	movw	r24, r28
     7a2:	96 95       	lsr	r25
     7a4:	87 95       	ror	r24
     7a6:	96 95       	lsr	r25
     7a8:	87 95       	ror	r24
     7aa:	96 95       	lsr	r25
     7ac:	87 95       	ror	r24
     7ae:	61 e3       	ldi	r22, 0x31	; 49
     7b0:	0e 94 a8 04 	call	0x950	; 0x950 <mcp2515_write>
     7b4:	45 e3       	ldi	r20, 0x35	; 53
     7b6:	f6 01       	movw	r30, r12
     7b8:	62 81       	ldd	r22, Z+2	; 0x02
     7ba:	8f e0       	ldi	r24, 0x0F	; 15
     7bc:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
     7c0:	f6 01       	movw	r30, r12
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	88 23       	and	r24, r24
     7c6:	a9 f0       	breq	.+42     	; 0x7f2 <CAN_send_message+0x78>
     7c8:	76 01       	movw	r14, r12
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	ef 0e       	add	r14, r31
     7ce:	f1 1c       	adc	r15, r1
     7d0:	16 e3       	ldi	r17, 0x36	; 54
     7d2:	c0 e0       	ldi	r28, 0x00	; 0
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	61 2f       	mov	r22, r17
     7d8:	f7 01       	movw	r30, r14
     7da:	81 91       	ld	r24, Z+
     7dc:	7f 01       	movw	r14, r30
     7de:	0e 94 a8 04 	call	0x950	; 0x950 <mcp2515_write>
     7e2:	21 96       	adiw	r28, 0x01	; 1
     7e4:	1f 5f       	subi	r17, 0xFF	; 255
     7e6:	f6 01       	movw	r30, r12
     7e8:	82 81       	ldd	r24, Z+2	; 0x02
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	c8 17       	cp	r28, r24
     7ee:	d9 07       	cpc	r29, r25
     7f0:	94 f3       	brlt	.-28     	; 0x7d6 <CAN_send_message+0x5c>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 bc 04 	call	0x978	; 0x978 <mcp2515_request_to_send>
     802:	f6 01       	movw	r30, r12
     804:	86 81       	ldd	r24, Z+6	; 0x06
     806:	1f 92       	push	r1
     808:	8f 93       	push	r24
     80a:	85 81       	ldd	r24, Z+5	; 0x05
     80c:	1f 92       	push	r1
     80e:	8f 93       	push	r24
     810:	84 81       	ldd	r24, Z+4	; 0x04
     812:	1f 92       	push	r1
     814:	8f 93       	push	r24
     816:	83 81       	ldd	r24, Z+3	; 0x03
     818:	1f 92       	push	r1
     81a:	8f 93       	push	r24
     81c:	86 e0       	ldi	r24, 0x06	; 6
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <printf>
     828:	8d b7       	in	r24, 0x3d	; 61
     82a:	9e b7       	in	r25, 0x3e	; 62
     82c:	0a 96       	adiw	r24, 0x0a	; 10
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	9e bf       	out	0x3e, r25	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	8d bf       	out	0x3d, r24	; 61
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	08 95       	ret

00000848 <CAN_interrupt_init>:



void CAN_interrupt_init(void){
	// Disable global interrupts
	cli();
     848:	f8 94       	cli
	
	// Enable interrupts on MCP for when messages are received in the receive buffers
	mcp2515_bit_modify(0b00000011, 0xFF, MCP_CANINTE);
     84a:	4b e2       	ldi	r20, 0x2B	; 43
     84c:	6f ef       	ldi	r22, 0xFF	; 255
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
	
	DDRD &= ~(1 << PD2);
     854:	8a 98       	cbi	0x11, 2	; 17
	
	
	// Interrupt at falling edge of INT0
	MCUCR |= (1 << ISC01);
     856:	85 b7       	in	r24, 0x35	; 53
     858:	82 60       	ori	r24, 0x02	; 2
     85a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     85c:	85 b7       	in	r24, 0x35	; 53
     85e:	8e 7f       	andi	r24, 0xFE	; 254
     860:	85 bf       	out	0x35, r24	; 53

	// Define INT0 as interrupt input
	GICR |= (1 << INT0);
     862:	8b b7       	in	r24, 0x3b	; 59
     864:	80 64       	ori	r24, 0x40	; 64
     866:	8b bf       	out	0x3b, r24	; 59
	
	// Enable global interrupts
	sei();
     868:	78 94       	sei
     86a:	08 95       	ret

0000086c <CAN_init>:
// Lower priority message
volatile uint8_t READ_B1_MESSAGE = 0;



void CAN_init(uint8_t mode){
     86c:	cf 93       	push	r28
     86e:	c8 2f       	mov	r28, r24
	mcp2515_init(); //Config mode
     870:	0e 94 01 05 	call	0xa02	; 0xa02 <mcp2515_init>
	CAN_interrupt_init();
     874:	0e 94 24 04 	call	0x848	; 0x848 <CAN_interrupt_init>
	mcp2515_bit_modify(MODE_MASK, mode, MCP_CANCTRL);
     878:	4f e0       	ldi	r20, 0x0F	; 15
     87a:	6c 2f       	mov	r22, r28
     87c:	80 ee       	ldi	r24, 0xE0	; 224
     87e:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
}
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <__vector_1>:
	
	// Enable global interrupts
	sei();
}

ISR(INT0_vect){
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	cf 93       	push	r28
     8a6:	ef 93       	push	r30
     8a8:	ff 93       	push	r31
	uint8_t interrupt_flag = mcp2515_read(MCP_CANINTF);
     8aa:	8c e2       	ldi	r24, 0x2C	; 44
     8ac:	0e 94 96 04 	call	0x92c	; 0x92c <mcp2515_read>
     8b0:	c8 2f       	mov	r28, r24
	if (interrupt_flag & 0x01){
     8b2:	80 ff       	sbrs	r24, 0
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <__vector_1+0x3e>
		// Set receive flag for receive buffer 0
		READ_B0_MESSAGE = 1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <READ_B0_MESSAGE>
		
		// Clear interrupt flag to allow new message reception
		mcp2515_bit_modify(0x01, 0x00, MCP_CANINTF);
     8bc:	4c e2       	ldi	r20, 0x2C	; 44
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
	}
	if (interrupt_flag & 0x02){
     8c4:	c1 ff       	sbrs	r28, 1
     8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__vector_1+0x52>
		// Set receive flag for receive buffer 1
		READ_B1_MESSAGE = 1;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__data_end>
		
		// Clear interrupt flag to allow new message reception
		mcp2515_bit_modify(0x02, 0x00, MCP_CANINTF);
     8ce:	4c e2       	ldi	r20, 0x2C	; 44
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
	}
	
}
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	cf 91       	pop	r28
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <main>:

// -Wl,--defsym=__heap_start=0x801800,--defsym=__heap_end=0x801fff -Wl,--relax

int main(void)
{
	uart_init( MYUBRR );
     8fc:	8f e1       	ldi	r24, 0x1F	; 31
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 85 0a 	call	0x150a	; 0x150a <uart_init>
	xmem_init();
     904:	0e 94 92 0a 	call	0x1524	; 0x1524 <xmem_init>
	adc_init();
     908:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_init>
	mov_init();
     90c:	0e 94 be 07 	call	0xf7c	; 0xf7c <mov_init>
	CAN_init(MODE_NORMAL);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 36 04 	call	0x86c	; 0x86c <CAN_init>
	OLED_init();
     916:	0e 94 71 09 	call	0x12e2	; 0x12e2 <OLED_init>
	
	//OLED_print("Hello");
	menu_init();
     91a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <menu_init>
	//menu_print();
	//
	printf("######## Starting new session ########\r\n");
     91e:	85 ea       	ldi	r24, 0xA5	; 165
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 81 0c 	call	0x1902	; 0x1902 <puts>
	input_j joystick_input;
	//can_message joy_received;

	
	while (1) {
		menu_main();		
     926:	0e 94 03 07 	call	0xe06	; 0xe06 <menu_main>
     92a:	fd cf       	rjmp	.-6      	; 0x926 <main+0x2a>

0000092c <mcp2515_read>:
	mcp2515_bit_modify(0xFF, CNF1_REG_VALUE, MCP_CNF1); // Modify CNF1.
	
	return 0; 
}

uint8_t mcp2515_read(uint8_t address){
     92c:	cf 93       	push	r28
     92e:	c8 2f       	mov	r28, r24
	uint8_t result; 
  
	SPI_select();// Select CAN-controller
     930:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <SPI_select>
	SPI_send(MCP_READ); //Send read instruction
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_send(address); //Send address
     93a:	8c 2f       	mov	r24, r28
     93c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	result = SPI_read();
     940:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <SPI_read>
     944:	c8 2f       	mov	r28, r24
  
	SPI_deselect(); // Deselect CAN-controller
     946:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_deselect>
  
	return result; 
}
     94a:	8c 2f       	mov	r24, r28
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <mcp2515_write>:

void mcp2515_write(uint8_t data, uint8_t address){
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	c8 2f       	mov	r28, r24
     956:	d6 2f       	mov	r29, r22
	SPI_select();
     958:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <SPI_select>
	SPI_send(MCP_WRITE);
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_send(address);
     962:	8d 2f       	mov	r24, r29
     964:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_send(data);
     968:	8c 2f       	mov	r24, r28
     96a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_deselect();
     96e:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_deselect>
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buff_tx0, int buff_tx1, int buff_tx2){
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	7c 01       	movw	r14, r24
     986:	8b 01       	movw	r16, r22
     988:	ea 01       	movw	r28, r20
	SPI_select();
     98a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <SPI_select>
	if(buff_tx0){
     98e:	ef 28       	or	r14, r15
     990:	19 f0       	breq	.+6      	; 0x998 <mcp2515_request_to_send+0x20>
		SPI_send(MCP_RTS_TX0);
     992:	81 e8       	ldi	r24, 0x81	; 129
     994:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	}
	if(buff_tx1){
     998:	01 2b       	or	r16, r17
     99a:	19 f0       	breq	.+6      	; 0x9a2 <mcp2515_request_to_send+0x2a>
		SPI_send(MCP_RTS_TX1);
     99c:	82 e8       	ldi	r24, 0x82	; 130
     99e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	}
	if(buff_tx2){
     9a2:	cd 2b       	or	r28, r29
     9a4:	19 f0       	breq	.+6      	; 0x9ac <mcp2515_request_to_send+0x34>
		SPI_send(MCP_RTS_TX2);
     9a6:	84 e8       	ldi	r24, 0x84	; 132
     9a8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	}
	SPI_deselect();
     9ac:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_deselect>
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret

000009be <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t mask_byte, uint8_t data_byte, uint8_t address){
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	d8 2f       	mov	r29, r24
     9c6:	c6 2f       	mov	r28, r22
     9c8:	14 2f       	mov	r17, r20
	SPI_select();
     9ca:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <SPI_select>
	SPI_send(MCP_BITMOD);
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_send(address);
     9d4:	81 2f       	mov	r24, r17
     9d6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_send(mask_byte);
     9da:	8d 2f       	mov	r24, r29
     9dc:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_send(data_byte);
     9e0:	8c 2f       	mov	r24, r28
     9e2:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_deselect();
     9e6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_deselect>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	08 95       	ret

000009f2 <mcp2515_reset>:

void mcp2515_reset(void){
	SPI_select();
     9f2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <SPI_select>
	SPI_send(MCP_RESET);
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <SPI_send>
	SPI_deselect();
     9fc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <SPI_deselect>
     a00:	08 95       	ret

00000a02 <mcp2515_init>:



uint8_t mcp2515_init(void){
	uint8_t value; 
	SPI_init();
     a02:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <SPI_init>
	mcp2515_reset();
     a06:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <mcp2515_reset>
 
	//Self-test (Should be implemented in all drivers)
	value = mcp2515_read(MCP_CANSTAT);
     a0a:	8e e0       	ldi	r24, 0x0E	; 14
     a0c:	0e 94 96 04 	call	0x92c	; 0x92c <mcp2515_read>
	if ((value & MODE_MASK) != MODE_CONFIG){
     a10:	98 2f       	mov	r25, r24
     a12:	90 7e       	andi	r25, 0xE0	; 224
     a14:	90 38       	cpi	r25, 0x80	; 128
     a16:	71 f0       	breq	.+28     	; 0xa34 <mcp2515_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset: %x\r\n", value);
     a18:	1f 92       	push	r1
     a1a:	8f 93       	push	r24
     a1c:	8d ec       	ldi	r24, 0xCD	; 205
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <printf>
		return 1;        
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	08 95       	ret
	}
	
	// Bit timing configuration
	mcp2515_bit_modify(0xC7, CNF3_REG_VALUE, MCP_CNF3); // Modify CNF3, bits 7, 6, 2-0. 
     a34:	48 e2       	ldi	r20, 0x28	; 40
     a36:	65 e8       	ldi	r22, 0x85	; 133
     a38:	87 ec       	ldi	r24, 0xC7	; 199
     a3a:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
	mcp2515_bit_modify(0xFF, CNF2_REG_VALUE, MCP_CNF2); // Modify CNF2.
     a3e:	49 e2       	ldi	r20, 0x29	; 41
     a40:	61 eb       	ldi	r22, 0xB1	; 177
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
	mcp2515_bit_modify(0xFF, CNF1_REG_VALUE, MCP_CNF1); // Modify CNF1.
     a48:	4a e2       	ldi	r20, 0x2A	; 42
     a4a:	63 ec       	ldi	r22, 0xC3	; 195
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
	
	return 0; 
     a52:	80 e0       	ldi	r24, 0x00	; 0
}
     a54:	08 95       	ret

00000a56 <seeHighscore>:
	OLED_print("Hello World");
}

void printGoodBye(void){
	printf("Inside goodbye\r\n");
	OLED_print("Goodbye World");
     a56:	08 95       	ret

00000a58 <clearHighscore>:
     a58:	08 95       	ret

00000a5a <setDifficulty>:
     a5a:	63 e0       	ldi	r22, 0x03	; 3
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	0e 94 c1 09 	call	0x1382	; 0x1382 <OLED_goto_pos>
     a62:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <menu_position>
     a66:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <menu_position+0x1>
     a6a:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <current_child_pointer>
     a6e:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <current_child_pointer+0x1>
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	e8 0f       	add	r30, r24
     a78:	f9 1f       	adc	r31, r25
     a7a:	05 80       	ldd	r0, Z+5	; 0x05
     a7c:	f6 81       	ldd	r31, Z+6	; 0x06
     a7e:	e0 2d       	mov	r30, r0
     a80:	80 81       	ld	r24, Z
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	59 f0       	breq	.+22     	; 0xa9c <setDifficulty+0x42>
     a86:	28 f0       	brcs	.+10     	; 0xa92 <setDifficulty+0x38>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	69 f0       	breq	.+26     	; 0xaa6 <setDifficulty+0x4c>
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	81 f0       	breq	.+32     	; 0xab0 <setDifficulty+0x56>
     a90:	08 95       	ret
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
     a9a:	08 95       	ret
     a9c:	8d e1       	ldi	r24, 0x1D	; 29
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
     aa4:	08 95       	ret
     aa6:	88 e3       	ldi	r24, 0x38	; 56
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
     aae:	08 95       	ret
     ab0:	85 e5       	ldi	r24, 0x55	; 85
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
     ab8:	08 95       	ret

00000aba <menu_new_item>:
	//node* led_game = menu_new_item(mini, "Light up LED", NULL, NO_CHOICE);

}


node* menu_new_item(node* parent, char* name, void (*fpt)(void), menu_choice choice){
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	ec 01       	movw	r28, r24
     aca:	6b 01       	movw	r12, r22
     acc:	7a 01       	movw	r14, r20
     ace:	12 2f       	mov	r17, r18
	node* newItem = (node*) malloc(sizeof(node));
     ad0:	8b e1       	ldi	r24, 0x1B	; 27
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <malloc>
     ad8:	dc 01       	movw	r26, r24
	newItem->name = name;
     ada:	12 96       	adiw	r26, 0x02	; 2
     adc:	dc 92       	st	X, r13
     ade:	ce 92       	st	-X, r12
     ae0:	11 97       	sbiw	r26, 0x01	; 1
	newItem->parent = parent;
     ae2:	56 96       	adiw	r26, 0x16	; 22
     ae4:	dc 93       	st	X, r29
     ae6:	ce 93       	st	-X, r28
     ae8:	55 97       	sbiw	r26, 0x15	; 21
	newItem->num_children = 0; 
     aea:	5a 96       	adiw	r26, 0x1a	; 26
     aec:	1c 92       	st	X, r1
     aee:	1e 92       	st	-X, r1
     af0:	59 97       	sbiw	r26, 0x19	; 25
	newItem->funcpt = fpt;
     af2:	58 96       	adiw	r26, 0x18	; 24
     af4:	fc 92       	st	X, r15
     af6:	ee 92       	st	-X, r14
     af8:	57 97       	sbiw	r26, 0x17	; 23
	newItem->choice = choice;
     afa:	1c 93       	st	X, r17
     afc:	fc 01       	movw	r30, r24
     afe:	35 96       	adiw	r30, 0x05	; 5
     b00:	9c 01       	movw	r18, r24
     b02:	2b 5e       	subi	r18, 0xEB	; 235
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i = 0; i < 8; i++){
		newItem->children[i] = NULL;
     b06:	11 92       	st	Z+, r1
     b08:	11 92       	st	Z+, r1
	newItem->name = name;
	newItem->parent = parent;
	newItem->num_children = 0; 
	newItem->funcpt = fpt;
	newItem->choice = choice;
	for(int i = 0; i < 8; i++){
     b0a:	e2 17       	cp	r30, r18
     b0c:	f3 07       	cpc	r31, r19
     b0e:	d9 f7       	brne	.-10     	; 0xb06 <menu_new_item+0x4c>
		newItem->children[i] = NULL;
	}
	for(int i = 0; i < 8; i++){
		if(parent->children[i] == NULL){
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	9e 81       	ldd	r25, Y+6	; 0x06
     b14:	89 2b       	or	r24, r25
     b16:	49 f0       	breq	.+18     	; 0xb2a <menu_new_item+0x70>
     b18:	fe 01       	movw	r30, r28
     b1a:	37 96       	adiw	r30, 0x07	; 7
	newItem->funcpt = fpt;
	newItem->choice = choice;
	for(int i = 0; i < 8; i++){
		newItem->children[i] = NULL;
	}
	for(int i = 0; i < 8; i++){
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	30 e0       	ldi	r19, 0x00	; 0
		if(parent->children[i] == NULL){
     b20:	41 91       	ld	r20, Z+
     b22:	51 91       	ld	r21, Z+
     b24:	45 2b       	or	r20, r21
     b26:	91 f4       	brne	.+36     	; 0xb4c <menu_new_item+0x92>
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <menu_new_item+0x74>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
			parent->children[i] = newItem;
     b2e:	22 0f       	add	r18, r18
     b30:	33 1f       	adc	r19, r19
     b32:	fe 01       	movw	r30, r28
     b34:	e2 0f       	add	r30, r18
     b36:	f3 1f       	adc	r31, r19
     b38:	b6 83       	std	Z+6, r27	; 0x06
     b3a:	a5 83       	std	Z+5, r26	; 0x05
			parent->num_children++;
     b3c:	89 8d       	ldd	r24, Y+25	; 0x19
     b3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	9a 8f       	std	Y+26, r25	; 0x1a
     b44:	89 8f       	std	Y+25, r24	; 0x19
			return newItem;
     b46:	8a 2f       	mov	r24, r26
     b48:	9b 2f       	mov	r25, r27
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <menu_new_item+0xa0>
	newItem->funcpt = fpt;
	newItem->choice = choice;
	for(int i = 0; i < 8; i++){
		newItem->children[i] = NULL;
	}
	for(int i = 0; i < 8; i++){
     b4c:	2f 5f       	subi	r18, 0xFF	; 255
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	28 30       	cpi	r18, 0x08	; 8
     b52:	31 05       	cpc	r19, r1
     b54:	29 f7       	brne	.-54     	; 0xb20 <menu_new_item+0x66>
			parent->children[i] = newItem;
			parent->num_children++;
			return newItem;
		}
	}
	return NULL;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	08 95       	ret

00000b6a <menu_init>:
void clearHighscore(void){
	
}


void menu_init(void){
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
	//Root
	node* root = menu_new_item(NULL, "Main menu", NULL, NO_CHOICE);
     b76:	28 e0       	ldi	r18, 0x08	; 8
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	6b e9       	ldi	r22, 0x9B	; 155
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
     b88:	ec 01       	movw	r28, r24
	menu_position = root; 
     b8a:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <menu_position+0x1>
     b8e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <menu_position>
	
	//Main menu
	node* start_game = menu_new_item(root, "Start game", NULL, NO_CHOICE);	
     b92:	28 e0       	ldi	r18, 0x08	; 8
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	65 ea       	ldi	r22, 0xA5	; 165
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	node* difficulty = menu_new_item(root, "Difficulty", NULL, NO_CHOICE);
     ba0:	28 e0       	ldi	r18, 0x08	; 8
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	60 eb       	ldi	r22, 0xB0	; 176
     ba8:	72 e0       	ldi	r23, 0x02	; 2
     baa:	ce 01       	movw	r24, r28
     bac:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
     bb0:	8c 01       	movw	r16, r24
	node* highscore = menu_new_item(root, "Highscore", NULL, NO_CHOICE);
     bb2:	28 e0       	ldi	r18, 0x08	; 8
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	6b eb       	ldi	r22, 0xBB	; 187
     bba:	72 e0       	ldi	r23, 0x02	; 2
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
     bc2:	7c 01       	movw	r14, r24
	node* sound = menu_new_item(root, "Sound", NULL, NO_CHOICE);
     bc4:	28 e0       	ldi	r18, 0x08	; 8
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	65 ec       	ldi	r22, 0xC5	; 197
     bcc:	72 e0       	ldi	r23, 0x02	; 2
     bce:	ce 01       	movw	r24, r28
     bd0:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	node* mini = menu_new_item(root, "Minigames", NULL, NO_CHOICE);
     bd4:	28 e0       	ldi	r18, 0x08	; 8
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	6b ec       	ldi	r22, 0xCB	; 203
     bdc:	72 e0       	ldi	r23, 0x02	; 2
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	
	//Difficulty
	node* easy = menu_new_item(difficulty, "Easy", &setDifficulty, EASY );
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	4d e2       	ldi	r20, 0x2D	; 45
     be8:	55 e0       	ldi	r21, 0x05	; 5
     bea:	65 ed       	ldi	r22, 0xD5	; 213
     bec:	72 e0       	ldi	r23, 0x02	; 2
     bee:	c8 01       	movw	r24, r16
     bf0:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	node* normal = menu_new_item(difficulty, "Normal", &setDifficulty, NORMAL );
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	4d e2       	ldi	r20, 0x2D	; 45
     bf8:	55 e0       	ldi	r21, 0x05	; 5
     bfa:	6a ed       	ldi	r22, 0xDA	; 218
     bfc:	72 e0       	ldi	r23, 0x02	; 2
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	node* hard = menu_new_item(difficulty, "Hard", &setDifficulty, HARD );
     c04:	22 e0       	ldi	r18, 0x02	; 2
     c06:	4d e2       	ldi	r20, 0x2D	; 45
     c08:	55 e0       	ldi	r21, 0x05	; 5
     c0a:	61 ee       	ldi	r22, 0xE1	; 225
     c0c:	72 e0       	ldi	r23, 0x02	; 2
     c0e:	c8 01       	movw	r24, r16
     c10:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	node* insane = menu_new_item(difficulty, "Insane", &setDifficulty, INSANE );
     c14:	23 e0       	ldi	r18, 0x03	; 3
     c16:	4d e2       	ldi	r20, 0x2D	; 45
     c18:	55 e0       	ldi	r21, 0x05	; 5
     c1a:	66 ee       	ldi	r22, 0xE6	; 230
     c1c:	72 e0       	ldi	r23, 0x02	; 2
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	
	//Highscore
	node* see = menu_new_item(highscore, "See", &seeHighscore, SEE );
     c24:	24 e0       	ldi	r18, 0x04	; 4
     c26:	4b e2       	ldi	r20, 0x2B	; 43
     c28:	55 e0       	ldi	r21, 0x05	; 5
     c2a:	6d ee       	ldi	r22, 0xED	; 237
     c2c:	72 e0       	ldi	r23, 0x02	; 2
     c2e:	c7 01       	movw	r24, r14
     c30:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	node* clear = menu_new_item(highscore, "Clear", &clearHighscore, CLEAR );
     c34:	25 e0       	ldi	r18, 0x05	; 5
     c36:	4c e2       	ldi	r20, 0x2C	; 44
     c38:	55 e0       	ldi	r21, 0x05	; 5
     c3a:	61 ef       	ldi	r22, 0xF1	; 241
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	c7 01       	movw	r24, r14
     c40:	0e 94 5d 05 	call	0xaba	; 0xaba <menu_new_item>
	//node* IC_man = menu_new_item(mini, "IC-man", NULL, NO_CHOICE); //Integrated circuit man
	//node* draw_pic = menu_new_item(mini, "Make art", NULL, NO_CHOICE); 
	//node* pong = menu_new_item(mini, "Ping pong", NULL, NO_CHOICE);
	//node* led_game = menu_new_item(mini, "Light up LED", NULL, NO_CHOICE);

}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	08 95       	ret

00000c52 <menu_print>:
	}
	return NULL;
}


void menu_print(void){
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	OLED_reset();
     c56:	0e 94 63 09 	call	0x12c6	; 0x12c6 <OLED_reset>
	for(int pg= 0; pg <8 ; pg ++) {
     c5a:	c0 e0       	ldi	r28, 0x00	; 0
     c5c:	d0 e0       	ldi	r29, 0x00	; 0
		if(menu_position->children[pg] != NULL){
     c5e:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <menu_position>
     c62:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <menu_position+0x1>
     c66:	ce 01       	movw	r24, r28
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	e8 0f       	add	r30, r24
     c6e:	f9 1f       	adc	r31, r25
     c70:	85 81       	ldd	r24, Z+5	; 0x05
     c72:	96 81       	ldd	r25, Z+6	; 0x06
     c74:	89 2b       	or	r24, r25
     c76:	e1 f1       	breq	.+120    	; 0xcf0 <menu_print+0x9e>
			OLED_goto_pos(pg, 0);
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	8c 2f       	mov	r24, r28
     c7c:	0e 94 c1 09 	call	0x1382	; 0x1382 <OLED_goto_pos>
			if(pg == current_child_pointer){
     c80:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <current_child_pointer>
     c84:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <current_child_pointer+0x1>
     c88:	8c 17       	cp	r24, r28
     c8a:	9d 07       	cpc	r25, r29
     c8c:	e9 f4       	brne	.+58     	; 0xcc8 <menu_print+0x76>
				OLED_print(" ");
     c8e:	88 ef       	ldi	r24, 0xF8	; 248
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
				OLED_print_arrow(pg, 0);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	8c 2f       	mov	r24, r28
     c9a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <OLED_print_arrow>
				OLED_print("  ");
     c9e:	87 ef       	ldi	r24, 0xF7	; 247
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
				OLED_print(menu_position->children[pg]->name);
     ca6:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <menu_position>
     caa:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <menu_position+0x1>
     cae:	ce 01       	movw	r24, r28
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	e8 0f       	add	r30, r24
     cb6:	f9 1f       	adc	r31, r25
     cb8:	05 80       	ldd	r0, Z+5	; 0x05
     cba:	f6 81       	ldd	r31, Z+6	; 0x06
     cbc:	e0 2d       	mov	r30, r0
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	92 81       	ldd	r25, Z+2	; 0x02
     cc2:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <menu_print+0x9e>
			}
			else{
				OLED_print(" ");
     cc8:	88 ef       	ldi	r24, 0xF8	; 248
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
				OLED_print(menu_position->children[pg]->name);
     cd0:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <menu_position>
     cd4:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <menu_position+0x1>
     cd8:	ce 01       	movw	r24, r28
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	e8 0f       	add	r30, r24
     ce0:	f9 1f       	adc	r31, r25
     ce2:	05 80       	ldd	r0, Z+5	; 0x05
     ce4:	f6 81       	ldd	r31, Z+6	; 0x06
     ce6:	e0 2d       	mov	r30, r0
     ce8:	81 81       	ldd	r24, Z+1	; 0x01
     cea:	92 81       	ldd	r25, Z+2	; 0x02
     cec:	0e 94 1f 0a 	call	0x143e	; 0x143e <OLED_print>
}


void menu_print(void){
	OLED_reset();
	for(int pg= 0; pg <8 ; pg ++) {
     cf0:	21 96       	adiw	r28, 0x01	; 1
     cf2:	c8 30       	cpi	r28, 0x08	; 8
     cf4:	d1 05       	cpc	r29, r1
     cf6:	09 f0       	breq	.+2      	; 0xcfa <menu_print+0xa8>
     cf8:	b2 cf       	rjmp	.-156    	; 0xc5e <menu_print+0xc>
				OLED_print(" ");
				OLED_print(menu_position->children[pg]->name);
			}
		}
	}
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <menu_move_pointer>:


void menu_move_pointer(dir direction){
	switch(direction){
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	09 f4       	brne	.+2      	; 0xd06 <menu_move_pointer+0x6>
     d04:	4f c0       	rjmp	.+158    	; 0xda4 <menu_move_pointer+0xa4>
     d06:	a0 f1       	brcs	.+104    	; 0xd70 <menu_move_pointer+0x70>
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	f1 f0       	breq	.+60     	; 0xd48 <menu_move_pointer+0x48>
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	09 f0       	breq	.+2      	; 0xd12 <menu_move_pointer+0x12>
     d10:	79 c0       	rjmp	.+242    	; 0xe04 <menu_move_pointer+0x104>
		case DOWN:{
			if(current_child_pointer < menu_position->num_children - 1){
     d12:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <menu_position>
     d16:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <menu_position+0x1>
     d1a:	81 8d       	ldd	r24, Z+25	; 0x19
     d1c:	92 8d       	ldd	r25, Z+26	; 0x1a
     d1e:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <current_child_pointer>
     d22:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <current_child_pointer+0x1>
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	28 17       	cp	r18, r24
     d2a:	39 07       	cpc	r19, r25
     d2c:	0c f0       	brlt	.+2      	; 0xd30 <menu_move_pointer+0x30>
     d2e:	6a c0       	rjmp	.+212    	; 0xe04 <menu_move_pointer+0x104>
				current_child_pointer++;
     d30:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <current_child_pointer>
     d34:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <current_child_pointer+0x1>
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <current_child_pointer+0x1>
     d3e:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <current_child_pointer>
				menu_print();
     d42:	0e 94 29 06 	call	0xc52	; 0xc52 <menu_print>
     d46:	08 95       	ret
			}
			break; 
		}
		case UP:{
			if(current_child_pointer > 0){
     d48:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <current_child_pointer>
     d4c:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <current_child_pointer+0x1>
     d50:	18 16       	cp	r1, r24
     d52:	19 06       	cpc	r1, r25
     d54:	0c f0       	brlt	.+2      	; 0xd58 <menu_move_pointer+0x58>
     d56:	56 c0       	rjmp	.+172    	; 0xe04 <menu_move_pointer+0x104>
				current_child_pointer--;
     d58:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <current_child_pointer>
     d5c:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <current_child_pointer+0x1>
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <current_child_pointer+0x1>
     d66:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <current_child_pointer>
				menu_print();
     d6a:	0e 94 29 06 	call	0xc52	; 0xc52 <menu_print>
     d6e:	08 95       	ret
			}
			break;
		}
		case LEFT:{
			if(menu_position->parent != NULL){
     d70:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <menu_position>
     d74:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <menu_position+0x1>
     d78:	85 89       	ldd	r24, Z+21	; 0x15
     d7a:	96 89       	ldd	r25, Z+22	; 0x16
     d7c:	89 2b       	or	r24, r25
     d7e:	09 f4       	brne	.+2      	; 0xd82 <menu_move_pointer+0x82>
     d80:	41 c0       	rjmp	.+130    	; 0xe04 <menu_move_pointer+0x104>
				menu_position = menu_position->parent; 
     d82:	85 89       	ldd	r24, Z+21	; 0x15
     d84:	96 89       	ldd	r25, Z+22	; 0x16
     d86:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <menu_position+0x1>
     d8a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <menu_position>
				current_child_pointer = previous_parent;
     d8e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <previous_parent>
     d92:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <previous_parent+0x1>
     d96:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <current_child_pointer+0x1>
     d9a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <current_child_pointer>
				menu_print();
     d9e:	0e 94 29 06 	call	0xc52	; 0xc52 <menu_print>
     da2:	08 95       	ret
			}
			break;
		}
		case RIGHT:{
			if(menu_position->children[current_child_pointer]->num_children != 0){
     da4:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <menu_position>
     da8:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <menu_position+0x1>
     dac:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <current_child_pointer>
     db0:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <current_child_pointer+0x1>
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	e8 0f       	add	r30, r24
     dba:	f9 1f       	adc	r31, r25
     dbc:	05 80       	ldd	r0, Z+5	; 0x05
     dbe:	f6 81       	ldd	r31, Z+6	; 0x06
     dc0:	e0 2d       	mov	r30, r0
     dc2:	21 8d       	ldd	r18, Z+25	; 0x19
     dc4:	32 8d       	ldd	r19, Z+26	; 0x1a
     dc6:	23 2b       	or	r18, r19
     dc8:	e9 f0       	breq	.+58     	; 0xe04 <menu_move_pointer+0x104>
				menu_position = menu_position->children[current_child_pointer];
     dca:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <current_child_pointer>
     dce:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <current_child_pointer+0x1>
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	85 81       	ldd	r24, Z+5	; 0x05
     dde:	96 81       	ldd	r25, Z+6	; 0x06
     de0:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <menu_position+0x1>
     de4:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <menu_position>
				previous_parent = current_child_pointer;
     de8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <current_child_pointer>
     dec:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <current_child_pointer+0x1>
     df0:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <previous_parent+0x1>
     df4:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <previous_parent>
				current_child_pointer = 0; 
     df8:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <current_child_pointer+0x1>
     dfc:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <current_child_pointer>
				menu_print();
     e00:	0e 94 29 06 	call	0xc52	; 0xc52 <menu_print>
     e04:	08 95       	ret

00000e06 <menu_main>:
		default:
			break;
	}
}

void menu_main(){
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	62 97       	sbiw	r28, 0x12	; 18
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
	joy_dir = mov_get_joy_dir(); 
     e1a:	0e 94 8e 08 	call	0x111c	; 0x111c <mov_get_joy_dir>
     e1e:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <joy_dir>
	input_j joystick_input = mov_get_joy_input();
     e22:	0e 94 d7 08 	call	0x11ae	; 0x11ae <mov_get_joy_input>
     e26:	29 83       	std	Y+1, r18	; 0x01
     e28:	3a 83       	std	Y+2, r19	; 0x02
     e2a:	4b 83       	std	Y+3, r20	; 0x03
     e2c:	5c 83       	std	Y+4, r21	; 0x04
     e2e:	6d 83       	std	Y+5, r22	; 0x05
     e30:	7e 83       	std	Y+6, r23	; 0x06
     e32:	8f 83       	std	Y+7, r24	; 0x07
	can_message test_joystick_message;
	test_joystick_message.id = CAN_JOYSTICK_ID;
     e34:	e1 e0       	ldi	r30, 0x01	; 1
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	f9 87       	std	Y+9, r31	; 0x09
     e3a:	e8 87       	std	Y+8, r30	; 0x08
	test_joystick_message.length = 4;
     e3c:	94 e0       	ldi	r25, 0x04	; 4
     e3e:	9a 87       	std	Y+10, r25	; 0x0a
	test_joystick_message.data[0] = joystick_input.pos_x;
     e40:	2b 87       	std	Y+11, r18	; 0x0b
	test_joystick_message.data[1] = joystick_input.pos_y;
     e42:	4c 87       	std	Y+12, r20	; 0x0c
	test_joystick_message.data[2] = joystick_input.button_pressed;
     e44:	6d 87       	std	Y+13, r22	; 0x0d
	test_joystick_message.data[3] = joystick_input.direction;
     e46:	8e 87       	std	Y+14, r24	; 0x0e
	
	switch (joy_dir){
     e48:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <joy_dir>
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	09 f4       	brne	.+2      	; 0xe52 <menu_main+0x4c>
     e50:	57 c0       	rjmp	.+174    	; 0xf00 <menu_main+0xfa>
     e52:	38 f4       	brcc	.+14     	; 0xe62 <menu_main+0x5c>
     e54:	88 23       	and	r24, r24
     e56:	09 f4       	brne	.+2      	; 0xe5a <menu_main+0x54>
     e58:	65 c0       	rjmp	.+202    	; 0xf24 <menu_main+0x11e>
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <menu_main+0x5a>
     e5e:	74 c0       	rjmp	.+232    	; 0xf48 <menu_main+0x142>
     e60:	84 c0       	rjmp	.+264    	; 0xf6a <menu_main+0x164>
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	d1 f1       	breq	.+116    	; 0xeda <menu_main+0xd4>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	09 f0       	breq	.+2      	; 0xe6c <menu_main+0x66>
     e6a:	7f c0       	rjmp	.+254    	; 0xf6a <menu_main+0x164>
		case NEUTRAL: {
			if (mov_read_joy_button()){
     e6c:	0e 94 cf 08 	call	0x119e	; 0x119e <mov_read_joy_button>
     e70:	89 2b       	or	r24, r25
     e72:	61 f1       	breq	.+88     	; 0xecc <menu_main+0xc6>
				CAN_send_message(&test_joystick_message);
     e74:	ce 01       	movw	r24, r28
     e76:	08 96       	adiw	r24, 0x08	; 8
     e78:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
				if (menu_position->children[current_child_pointer]->funcpt != NULL){
     e7c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <menu_position>
     e80:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <menu_position+0x1>
     e84:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <current_child_pointer>
     e88:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <current_child_pointer+0x1>
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	e8 0f       	add	r30, r24
     e92:	f9 1f       	adc	r31, r25
     e94:	05 80       	ldd	r0, Z+5	; 0x05
     e96:	f6 81       	ldd	r31, Z+6	; 0x06
     e98:	e0 2d       	mov	r30, r0
     e9a:	87 89       	ldd	r24, Z+23	; 0x17
     e9c:	90 8d       	ldd	r25, Z+24	; 0x18
     e9e:	89 2b       	or	r24, r25
     ea0:	a9 f0       	breq	.+42     	; 0xecc <menu_main+0xc6>
					OLED_reset();
     ea2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <OLED_reset>
					menu_position->children[current_child_pointer]->funcpt();
     ea6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <menu_position>
     eaa:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <menu_position+0x1>
     eae:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <current_child_pointer>
     eb2:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <current_child_pointer+0x1>
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	e8 0f       	add	r30, r24
     ebc:	f9 1f       	adc	r31, r25
     ebe:	05 80       	ldd	r0, Z+5	; 0x05
     ec0:	f6 81       	ldd	r31, Z+6	; 0x06
     ec2:	e0 2d       	mov	r30, r0
     ec4:	07 88       	ldd	r0, Z+23	; 0x17
     ec6:	f0 8d       	ldd	r31, Z+24	; 0x18
     ec8:	e0 2d       	mov	r30, r0
     eca:	09 95       	icall
				}
			}
			neutral_flag = 1; 
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <neutral_flag+0x1>
     ed4:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <neutral_flag>
			break;
     ed8:	48 c0       	rjmp	.+144    	; 0xf6a <menu_main+0x164>
		}
		case DOWN:{
			if(neutral_flag){
     eda:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <neutral_flag>
     ede:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <neutral_flag+0x1>
     ee2:	89 2b       	or	r24, r25
     ee4:	09 f4       	brne	.+2      	; 0xee8 <menu_main+0xe2>
     ee6:	41 c0       	rjmp	.+130    	; 0xf6a <menu_main+0x164>
				CAN_send_message(&test_joystick_message);
     ee8:	ce 01       	movw	r24, r28
     eea:	08 96       	adiw	r24, 0x08	; 8
     eec:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
				menu_move_pointer(DOWN);
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	0e 94 80 06 	call	0xd00	; 0xd00 <menu_move_pointer>
				neutral_flag = 0; 
     ef6:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <neutral_flag+0x1>
     efa:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag>
     efe:	35 c0       	rjmp	.+106    	; 0xf6a <menu_main+0x164>
			}
			break;
		}
		case UP:{
			if(neutral_flag){
     f00:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <neutral_flag>
     f04:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <neutral_flag+0x1>
     f08:	89 2b       	or	r24, r25
     f0a:	79 f1       	breq	.+94     	; 0xf6a <menu_main+0x164>
				CAN_send_message(&test_joystick_message);
     f0c:	ce 01       	movw	r24, r28
     f0e:	08 96       	adiw	r24, 0x08	; 8
     f10:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
				menu_move_pointer(UP);
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	0e 94 80 06 	call	0xd00	; 0xd00 <menu_move_pointer>
				neutral_flag = 0;
     f1a:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <neutral_flag+0x1>
     f1e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag>
     f22:	23 c0       	rjmp	.+70     	; 0xf6a <menu_main+0x164>
			}
			break;
		}
		case LEFT:{
			if(neutral_flag){
     f24:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <neutral_flag>
     f28:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <neutral_flag+0x1>
     f2c:	89 2b       	or	r24, r25
     f2e:	e9 f0       	breq	.+58     	; 0xf6a <menu_main+0x164>
				CAN_send_message(&test_joystick_message);
     f30:	ce 01       	movw	r24, r28
     f32:	08 96       	adiw	r24, 0x08	; 8
     f34:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
				menu_move_pointer(LEFT);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0e 94 80 06 	call	0xd00	; 0xd00 <menu_move_pointer>
				neutral_flag = 0;
     f3e:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <neutral_flag+0x1>
     f42:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag>
     f46:	11 c0       	rjmp	.+34     	; 0xf6a <menu_main+0x164>
			}
			break;
		}
		case RIGHT:{
			if(neutral_flag){
     f48:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <neutral_flag>
     f4c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <neutral_flag+0x1>
     f50:	89 2b       	or	r24, r25
     f52:	59 f0       	breq	.+22     	; 0xf6a <menu_main+0x164>
				CAN_send_message(&test_joystick_message);
     f54:	ce 01       	movw	r24, r28
     f56:	08 96       	adiw	r24, 0x08	; 8
     f58:	0e 94 bd 03 	call	0x77a	; 0x77a <CAN_send_message>
				menu_move_pointer(RIGHT);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 80 06 	call	0xd00	; 0xd00 <menu_move_pointer>
				neutral_flag = 0;
     f62:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <neutral_flag+0x1>
     f66:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <neutral_flag>
			}
			break;
		}
	}
}
     f6a:	62 96       	adiw	r28, 0x12	; 18
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <mov_init>:
	if (button_pushed != 0){
		printf("Left slider button pressed\r\n");
		return 1;
	}
	return 0;
}
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <null_x+0x1>
     f88:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <null_x>
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <null_y+0x1>
     f98:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <null_y>
     f9c:	87 b3       	in	r24, 0x17	; 23
     f9e:	88 7f       	andi	r24, 0xF8	; 248
     fa0:	87 bb       	out	0x17, r24	; 23
     fa2:	08 95       	ret

00000fa4 <mov_pos_joy_rd>:
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
     fb2:	f8 2e       	mov	r15, r24
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_rd>
     fba:	4f 2d       	mov	r20, r15
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	c8 2e       	mov	r12, r24
     fc4:	d1 2c       	mov	r13, r1
     fc6:	e1 2c       	mov	r14, r1
     fc8:	f1 2c       	mov	r15, r1
     fca:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <null_x>
     fce:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <null_x+0x1>
     fd2:	09 2e       	mov	r0, r25
     fd4:	00 0c       	add	r0, r0
     fd6:	aa 0b       	sbc	r26, r26
     fd8:	bb 0b       	sbc	r27, r27
     fda:	48 17       	cp	r20, r24
     fdc:	59 07       	cpc	r21, r25
     fde:	6a 07       	cpc	r22, r26
     fe0:	7b 07       	cpc	r23, r27
     fe2:	2c f1       	brlt	.+74     	; 0x102e <mov_pos_joy_rd+0x8a>
     fe4:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <null_x>
     fe8:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <null_x+0x1>
     fec:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <null_x>
     ff0:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <null_x+0x1>
     ff4:	09 2e       	mov	r0, r25
     ff6:	00 0c       	add	r0, r0
     ff8:	aa 0b       	sbc	r26, r26
     ffa:	bb 0b       	sbc	r27, r27
     ffc:	9a 01       	movw	r18, r20
     ffe:	ab 01       	movw	r20, r22
    1000:	28 1b       	sub	r18, r24
    1002:	39 0b       	sbc	r19, r25
    1004:	4a 0b       	sbc	r20, r26
    1006:	5b 0b       	sbc	r21, r27
    1008:	a4 e6       	ldi	r26, 0x64	; 100
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__muluhisi3>
    1010:	2f ef       	ldi	r18, 0xFF	; 255
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	2e 1b       	sub	r18, r30
    1016:	3f 0b       	sbc	r19, r31
    1018:	03 2e       	mov	r0, r19
    101a:	00 0c       	add	r0, r0
    101c:	44 0b       	sbc	r20, r20
    101e:	55 0b       	sbc	r21, r21
    1020:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__divmodsi4>
    1024:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <x_pos+0x1>
    1028:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <x_pos>
    102c:	20 c0       	rjmp	.+64     	; 0x106e <mov_pos_joy_rd+0xca>
    102e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <null_x>
    1032:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <null_x+0x1>
    1036:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <null_x>
    103a:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <null_x+0x1>
    103e:	09 2e       	mov	r0, r25
    1040:	00 0c       	add	r0, r0
    1042:	aa 0b       	sbc	r26, r26
    1044:	bb 0b       	sbc	r27, r27
    1046:	9a 01       	movw	r18, r20
    1048:	ab 01       	movw	r20, r22
    104a:	28 1b       	sub	r18, r24
    104c:	39 0b       	sbc	r19, r25
    104e:	4a 0b       	sbc	r20, r26
    1050:	5b 0b       	sbc	r21, r27
    1052:	a4 e6       	ldi	r26, 0x64	; 100
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__muluhisi3>
    105a:	9f 01       	movw	r18, r30
    105c:	ff 0f       	add	r31, r31
    105e:	44 0b       	sbc	r20, r20
    1060:	55 0b       	sbc	r21, r21
    1062:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__divmodsi4>
    1066:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <x_pos+0x1>
    106a:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <x_pos>
    106e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <null_y>
    1072:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <null_y+0x1>
    1076:	09 2e       	mov	r0, r25
    1078:	00 0c       	add	r0, r0
    107a:	aa 0b       	sbc	r26, r26
    107c:	bb 0b       	sbc	r27, r27
    107e:	c8 16       	cp	r12, r24
    1080:	d9 06       	cpc	r13, r25
    1082:	ea 06       	cpc	r14, r26
    1084:	fb 06       	cpc	r15, r27
    1086:	2c f1       	brlt	.+74     	; 0x10d2 <mov_pos_joy_rd+0x12e>
    1088:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <null_y>
    108c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <null_y+0x1>
    1090:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <null_y>
    1094:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <null_y+0x1>
    1098:	09 2e       	mov	r0, r25
    109a:	00 0c       	add	r0, r0
    109c:	aa 0b       	sbc	r26, r26
    109e:	bb 0b       	sbc	r27, r27
    10a0:	a7 01       	movw	r20, r14
    10a2:	96 01       	movw	r18, r12
    10a4:	28 1b       	sub	r18, r24
    10a6:	39 0b       	sbc	r19, r25
    10a8:	4a 0b       	sbc	r20, r26
    10aa:	5b 0b       	sbc	r21, r27
    10ac:	a4 e6       	ldi	r26, 0x64	; 100
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__muluhisi3>
    10b4:	2f ef       	ldi	r18, 0xFF	; 255
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	2e 1b       	sub	r18, r30
    10ba:	3f 0b       	sbc	r19, r31
    10bc:	03 2e       	mov	r0, r19
    10be:	00 0c       	add	r0, r0
    10c0:	44 0b       	sbc	r20, r20
    10c2:	55 0b       	sbc	r21, r21
    10c4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__divmodsi4>
    10c8:	30 93 0f 03 	sts	0x030F, r19	; 0x80030f <y_pos+0x1>
    10cc:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <y_pos>
    10d0:	20 c0       	rjmp	.+64     	; 0x1112 <mov_pos_joy_rd+0x16e>
    10d2:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <null_y>
    10d6:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <null_y+0x1>
    10da:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <null_y>
    10de:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <null_y+0x1>
    10e2:	09 2e       	mov	r0, r25
    10e4:	00 0c       	add	r0, r0
    10e6:	aa 0b       	sbc	r26, r26
    10e8:	bb 0b       	sbc	r27, r27
    10ea:	a7 01       	movw	r20, r14
    10ec:	96 01       	movw	r18, r12
    10ee:	28 1b       	sub	r18, r24
    10f0:	39 0b       	sbc	r19, r25
    10f2:	4a 0b       	sbc	r20, r26
    10f4:	5b 0b       	sbc	r21, r27
    10f6:	a4 e6       	ldi	r26, 0x64	; 100
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__muluhisi3>
    10fe:	9f 01       	movw	r18, r30
    1100:	ff 0f       	add	r31, r31
    1102:	44 0b       	sbc	r20, r20
    1104:	55 0b       	sbc	r21, r21
    1106:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__divmodsi4>
    110a:	30 93 0f 03 	sts	0x030F, r19	; 0x80030f <y_pos+0x1>
    110e:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <y_pos>
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	08 95       	ret

0000111c <mov_get_joy_dir>:
    111c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <mov_pos_joy_rd>
    1120:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <x_pos>
    1124:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <x_pos+0x1>
    1128:	99 23       	and	r25, r25
    112a:	1c f4       	brge	.+6      	; 0x1132 <mov_get_joy_dir+0x16>
    112c:	91 95       	neg	r25
    112e:	81 95       	neg	r24
    1130:	91 09       	sbc	r25, r1
    1132:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <y_pos>
    1136:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <y_pos+0x1>
    113a:	33 23       	and	r19, r19
    113c:	1c f4       	brge	.+6      	; 0x1144 <mov_get_joy_dir+0x28>
    113e:	31 95       	neg	r19
    1140:	21 95       	neg	r18
    1142:	31 09       	sbc	r19, r1
    1144:	86 34       	cpi	r24, 0x46	; 70
    1146:	91 05       	cpc	r25, r1
    1148:	1c f4       	brge	.+6      	; 0x1150 <mov_get_joy_dir+0x34>
    114a:	26 34       	cpi	r18, 0x46	; 70
    114c:	31 05       	cpc	r19, r1
    114e:	fc f0       	brlt	.+62     	; 0x118e <mov_get_joy_dir+0x72>
    1150:	28 17       	cp	r18, r24
    1152:	39 07       	cpc	r19, r25
    1154:	6c f4       	brge	.+26     	; 0x1170 <mov_get_joy_dir+0x54>
    1156:	87 34       	cpi	r24, 0x47	; 71
    1158:	91 05       	cpc	r25, r1
    115a:	54 f0       	brlt	.+20     	; 0x1170 <mov_get_joy_dir+0x54>
    115c:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <x_pos>
    1160:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <x_pos+0x1>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	12 16       	cp	r1, r18
    1168:	13 06       	cpc	r1, r19
    116a:	c4 f0       	brlt	.+48     	; 0x119c <mov_get_joy_dir+0x80>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	08 95       	ret
    1170:	82 17       	cp	r24, r18
    1172:	93 07       	cpc	r25, r19
    1174:	74 f4       	brge	.+28     	; 0x1192 <mov_get_joy_dir+0x76>
    1176:	27 34       	cpi	r18, 0x47	; 71
    1178:	31 05       	cpc	r19, r1
    117a:	6c f0       	brlt	.+26     	; 0x1196 <mov_get_joy_dir+0x7a>
    117c:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <y_pos>
    1180:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <y_pos+0x1>
    1184:	18 16       	cp	r1, r24
    1186:	19 06       	cpc	r1, r25
    1188:	44 f0       	brlt	.+16     	; 0x119a <mov_get_joy_dir+0x7e>
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	08 95       	ret
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	08 95       	ret
    1192:	85 e0       	ldi	r24, 0x05	; 5
    1194:	08 95       	ret
    1196:	85 e0       	ldi	r24, 0x05	; 5
    1198:	08 95       	ret
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	08 95       	ret

0000119e <mov_read_joy_button>:
    119e:	86 b3       	in	r24, 0x16	; 22
    11a0:	86 95       	lsr	r24
    11a2:	86 95       	lsr	r24
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	89 27       	eor	r24, r25
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	08 95       	ret

000011ae <mov_get_joy_input>:


input_j mov_get_joy_input(void){
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	27 97       	sbiw	r28, 0x07	; 7
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
	mov_pos_joy_rd();
    11ce:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <mov_pos_joy_rd>
	input_j joy_input;
	joy_input.pos_x = x_pos;
    11d2:	c0 90 08 03 	lds	r12, 0x0308	; 0x800308 <x_pos>
    11d6:	d0 90 09 03 	lds	r13, 0x0309	; 0x800309 <x_pos+0x1>
	joy_input.pos_y = y_pos;
    11da:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <y_pos>
    11de:	f0 90 0f 03 	lds	r15, 0x030F	; 0x80030f <y_pos+0x1>
	joy_input.button_pressed = mov_read_joy_button();
    11e2:	0e 94 cf 08 	call	0x119e	; 0x119e <mov_read_joy_button>
    11e6:	18 2f       	mov	r17, r24
    11e8:	09 2f       	mov	r16, r25
	joy_input.direction = mov_get_joy_dir();
    11ea:	0e 94 8e 08 	call	0x111c	; 0x111c <mov_get_joy_dir>
	return joy_input;
    11ee:	da 82       	std	Y+2, r13	; 0x02
    11f0:	c9 82       	std	Y+1, r12	; 0x01
    11f2:	fc 82       	std	Y+4, r15	; 0x04
    11f4:	eb 82       	std	Y+3, r14	; 0x03
    11f6:	2c 2d       	mov	r18, r12
    11f8:	3a 81       	ldd	r19, Y+2	; 0x02
    11fa:	4e 2d       	mov	r20, r14
    11fc:	5c 81       	ldd	r21, Y+4	; 0x04
    11fe:	61 2f       	mov	r22, r17
    1200:	70 2f       	mov	r23, r16
}
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	27 96       	adiw	r28, 0x07	; 7
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    1220:	08 95       	ret

00001222 <OLED_write_d>:
	OLED_goto_page(row);
	OLED_goto_column(col); 
}

void OLED_select_font(font format){
	style = format; 
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	1f 92       	push	r1
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	72 e1       	ldi	r23, 0x12	; 18
    1234:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xmem_write>
    1238:	0f 90       	pop	r0
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <OLED_write_c>:
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	70 e1       	ldi	r23, 0x10	; 16
    1252:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xmem_write>
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <OLED_goto_column>:
    125e:	cf 93       	push	r28
    1260:	84 fb       	bst	r24, 4
    1262:	cc 27       	eor	r28, r28
    1264:	c0 f9       	bld	r28, 0
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    126c:	80 e1       	ldi	r24, 0x10	; 16
    126e:	8c 0f       	add	r24, r28
    1270:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <OLED_goto_page>:
    1278:	cf 93       	push	r28
    127a:	c8 2f       	mov	r28, r24
    127c:	80 eb       	ldi	r24, 0xB0	; 176
    127e:	8c 0f       	add	r24, r28
    1280:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1284:	8c 2f       	mov	r24, r28
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <current_page+0x1>
    128c:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <current_page>
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <OLED_home>:
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0e 94 3c 09 	call	0x1278	; 0x1278 <OLED_goto_page>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	0e 94 2f 09 	call	0x125e	; 0x125e <OLED_goto_column>
    12a0:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <current_page+0x1>
    12a4:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <current_page>
    12a8:	08 95       	ret

000012aa <OLED_clear_page>:
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	0e 94 3c 09 	call	0x1278	; 0x1278 <OLED_goto_page>
    12b2:	c0 e8       	ldi	r28, 0x80	; 128
    12b4:	d0 e0       	ldi	r29, 0x00	; 0
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
    12bc:	21 97       	sbiw	r28, 0x01	; 1
    12be:	d9 f7       	brne	.-10     	; 0x12b6 <OLED_clear_page+0xc>
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <OLED_reset>:
    12c6:	cf 93       	push	r28
    12c8:	0e 94 4a 09 	call	0x1294	; 0x1294 <OLED_home>
    12cc:	c0 e0       	ldi	r28, 0x00	; 0
    12ce:	8c 2f       	mov	r24, r28
    12d0:	0e 94 55 09 	call	0x12aa	; 0x12aa <OLED_clear_page>
    12d4:	cf 5f       	subi	r28, 0xFF	; 255
    12d6:	c8 30       	cpi	r28, 0x08	; 8
    12d8:	d1 f7       	brne	.-12     	; 0x12ce <OLED_reset+0x8>
    12da:	0e 94 4a 09 	call	0x1294	; 0x1294 <OLED_home>
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <OLED_init>:
    12e2:	8e ea       	ldi	r24, 0xAE	; 174
    12e4:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    12e8:	81 ea       	ldi	r24, 0xA1	; 161
    12ea:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    12ee:	8a ed       	ldi	r24, 0xDA	; 218
    12f0:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    12f4:	82 e1       	ldi	r24, 0x12	; 18
    12f6:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    12fa:	88 ec       	ldi	r24, 0xC8	; 200
    12fc:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1300:	88 ea       	ldi	r24, 0xA8	; 168
    1302:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1306:	8f e3       	ldi	r24, 0x3F	; 63
    1308:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    130c:	85 ed       	ldi	r24, 0xD5	; 213
    130e:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1312:	80 e8       	ldi	r24, 0x80	; 128
    1314:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1318:	81 e8       	ldi	r24, 0x81	; 129
    131a:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    131e:	80 e5       	ldi	r24, 0x50	; 80
    1320:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1324:	89 ed       	ldi	r24, 0xD9	; 217
    1326:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    132a:	81 e2       	ldi	r24, 0x21	; 33
    132c:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1330:	80 e2       	ldi	r24, 0x20	; 32
    1332:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    133c:	8b ed       	ldi	r24, 0xDB	; 219
    133e:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1342:	80 e3       	ldi	r24, 0x30	; 48
    1344:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1348:	8d ea       	ldi	r24, 0xAD	; 173
    134a:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1354:	84 ea       	ldi	r24, 0xA4	; 164
    1356:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    135a:	86 ea       	ldi	r24, 0xA6	; 166
    135c:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1360:	8f ea       	ldi	r24, 0xAF	; 175
    1362:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1366:	80 eb       	ldi	r24, 0xB0	; 176
    1368:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1372:	80 e1       	ldi	r24, 0x10	; 16
    1374:	0e 94 20 09 	call	0x1240	; 0x1240 <OLED_write_c>
    1378:	0e 94 63 09 	call	0x12c6	; 0x12c6 <OLED_reset>
    137c:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <style>
    1380:	08 95       	ret

00001382 <OLED_goto_pos>:
    1382:	cf 93       	push	r28
    1384:	c6 2f       	mov	r28, r22
    1386:	0e 94 3c 09 	call	0x1278	; 0x1278 <OLED_goto_page>
    138a:	8c 2f       	mov	r24, r28
    138c:	0e 94 2f 09 	call	0x125e	; 0x125e <OLED_goto_column>
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <OLED_write_char>:
}

void OLED_write_char(uint8_t ch){
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
	switch(style){
    139c:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <style>
    13a0:	91 30       	cpi	r25, 0x01	; 1
    13a2:	b1 f0       	breq	.+44     	; 0x13d0 <OLED_write_char+0x3c>
    13a4:	58 f1       	brcs	.+86     	; 0x13fc <OLED_write_char+0x68>
    13a6:	92 30       	cpi	r25, 0x02	; 2
    13a8:	09 f0       	breq	.+2      	; 0x13ac <OLED_write_char+0x18>
    13aa:	44 c0       	rjmp	.+136    	; 0x1434 <OLED_write_char+0xa0>
    13ac:	c8 2f       	mov	r28, r24
    13ae:	d0 e0       	ldi	r29, 0x00	; 0
    13b0:	cc 0f       	add	r28, r28
    13b2:	dd 1f       	adc	r29, r29
    13b4:	cc 0f       	add	r28, r28
    13b6:	dd 1f       	adc	r29, r29
    13b8:	c0 51       	subi	r28, 0x10	; 16
    13ba:	d0 40       	sbci	r29, 0x00	; 0
    13bc:	14 e0       	ldi	r17, 0x04	; 4
		case SMALL:
			for(uint8_t data = 0; data < 4; data ++){
				uint8_t byte = pgm_read_byte(&(font4[ch-32][data])); 
    13be:	fe 01       	movw	r30, r28
    13c0:	84 91       	lpm	r24, Z
				OLED_write_d(byte);
    13c2:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
    13c6:	11 50       	subi	r17, 0x01	; 1
    13c8:	21 96       	adiw	r28, 0x01	; 1
}

void OLED_write_char(uint8_t ch){
	switch(style){
		case SMALL:
			for(uint8_t data = 0; data < 4; data ++){
    13ca:	11 11       	cpse	r17, r1
    13cc:	f8 cf       	rjmp	.-16     	; 0x13be <OLED_write_char+0x2a>
    13ce:	32 c0       	rjmp	.+100    	; 0x1434 <OLED_write_char+0xa0>
    13d0:	c8 2f       	mov	r28, r24
    13d2:	d0 e0       	ldi	r29, 0x00	; 0
    13d4:	a0 97       	sbiw	r28, 0x20	; 32
    13d6:	ce 01       	movw	r24, r28
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	c8 0f       	add	r28, r24
    13e2:	d9 1f       	adc	r29, r25
    13e4:	c4 51       	subi	r28, 0x14	; 20
    13e6:	de 4f       	sbci	r29, 0xFE	; 254
void OLED_select_font(font format){
	style = format; 
}

void OLED_write_char(uint8_t ch){
	switch(style){
    13e8:	15 e0       	ldi	r17, 0x05	; 5
				OLED_write_d(byte);
			}
			break; 
		case MEDIUM:
			for(uint8_t data = 0; data < 5; data ++){
				uint8_t byte = pgm_read_byte(&(font5[ch-32][data])); 
    13ea:	fe 01       	movw	r30, r28
    13ec:	84 91       	lpm	r24, Z
				OLED_write_d(byte);
    13ee:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
    13f2:	11 50       	subi	r17, 0x01	; 1
    13f4:	21 96       	adiw	r28, 0x01	; 1
				uint8_t byte = pgm_read_byte(&(font4[ch-32][data])); 
				OLED_write_d(byte);
			}
			break; 
		case MEDIUM:
			for(uint8_t data = 0; data < 5; data ++){
    13f6:	11 11       	cpse	r17, r1
    13f8:	f8 cf       	rjmp	.-16     	; 0x13ea <OLED_write_char+0x56>
    13fa:	1c c0       	rjmp	.+56     	; 0x1434 <OLED_write_char+0xa0>
    13fc:	c8 2f       	mov	r28, r24
    13fe:	d0 e0       	ldi	r29, 0x00	; 0
    1400:	8e 01       	movw	r16, r28
    1402:	00 0f       	add	r16, r16
    1404:	11 1f       	adc	r17, r17
    1406:	00 0f       	add	r16, r16
    1408:	11 1f       	adc	r17, r17
    140a:	00 0f       	add	r16, r16
    140c:	11 1f       	adc	r17, r17
    140e:	09 53       	subi	r16, 0x39	; 57
    1410:	1d 4f       	sbci	r17, 0xFD	; 253
    1412:	cc 0f       	add	r28, r28
    1414:	dd 1f       	adc	r29, r29
    1416:	cc 0f       	add	r28, r28
    1418:	dd 1f       	adc	r29, r29
    141a:	cc 0f       	add	r28, r28
    141c:	dd 1f       	adc	r29, r29
    141e:	c1 53       	subi	r28, 0x31	; 49
    1420:	dd 4f       	sbci	r29, 0xFD	; 253
				OLED_write_d(byte);
			}			
			break; 
		case LARGE: 
			for(uint8_t data = 0; data < 8; data ++){
				uint8_t byte = pgm_read_byte(&(font8[ch-32][data])); 
    1422:	f8 01       	movw	r30, r16
    1424:	84 91       	lpm	r24, Z
				OLED_write_d(byte);
    1426:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
    142a:	0f 5f       	subi	r16, 0xFF	; 255
    142c:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t byte = pgm_read_byte(&(font5[ch-32][data])); 
				OLED_write_d(byte);
			}			
			break; 
		case LARGE: 
			for(uint8_t data = 0; data < 8; data ++){
    142e:	0c 17       	cp	r16, r28
    1430:	1d 07       	cpc	r17, r29
    1432:	b9 f7       	brne	.-18     	; 0x1422 <OLED_write_char+0x8e>
				uint8_t byte = pgm_read_byte(&(font8[ch-32][data])); 
				OLED_write_d(byte);
			}

	}
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <OLED_print>:



void OLED_print(char* data){
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	7c 01       	movw	r14, r24
	int size_ch = 0;
	int ch = 0;
    144c:	00 e0       	ldi	r16, 0x00	; 0
    144e:	10 e0       	ldi	r17, 0x00	; 0
}



void OLED_print(char* data){
	int size_ch = 0;
    1450:	c0 e0       	ldi	r28, 0x00	; 0
    1452:	d0 e0       	ldi	r29, 0x00	; 0
	int ch = 0;
	while (data[ch] != '\0'){
    1454:	19 c0       	rjmp	.+50     	; 0x1488 <OLED_print+0x4a>
		if(size_ch*8 < OLED_SCREEN_WIDTH){
    1456:	9e 01       	movw	r18, r28
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	20 38       	cpi	r18, 0x80	; 128
    1466:	31 05       	cpc	r19, r1
    1468:	34 f4       	brge	.+12     	; 0x1476 <OLED_print+0x38>
			OLED_write_char(data[ch]);
    146a:	0e 94 ca 09 	call	0x1394	; 0x1394 <OLED_write_char>
			size_ch++;
    146e:	21 96       	adiw	r28, 0x01	; 1
			ch++;		
    1470:	0f 5f       	subi	r16, 0xFF	; 255
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <OLED_print+0x4a>
		}
		else{
			OLED_goto_page(current_page + 1);
    1476:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <current_page>
    147a:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <current_page+0x1>
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	0e 94 3c 09 	call	0x1278	; 0x1278 <OLED_goto_page>
			size_ch = 0; 
    1484:	c0 e0       	ldi	r28, 0x00	; 0
    1486:	d0 e0       	ldi	r29, 0x00	; 0


void OLED_print(char* data){
	int size_ch = 0;
	int ch = 0;
	while (data[ch] != '\0'){
    1488:	f7 01       	movw	r30, r14
    148a:	e0 0f       	add	r30, r16
    148c:	f1 1f       	adc	r31, r17
    148e:	80 81       	ld	r24, Z
    1490:	81 11       	cpse	r24, r1
    1492:	e1 cf       	rjmp	.-62     	; 0x1456 <OLED_print+0x18>
			size_ch = 0; 
		}

	}
	//printf("Size of data is: %d byte \r\n", size_ch);
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	08 95       	ret

000014a2 <OLED_print_arrow>:


void OLED_print_arrow(uint8_t row, uint8_t col){
  OLED_goto_pos(row, col); 
    14a2:	0e 94 c1 09 	call	0x1382	; 0x1382 <OLED_goto_pos>
  OLED_write_d(0b00011000);
    14a6:	88 e1       	ldi	r24, 0x18	; 24
    14a8:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
  OLED_write_d(0b00011000);
    14ac:	88 e1       	ldi	r24, 0x18	; 24
    14ae:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
  OLED_write_d(0b01111110);
    14b2:	8e e7       	ldi	r24, 0x7E	; 126
    14b4:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
  OLED_write_d(0b00111100);
    14b8:	8c e3       	ldi	r24, 0x3C	; 60
    14ba:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
  OLED_write_d(0b00011000);
    14be:	88 e1       	ldi	r24, 0x18	; 24
    14c0:	0e 94 11 09 	call	0x1222	; 0x1222 <OLED_write_d>
    14c4:	08 95       	ret

000014c6 <SPI_init>:
#define CAN_CS PB4
#define SPI_PORT PORTB

void SPI_init(void){
  // Set MOSI, SS and SCK output, all others input
  DDRB |= (1 << PB5) | (1 << CAN_CS) | (1 << PB7);
    14c6:	87 b3       	in	r24, 0x17	; 23
    14c8:	80 6b       	ori	r24, 0xB0	; 176
    14ca:	87 bb       	out	0x17, r24	; 23
  DDRB &= ~(1 << PB6); // PB6 = 0, MISO is input
    14cc:	be 98       	cbi	0x17, 6	; 23
	
  // Enable SPI, Master, set clock rate fck/16
  SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    14ce:	8d b1       	in	r24, 0x0d	; 13
    14d0:	81 65       	ori	r24, 0x51	; 81
    14d2:	8d b9       	out	0x0d, r24	; 13
  SPCR &= ~(1 << SPR1); // SPR1 = 0 (clk rate)
    14d4:	69 98       	cbi	0x0d, 1	; 13
  
  // SPI Mode = 0 -> Leading edge: sample, Trailing edge: setup
  SPCR &= ~(1 << CPOL); // CPOL = 0
    14d6:	6b 98       	cbi	0x0d, 3	; 13
  SPCR &= ~(1 << CPHA); // CPHA = 0
    14d8:	6a 98       	cbi	0x0d, 2	; 13
    14da:	08 95       	ret

000014dc <SPI_send>:
}


void SPI_send(char cData){
  //Start transmission
  SPDR = cData; //SPI Data register
    14dc:	8f b9       	out	0x0f, r24	; 15
  //Wait for transmission complete
  while(!(SPSR & (1 << SPIF))){} //SPIF sets interrupt flag IF when transmission is completed
    14de:	77 9b       	sbis	0x0e, 7	; 14
    14e0:	fe cf       	rjmp	.-4      	; 0x14de <SPI_send+0x2>
}
    14e2:	08 95       	ret

000014e4 <SPI_read>:

char SPI_read(void){
	//Send dummy byte
	SPDR = 0xFF; //SPI Data register
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	8f b9       	out	0x0f, r24	; 15
  
	//Wait for transmission complete
	while(!(SPSR & (1 << SPIF))){} //SPIF sets interrupt flag IF when transmission is completed
    14e8:	77 9b       	sbis	0x0e, 7	; 14
    14ea:	fe cf       	rjmp	.-4      	; 0x14e8 <SPI_read+0x4>
		
	return SPDR;
    14ec:	8f b1       	in	r24, 0x0f	; 15
}
    14ee:	08 95       	ret

000014f0 <SPI_select>:

void SPI_select(void){
  SPI_PORT &= ~(1 << CAN_CS);
    14f0:	c4 98       	cbi	0x18, 4	; 24
    14f2:	08 95       	ret

000014f4 <SPI_deselect>:
}
 
        
void SPI_deselect(void){
  SPI_PORT |= (1 << CAN_CS);
    14f4:	c4 9a       	sbi	0x18, 4	; 24
    14f6:	08 95       	ret

000014f8 <uart_transmit>:
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
	fdevopen(uart_transmit,uart_receive);
}

void uart_transmit(unsigned char message){
	while ( !(UCSR0A & (1 << UDRE0)) ); // Wait until last message has been sent and transmit buffer is empty.
    14f8:	5d 9b       	sbis	0x0b, 5	; 11
    14fa:	fe cf       	rjmp	.-4      	; 0x14f8 <uart_transmit>
	UDR0 = message;						// Put data in buffer
    14fc:	8c b9       	out	0x0c, r24	; 12
    14fe:	08 95       	ret

00001500 <uart_receive>:
}

unsigned char uart_receive(void){
	while ( !(UCSR0A & (1 << RXC0)) );	// Wait until last message has been received
    1500:	5f 9b       	sbis	0x0b, 7	; 11
    1502:	fe cf       	rjmp	.-4      	; 0x1500 <uart_receive>
	
	UCSR0A |= (1 << RXC0);
    1504:	5f 9a       	sbi	0x0b, 7	; 11
	return UDR0;					// Put data in buffer
    1506:	8c b1       	in	r24, 0x0c	; 12
}
    1508:	08 95       	ret

0000150a <uart_init>:

// Here, using USART0-registers

void uart_init(unsigned int ubrr){
	// Baud rate
	UBRR0H = (unsigned char) (ubrr >> 8);	// Baud rate high register
    150a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);		// Baud rate low register
    150c:	89 b9       	out	0x09, r24	; 9
	// Enable receivers and transmitter on usart 0
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    150e:	88 e1       	ldi	r24, 0x18	; 24
    1510:	8a b9       	out	0x0a, r24	; 10
	// Data format (char = 8 bit, + 2 stop bit)
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
    1512:	8e e8       	ldi	r24, 0x8E	; 142
    1514:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_transmit,uart_receive);
    1516:	60 e8       	ldi	r22, 0x80	; 128
    1518:	7a e0       	ldi	r23, 0x0A	; 10
    151a:	8c e7       	ldi	r24, 0x7C	; 124
    151c:	9a e0       	ldi	r25, 0x0A	; 10
    151e:	0e 94 20 0c 	call	0x1840	; 0x1840 <fdevopen>
    1522:	08 95       	ret

00001524 <xmem_init>:
void mcu_porta_io_config(uint8_t mcu_in) {
	if (mcu_in) {
		DDRA = 0x00; //input
	}
	else {
		DDRA = 0xFF; //output
    1524:	85 b7       	in	r24, 0x35	; 53
    1526:	80 68       	ori	r24, 0x80	; 128
    1528:	85 bf       	out	0x35, r24	; 53
    152a:	80 b7       	in	r24, 0x30	; 48
    152c:	87 7c       	andi	r24, 0xC7	; 199
    152e:	80 bf       	out	0x30, r24	; 48
    1530:	80 b7       	in	r24, 0x30	; 48
    1532:	80 62       	ori	r24, 0x20	; 32
    1534:	80 bf       	out	0x30, r24	; 48
    1536:	08 95       	ret

00001538 <xmem_write>:

// xmem read og write er hentet fra labforelesning

void xmem_write(uint8_t data, uint16_t offset) {
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[offset] = data;
    1538:	fb 01       	movw	r30, r22
    153a:	f0 5f       	subi	r31, 0xF0	; 240
    153c:	80 83       	st	Z, r24
    153e:	08 95       	ret

00001540 <xmem_read>:
}

uint8_t xmem_read(uint16_t offset) {	
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[offset];	
    1540:	90 5f       	subi	r25, 0xF0	; 240
    1542:	fc 01       	movw	r30, r24
    1544:	80 81       	ld	r24, Z
	return ret_val;
}
    1546:	08 95       	ret

00001548 <__divmodsi4>:
    1548:	05 2e       	mov	r0, r21
    154a:	97 fb       	bst	r25, 7
    154c:	1e f4       	brtc	.+6      	; 0x1554 <__divmodsi4+0xc>
    154e:	00 94       	com	r0
    1550:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__negsi2>
    1554:	57 fd       	sbrc	r21, 7
    1556:	07 d0       	rcall	.+14     	; 0x1566 <__divmodsi4_neg2>
    1558:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__udivmodsi4>
    155c:	07 fc       	sbrc	r0, 7
    155e:	03 d0       	rcall	.+6      	; 0x1566 <__divmodsi4_neg2>
    1560:	4e f4       	brtc	.+18     	; 0x1574 <__divmodsi4_exit>
    1562:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__negsi2>

00001566 <__divmodsi4_neg2>:
    1566:	50 95       	com	r21
    1568:	40 95       	com	r20
    156a:	30 95       	com	r19
    156c:	21 95       	neg	r18
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	4f 4f       	sbci	r20, 0xFF	; 255
    1572:	5f 4f       	sbci	r21, 0xFF	; 255

00001574 <__divmodsi4_exit>:
    1574:	08 95       	ret

00001576 <__negsi2>:
    1576:	90 95       	com	r25
    1578:	80 95       	com	r24
    157a:	70 95       	com	r23
    157c:	61 95       	neg	r22
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	08 95       	ret

00001586 <__umulhisi3>:
    1586:	a2 9f       	mul	r26, r18
    1588:	b0 01       	movw	r22, r0
    158a:	b3 9f       	mul	r27, r19
    158c:	c0 01       	movw	r24, r0
    158e:	a3 9f       	mul	r26, r19
    1590:	70 0d       	add	r23, r0
    1592:	81 1d       	adc	r24, r1
    1594:	11 24       	eor	r1, r1
    1596:	91 1d       	adc	r25, r1
    1598:	b2 9f       	mul	r27, r18
    159a:	70 0d       	add	r23, r0
    159c:	81 1d       	adc	r24, r1
    159e:	11 24       	eor	r1, r1
    15a0:	91 1d       	adc	r25, r1
    15a2:	08 95       	ret

000015a4 <__muluhisi3>:
    15a4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__umulhisi3>
    15a8:	a5 9f       	mul	r26, r21
    15aa:	90 0d       	add	r25, r0
    15ac:	b4 9f       	mul	r27, r20
    15ae:	90 0d       	add	r25, r0
    15b0:	a4 9f       	mul	r26, r20
    15b2:	80 0d       	add	r24, r0
    15b4:	91 1d       	adc	r25, r1
    15b6:	11 24       	eor	r1, r1
    15b8:	08 95       	ret

000015ba <__udivmodsi4>:
    15ba:	a1 e2       	ldi	r26, 0x21	; 33
    15bc:	1a 2e       	mov	r1, r26
    15be:	aa 1b       	sub	r26, r26
    15c0:	bb 1b       	sub	r27, r27
    15c2:	fd 01       	movw	r30, r26
    15c4:	0d c0       	rjmp	.+26     	; 0x15e0 <__udivmodsi4_ep>

000015c6 <__udivmodsi4_loop>:
    15c6:	aa 1f       	adc	r26, r26
    15c8:	bb 1f       	adc	r27, r27
    15ca:	ee 1f       	adc	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	a2 17       	cp	r26, r18
    15d0:	b3 07       	cpc	r27, r19
    15d2:	e4 07       	cpc	r30, r20
    15d4:	f5 07       	cpc	r31, r21
    15d6:	20 f0       	brcs	.+8      	; 0x15e0 <__udivmodsi4_ep>
    15d8:	a2 1b       	sub	r26, r18
    15da:	b3 0b       	sbc	r27, r19
    15dc:	e4 0b       	sbc	r30, r20
    15de:	f5 0b       	sbc	r31, r21

000015e0 <__udivmodsi4_ep>:
    15e0:	66 1f       	adc	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	1a 94       	dec	r1
    15ea:	69 f7       	brne	.-38     	; 0x15c6 <__udivmodsi4_loop>
    15ec:	60 95       	com	r22
    15ee:	70 95       	com	r23
    15f0:	80 95       	com	r24
    15f2:	90 95       	com	r25
    15f4:	9b 01       	movw	r18, r22
    15f6:	ac 01       	movw	r20, r24
    15f8:	bd 01       	movw	r22, r26
    15fa:	cf 01       	movw	r24, r30
    15fc:	08 95       	ret

000015fe <malloc>:
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	91 05       	cpc	r25, r1
    160a:	10 f4       	brcc	.+4      	; 0x1610 <malloc+0x12>
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <__flp>
    1614:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <__flp+0x1>
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	a0 e0       	ldi	r26, 0x00	; 0
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	30 97       	sbiw	r30, 0x00	; 0
    1622:	19 f1       	breq	.+70     	; 0x166a <malloc+0x6c>
    1624:	40 81       	ld	r20, Z
    1626:	51 81       	ldd	r21, Z+1	; 0x01
    1628:	02 81       	ldd	r16, Z+2	; 0x02
    162a:	13 81       	ldd	r17, Z+3	; 0x03
    162c:	48 17       	cp	r20, r24
    162e:	59 07       	cpc	r21, r25
    1630:	c8 f0       	brcs	.+50     	; 0x1664 <malloc+0x66>
    1632:	84 17       	cp	r24, r20
    1634:	95 07       	cpc	r25, r21
    1636:	69 f4       	brne	.+26     	; 0x1652 <malloc+0x54>
    1638:	10 97       	sbiw	r26, 0x00	; 0
    163a:	31 f0       	breq	.+12     	; 0x1648 <malloc+0x4a>
    163c:	12 96       	adiw	r26, 0x02	; 2
    163e:	0c 93       	st	X, r16
    1640:	12 97       	sbiw	r26, 0x02	; 2
    1642:	13 96       	adiw	r26, 0x03	; 3
    1644:	1c 93       	st	X, r17
    1646:	27 c0       	rjmp	.+78     	; 0x1696 <malloc+0x98>
    1648:	00 93 16 03 	sts	0x0316, r16	; 0x800316 <__flp>
    164c:	10 93 17 03 	sts	0x0317, r17	; 0x800317 <__flp+0x1>
    1650:	22 c0       	rjmp	.+68     	; 0x1696 <malloc+0x98>
    1652:	21 15       	cp	r18, r1
    1654:	31 05       	cpc	r19, r1
    1656:	19 f0       	breq	.+6      	; 0x165e <malloc+0x60>
    1658:	42 17       	cp	r20, r18
    165a:	53 07       	cpc	r21, r19
    165c:	18 f4       	brcc	.+6      	; 0x1664 <malloc+0x66>
    165e:	9a 01       	movw	r18, r20
    1660:	bd 01       	movw	r22, r26
    1662:	ef 01       	movw	r28, r30
    1664:	df 01       	movw	r26, r30
    1666:	f8 01       	movw	r30, r16
    1668:	db cf       	rjmp	.-74     	; 0x1620 <malloc+0x22>
    166a:	21 15       	cp	r18, r1
    166c:	31 05       	cpc	r19, r1
    166e:	f9 f0       	breq	.+62     	; 0x16ae <malloc+0xb0>
    1670:	28 1b       	sub	r18, r24
    1672:	39 0b       	sbc	r19, r25
    1674:	24 30       	cpi	r18, 0x04	; 4
    1676:	31 05       	cpc	r19, r1
    1678:	80 f4       	brcc	.+32     	; 0x169a <malloc+0x9c>
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	9b 81       	ldd	r25, Y+3	; 0x03
    167e:	61 15       	cp	r22, r1
    1680:	71 05       	cpc	r23, r1
    1682:	21 f0       	breq	.+8      	; 0x168c <malloc+0x8e>
    1684:	fb 01       	movw	r30, r22
    1686:	93 83       	std	Z+3, r25	; 0x03
    1688:	82 83       	std	Z+2, r24	; 0x02
    168a:	04 c0       	rjmp	.+8      	; 0x1694 <malloc+0x96>
    168c:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <__flp+0x1>
    1690:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <__flp>
    1694:	fe 01       	movw	r30, r28
    1696:	32 96       	adiw	r30, 0x02	; 2
    1698:	44 c0       	rjmp	.+136    	; 0x1722 <malloc+0x124>
    169a:	fe 01       	movw	r30, r28
    169c:	e2 0f       	add	r30, r18
    169e:	f3 1f       	adc	r31, r19
    16a0:	81 93       	st	Z+, r24
    16a2:	91 93       	st	Z+, r25
    16a4:	22 50       	subi	r18, 0x02	; 2
    16a6:	31 09       	sbc	r19, r1
    16a8:	39 83       	std	Y+1, r19	; 0x01
    16aa:	28 83       	st	Y, r18
    16ac:	3a c0       	rjmp	.+116    	; 0x1722 <malloc+0x124>
    16ae:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    16b2:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    16b6:	23 2b       	or	r18, r19
    16b8:	41 f4       	brne	.+16     	; 0x16ca <malloc+0xcc>
    16ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    16be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16c2:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <__brkval+0x1>
    16c6:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__brkval>
    16ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    16ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    16d2:	21 15       	cp	r18, r1
    16d4:	31 05       	cpc	r19, r1
    16d6:	41 f4       	brne	.+16     	; 0x16e8 <malloc+0xea>
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    16e0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    16e4:	24 1b       	sub	r18, r20
    16e6:	35 0b       	sbc	r19, r21
    16e8:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <__brkval>
    16ec:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <__brkval+0x1>
    16f0:	e2 17       	cp	r30, r18
    16f2:	f3 07       	cpc	r31, r19
    16f4:	a0 f4       	brcc	.+40     	; 0x171e <malloc+0x120>
    16f6:	2e 1b       	sub	r18, r30
    16f8:	3f 0b       	sbc	r19, r31
    16fa:	28 17       	cp	r18, r24
    16fc:	39 07       	cpc	r19, r25
    16fe:	78 f0       	brcs	.+30     	; 0x171e <malloc+0x120>
    1700:	ac 01       	movw	r20, r24
    1702:	4e 5f       	subi	r20, 0xFE	; 254
    1704:	5f 4f       	sbci	r21, 0xFF	; 255
    1706:	24 17       	cp	r18, r20
    1708:	35 07       	cpc	r19, r21
    170a:	48 f0       	brcs	.+18     	; 0x171e <malloc+0x120>
    170c:	4e 0f       	add	r20, r30
    170e:	5f 1f       	adc	r21, r31
    1710:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <__brkval+0x1>
    1714:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <__brkval>
    1718:	81 93       	st	Z+, r24
    171a:	91 93       	st	Z+, r25
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <malloc+0x124>
    171e:	e0 e0       	ldi	r30, 0x00	; 0
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	cf 01       	movw	r24, r30
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <free>:
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	09 f4       	brne	.+2      	; 0x1738 <free+0xa>
    1736:	81 c0       	rjmp	.+258    	; 0x183a <free+0x10c>
    1738:	fc 01       	movw	r30, r24
    173a:	32 97       	sbiw	r30, 0x02	; 2
    173c:	13 82       	std	Z+3, r1	; 0x03
    173e:	12 82       	std	Z+2, r1	; 0x02
    1740:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <__flp>
    1744:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <__flp+0x1>
    1748:	10 97       	sbiw	r26, 0x00	; 0
    174a:	81 f4       	brne	.+32     	; 0x176c <free+0x3e>
    174c:	20 81       	ld	r18, Z
    174e:	31 81       	ldd	r19, Z+1	; 0x01
    1750:	82 0f       	add	r24, r18
    1752:	93 1f       	adc	r25, r19
    1754:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    1758:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    175c:	28 17       	cp	r18, r24
    175e:	39 07       	cpc	r19, r25
    1760:	51 f5       	brne	.+84     	; 0x17b6 <free+0x88>
    1762:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__brkval+0x1>
    1766:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__brkval>
    176a:	67 c0       	rjmp	.+206    	; 0x183a <free+0x10c>
    176c:	ed 01       	movw	r28, r26
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	ce 17       	cp	r28, r30
    1774:	df 07       	cpc	r29, r31
    1776:	40 f4       	brcc	.+16     	; 0x1788 <free+0x5a>
    1778:	4a 81       	ldd	r20, Y+2	; 0x02
    177a:	5b 81       	ldd	r21, Y+3	; 0x03
    177c:	9e 01       	movw	r18, r28
    177e:	41 15       	cp	r20, r1
    1780:	51 05       	cpc	r21, r1
    1782:	f1 f0       	breq	.+60     	; 0x17c0 <free+0x92>
    1784:	ea 01       	movw	r28, r20
    1786:	f5 cf       	rjmp	.-22     	; 0x1772 <free+0x44>
    1788:	d3 83       	std	Z+3, r29	; 0x03
    178a:	c2 83       	std	Z+2, r28	; 0x02
    178c:	40 81       	ld	r20, Z
    178e:	51 81       	ldd	r21, Z+1	; 0x01
    1790:	84 0f       	add	r24, r20
    1792:	95 1f       	adc	r25, r21
    1794:	c8 17       	cp	r28, r24
    1796:	d9 07       	cpc	r29, r25
    1798:	59 f4       	brne	.+22     	; 0x17b0 <free+0x82>
    179a:	88 81       	ld	r24, Y
    179c:	99 81       	ldd	r25, Y+1	; 0x01
    179e:	84 0f       	add	r24, r20
    17a0:	95 1f       	adc	r25, r21
    17a2:	02 96       	adiw	r24, 0x02	; 2
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	93 83       	std	Z+3, r25	; 0x03
    17ae:	82 83       	std	Z+2, r24	; 0x02
    17b0:	21 15       	cp	r18, r1
    17b2:	31 05       	cpc	r19, r1
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <free+0x92>
    17b6:	f0 93 17 03 	sts	0x0317, r31	; 0x800317 <__flp+0x1>
    17ba:	e0 93 16 03 	sts	0x0316, r30	; 0x800316 <__flp>
    17be:	3d c0       	rjmp	.+122    	; 0x183a <free+0x10c>
    17c0:	e9 01       	movw	r28, r18
    17c2:	fb 83       	std	Y+3, r31	; 0x03
    17c4:	ea 83       	std	Y+2, r30	; 0x02
    17c6:	49 91       	ld	r20, Y+
    17c8:	59 91       	ld	r21, Y+
    17ca:	c4 0f       	add	r28, r20
    17cc:	d5 1f       	adc	r29, r21
    17ce:	ec 17       	cp	r30, r28
    17d0:	fd 07       	cpc	r31, r29
    17d2:	61 f4       	brne	.+24     	; 0x17ec <free+0xbe>
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	84 0f       	add	r24, r20
    17da:	95 1f       	adc	r25, r21
    17dc:	02 96       	adiw	r24, 0x02	; 2
    17de:	e9 01       	movw	r28, r18
    17e0:	99 83       	std	Y+1, r25	; 0x01
    17e2:	88 83       	st	Y, r24
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	9b 83       	std	Y+3, r25	; 0x03
    17ea:	8a 83       	std	Y+2, r24	; 0x02
    17ec:	e0 e0       	ldi	r30, 0x00	; 0
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	12 96       	adiw	r26, 0x02	; 2
    17f2:	8d 91       	ld	r24, X+
    17f4:	9c 91       	ld	r25, X
    17f6:	13 97       	sbiw	r26, 0x03	; 3
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	19 f0       	breq	.+6      	; 0x1802 <free+0xd4>
    17fc:	fd 01       	movw	r30, r26
    17fe:	dc 01       	movw	r26, r24
    1800:	f7 cf       	rjmp	.-18     	; 0x17f0 <free+0xc2>
    1802:	8d 91       	ld	r24, X+
    1804:	9c 91       	ld	r25, X
    1806:	11 97       	sbiw	r26, 0x01	; 1
    1808:	9d 01       	movw	r18, r26
    180a:	2e 5f       	subi	r18, 0xFE	; 254
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	82 0f       	add	r24, r18
    1810:	93 1f       	adc	r25, r19
    1812:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    1816:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    181a:	28 17       	cp	r18, r24
    181c:	39 07       	cpc	r19, r25
    181e:	69 f4       	brne	.+26     	; 0x183a <free+0x10c>
    1820:	30 97       	sbiw	r30, 0x00	; 0
    1822:	29 f4       	brne	.+10     	; 0x182e <free+0x100>
    1824:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__flp+0x1>
    1828:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__flp>
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <free+0x104>
    182e:	13 82       	std	Z+3, r1	; 0x03
    1830:	12 82       	std	Z+2, r1	; 0x02
    1832:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <__brkval+0x1>
    1836:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <__brkval>
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <fdevopen>:
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	31 f4       	brne	.+12     	; 0x1858 <fdevopen+0x18>
    184c:	61 15       	cp	r22, r1
    184e:	71 05       	cpc	r23, r1
    1850:	19 f4       	brne	.+6      	; 0x1858 <fdevopen+0x18>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	3a c0       	rjmp	.+116    	; 0x18cc <fdevopen+0x8c>
    1858:	8b 01       	movw	r16, r22
    185a:	ec 01       	movw	r28, r24
    185c:	6e e0       	ldi	r22, 0x0E	; 14
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <calloc>
    1868:	fc 01       	movw	r30, r24
    186a:	89 2b       	or	r24, r25
    186c:	91 f3       	breq	.-28     	; 0x1852 <fdevopen+0x12>
    186e:	80 e8       	ldi	r24, 0x80	; 128
    1870:	83 83       	std	Z+3, r24	; 0x03
    1872:	01 15       	cp	r16, r1
    1874:	11 05       	cpc	r17, r1
    1876:	71 f0       	breq	.+28     	; 0x1894 <fdevopen+0x54>
    1878:	13 87       	std	Z+11, r17	; 0x0b
    187a:	02 87       	std	Z+10, r16	; 0x0a
    187c:	81 e8       	ldi	r24, 0x81	; 129
    187e:	83 83       	std	Z+3, r24	; 0x03
    1880:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__iob>
    1884:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__iob+0x1>
    1888:	89 2b       	or	r24, r25
    188a:	21 f4       	brne	.+8      	; 0x1894 <fdevopen+0x54>
    188c:	f0 93 19 03 	sts	0x0319, r31	; 0x800319 <__iob+0x1>
    1890:	e0 93 18 03 	sts	0x0318, r30	; 0x800318 <__iob>
    1894:	20 97       	sbiw	r28, 0x00	; 0
    1896:	c9 f0       	breq	.+50     	; 0x18ca <fdevopen+0x8a>
    1898:	d1 87       	std	Z+9, r29	; 0x09
    189a:	c0 87       	std	Z+8, r28	; 0x08
    189c:	83 81       	ldd	r24, Z+3	; 0x03
    189e:	82 60       	ori	r24, 0x02	; 2
    18a0:	83 83       	std	Z+3, r24	; 0x03
    18a2:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__iob+0x2>
    18a6:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__iob+0x3>
    18aa:	89 2b       	or	r24, r25
    18ac:	71 f4       	brne	.+28     	; 0x18ca <fdevopen+0x8a>
    18ae:	f0 93 1b 03 	sts	0x031B, r31	; 0x80031b <__iob+0x3>
    18b2:	e0 93 1a 03 	sts	0x031A, r30	; 0x80031a <__iob+0x2>
    18b6:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__iob+0x4>
    18ba:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <__iob+0x5>
    18be:	89 2b       	or	r24, r25
    18c0:	21 f4       	brne	.+8      	; 0x18ca <fdevopen+0x8a>
    18c2:	f0 93 1d 03 	sts	0x031D, r31	; 0x80031d <__iob+0x5>
    18c6:	e0 93 1c 03 	sts	0x031C, r30	; 0x80031c <__iob+0x4>
    18ca:	cf 01       	movw	r24, r30
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <printf>:
    18d6:	a0 e0       	ldi	r26, 0x00	; 0
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e1 e7       	ldi	r30, 0x71	; 113
    18dc:	fc e0       	ldi	r31, 0x0C	; 12
    18de:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__prologue_saves__+0x20>
    18e2:	ae 01       	movw	r20, r28
    18e4:	4b 5f       	subi	r20, 0xFB	; 251
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255
    18e8:	fa 01       	movw	r30, r20
    18ea:	61 91       	ld	r22, Z+
    18ec:	71 91       	ld	r23, Z+
    18ee:	af 01       	movw	r20, r30
    18f0:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__iob+0x2>
    18f4:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__iob+0x3>
    18f8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <vfprintf>
    18fc:	e2 e0       	ldi	r30, 0x02	; 2
    18fe:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__epilogue_restores__+0x20>

00001902 <puts>:
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <__iob+0x2>
    190e:	f0 91 1b 03 	lds	r31, 0x031B	; 0x80031b <__iob+0x3>
    1912:	23 81       	ldd	r18, Z+3	; 0x03
    1914:	21 ff       	sbrs	r18, 1
    1916:	1b c0       	rjmp	.+54     	; 0x194e <puts+0x4c>
    1918:	8c 01       	movw	r16, r24
    191a:	d0 e0       	ldi	r29, 0x00	; 0
    191c:	c0 e0       	ldi	r28, 0x00	; 0
    191e:	f8 01       	movw	r30, r16
    1920:	81 91       	ld	r24, Z+
    1922:	8f 01       	movw	r16, r30
    1924:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <__iob+0x2>
    1928:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <__iob+0x3>
    192c:	db 01       	movw	r26, r22
    192e:	18 96       	adiw	r26, 0x08	; 8
    1930:	ed 91       	ld	r30, X+
    1932:	fc 91       	ld	r31, X
    1934:	19 97       	sbiw	r26, 0x09	; 9
    1936:	88 23       	and	r24, r24
    1938:	31 f0       	breq	.+12     	; 0x1946 <puts+0x44>
    193a:	09 95       	icall
    193c:	89 2b       	or	r24, r25
    193e:	79 f3       	breq	.-34     	; 0x191e <puts+0x1c>
    1940:	df ef       	ldi	r29, 0xFF	; 255
    1942:	cf ef       	ldi	r28, 0xFF	; 255
    1944:	ec cf       	rjmp	.-40     	; 0x191e <puts+0x1c>
    1946:	8a e0       	ldi	r24, 0x0A	; 10
    1948:	09 95       	icall
    194a:	89 2b       	or	r24, r25
    194c:	19 f0       	breq	.+6      	; 0x1954 <puts+0x52>
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	9f ef       	ldi	r25, 0xFF	; 255
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <puts+0x56>
    1954:	8d 2f       	mov	r24, r29
    1956:	9c 2f       	mov	r25, r28
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	08 95       	ret

00001962 <vfprintf>:
    1962:	ab e0       	ldi	r26, 0x0B	; 11
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e7 eb       	ldi	r30, 0xB7	; 183
    1968:	fc e0       	ldi	r31, 0x0C	; 12
    196a:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__prologue_saves__>
    196e:	6c 01       	movw	r12, r24
    1970:	7b 01       	movw	r14, r22
    1972:	8a 01       	movw	r16, r20
    1974:	fc 01       	movw	r30, r24
    1976:	17 82       	std	Z+7, r1	; 0x07
    1978:	16 82       	std	Z+6, r1	; 0x06
    197a:	83 81       	ldd	r24, Z+3	; 0x03
    197c:	81 ff       	sbrs	r24, 1
    197e:	cc c1       	rjmp	.+920    	; 0x1d18 <vfprintf+0x3b6>
    1980:	ce 01       	movw	r24, r28
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	3c 01       	movw	r6, r24
    1986:	f6 01       	movw	r30, r12
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	f7 01       	movw	r30, r14
    198c:	93 fd       	sbrc	r25, 3
    198e:	85 91       	lpm	r24, Z+
    1990:	93 ff       	sbrs	r25, 3
    1992:	81 91       	ld	r24, Z+
    1994:	7f 01       	movw	r14, r30
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <vfprintf+0x3a>
    199a:	ba c1       	rjmp	.+884    	; 0x1d10 <vfprintf+0x3ae>
    199c:	85 32       	cpi	r24, 0x25	; 37
    199e:	39 f4       	brne	.+14     	; 0x19ae <vfprintf+0x4c>
    19a0:	93 fd       	sbrc	r25, 3
    19a2:	85 91       	lpm	r24, Z+
    19a4:	93 ff       	sbrs	r25, 3
    19a6:	81 91       	ld	r24, Z+
    19a8:	7f 01       	movw	r14, r30
    19aa:	85 32       	cpi	r24, 0x25	; 37
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <vfprintf+0x56>
    19ae:	b6 01       	movw	r22, r12
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    19b6:	e7 cf       	rjmp	.-50     	; 0x1986 <vfprintf+0x24>
    19b8:	91 2c       	mov	r9, r1
    19ba:	21 2c       	mov	r2, r1
    19bc:	31 2c       	mov	r3, r1
    19be:	ff e1       	ldi	r31, 0x1F	; 31
    19c0:	f3 15       	cp	r31, r3
    19c2:	d8 f0       	brcs	.+54     	; 0x19fa <vfprintf+0x98>
    19c4:	8b 32       	cpi	r24, 0x2B	; 43
    19c6:	79 f0       	breq	.+30     	; 0x19e6 <vfprintf+0x84>
    19c8:	38 f4       	brcc	.+14     	; 0x19d8 <vfprintf+0x76>
    19ca:	80 32       	cpi	r24, 0x20	; 32
    19cc:	79 f0       	breq	.+30     	; 0x19ec <vfprintf+0x8a>
    19ce:	83 32       	cpi	r24, 0x23	; 35
    19d0:	a1 f4       	brne	.+40     	; 0x19fa <vfprintf+0x98>
    19d2:	23 2d       	mov	r18, r3
    19d4:	20 61       	ori	r18, 0x10	; 16
    19d6:	1d c0       	rjmp	.+58     	; 0x1a12 <vfprintf+0xb0>
    19d8:	8d 32       	cpi	r24, 0x2D	; 45
    19da:	61 f0       	breq	.+24     	; 0x19f4 <vfprintf+0x92>
    19dc:	80 33       	cpi	r24, 0x30	; 48
    19de:	69 f4       	brne	.+26     	; 0x19fa <vfprintf+0x98>
    19e0:	23 2d       	mov	r18, r3
    19e2:	21 60       	ori	r18, 0x01	; 1
    19e4:	16 c0       	rjmp	.+44     	; 0x1a12 <vfprintf+0xb0>
    19e6:	83 2d       	mov	r24, r3
    19e8:	82 60       	ori	r24, 0x02	; 2
    19ea:	38 2e       	mov	r3, r24
    19ec:	e3 2d       	mov	r30, r3
    19ee:	e4 60       	ori	r30, 0x04	; 4
    19f0:	3e 2e       	mov	r3, r30
    19f2:	2a c0       	rjmp	.+84     	; 0x1a48 <vfprintf+0xe6>
    19f4:	f3 2d       	mov	r31, r3
    19f6:	f8 60       	ori	r31, 0x08	; 8
    19f8:	1d c0       	rjmp	.+58     	; 0x1a34 <vfprintf+0xd2>
    19fa:	37 fc       	sbrc	r3, 7
    19fc:	2d c0       	rjmp	.+90     	; 0x1a58 <vfprintf+0xf6>
    19fe:	20 ed       	ldi	r18, 0xD0	; 208
    1a00:	28 0f       	add	r18, r24
    1a02:	2a 30       	cpi	r18, 0x0A	; 10
    1a04:	40 f0       	brcs	.+16     	; 0x1a16 <vfprintf+0xb4>
    1a06:	8e 32       	cpi	r24, 0x2E	; 46
    1a08:	b9 f4       	brne	.+46     	; 0x1a38 <vfprintf+0xd6>
    1a0a:	36 fc       	sbrc	r3, 6
    1a0c:	81 c1       	rjmp	.+770    	; 0x1d10 <vfprintf+0x3ae>
    1a0e:	23 2d       	mov	r18, r3
    1a10:	20 64       	ori	r18, 0x40	; 64
    1a12:	32 2e       	mov	r3, r18
    1a14:	19 c0       	rjmp	.+50     	; 0x1a48 <vfprintf+0xe6>
    1a16:	36 fe       	sbrs	r3, 6
    1a18:	06 c0       	rjmp	.+12     	; 0x1a26 <vfprintf+0xc4>
    1a1a:	8a e0       	ldi	r24, 0x0A	; 10
    1a1c:	98 9e       	mul	r9, r24
    1a1e:	20 0d       	add	r18, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	92 2e       	mov	r9, r18
    1a24:	11 c0       	rjmp	.+34     	; 0x1a48 <vfprintf+0xe6>
    1a26:	ea e0       	ldi	r30, 0x0A	; 10
    1a28:	2e 9e       	mul	r2, r30
    1a2a:	20 0d       	add	r18, r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	22 2e       	mov	r2, r18
    1a30:	f3 2d       	mov	r31, r3
    1a32:	f0 62       	ori	r31, 0x20	; 32
    1a34:	3f 2e       	mov	r3, r31
    1a36:	08 c0       	rjmp	.+16     	; 0x1a48 <vfprintf+0xe6>
    1a38:	8c 36       	cpi	r24, 0x6C	; 108
    1a3a:	21 f4       	brne	.+8      	; 0x1a44 <vfprintf+0xe2>
    1a3c:	83 2d       	mov	r24, r3
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	38 2e       	mov	r3, r24
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <vfprintf+0xe6>
    1a44:	88 36       	cpi	r24, 0x68	; 104
    1a46:	41 f4       	brne	.+16     	; 0x1a58 <vfprintf+0xf6>
    1a48:	f7 01       	movw	r30, r14
    1a4a:	93 fd       	sbrc	r25, 3
    1a4c:	85 91       	lpm	r24, Z+
    1a4e:	93 ff       	sbrs	r25, 3
    1a50:	81 91       	ld	r24, Z+
    1a52:	7f 01       	movw	r14, r30
    1a54:	81 11       	cpse	r24, r1
    1a56:	b3 cf       	rjmp	.-154    	; 0x19be <vfprintf+0x5c>
    1a58:	98 2f       	mov	r25, r24
    1a5a:	9f 7d       	andi	r25, 0xDF	; 223
    1a5c:	95 54       	subi	r25, 0x45	; 69
    1a5e:	93 30       	cpi	r25, 0x03	; 3
    1a60:	28 f4       	brcc	.+10     	; 0x1a6c <vfprintf+0x10a>
    1a62:	0c 5f       	subi	r16, 0xFC	; 252
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	9f e3       	ldi	r25, 0x3F	; 63
    1a68:	99 83       	std	Y+1, r25	; 0x01
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <vfprintf+0x124>
    1a6c:	83 36       	cpi	r24, 0x63	; 99
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <vfprintf+0x11a>
    1a70:	83 37       	cpi	r24, 0x73	; 115
    1a72:	71 f0       	breq	.+28     	; 0x1a90 <vfprintf+0x12e>
    1a74:	83 35       	cpi	r24, 0x53	; 83
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <vfprintf+0x118>
    1a78:	59 c0       	rjmp	.+178    	; 0x1b2c <vfprintf+0x1ca>
    1a7a:	21 c0       	rjmp	.+66     	; 0x1abe <vfprintf+0x15c>
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	80 81       	ld	r24, Z
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	0e 5f       	subi	r16, 0xFE	; 254
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	88 24       	eor	r8, r8
    1a88:	83 94       	inc	r8
    1a8a:	91 2c       	mov	r9, r1
    1a8c:	53 01       	movw	r10, r6
    1a8e:	13 c0       	rjmp	.+38     	; 0x1ab6 <vfprintf+0x154>
    1a90:	28 01       	movw	r4, r16
    1a92:	f2 e0       	ldi	r31, 0x02	; 2
    1a94:	4f 0e       	add	r4, r31
    1a96:	51 1c       	adc	r5, r1
    1a98:	f8 01       	movw	r30, r16
    1a9a:	a0 80       	ld	r10, Z
    1a9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a9e:	36 fe       	sbrs	r3, 6
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <vfprintf+0x146>
    1aa2:	69 2d       	mov	r22, r9
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <vfprintf+0x14a>
    1aa8:	6f ef       	ldi	r22, 0xFF	; 255
    1aaa:	7f ef       	ldi	r23, 0xFF	; 255
    1aac:	c5 01       	movw	r24, r10
    1aae:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <strnlen>
    1ab2:	4c 01       	movw	r8, r24
    1ab4:	82 01       	movw	r16, r4
    1ab6:	f3 2d       	mov	r31, r3
    1ab8:	ff 77       	andi	r31, 0x7F	; 127
    1aba:	3f 2e       	mov	r3, r31
    1abc:	16 c0       	rjmp	.+44     	; 0x1aea <vfprintf+0x188>
    1abe:	28 01       	movw	r4, r16
    1ac0:	22 e0       	ldi	r18, 0x02	; 2
    1ac2:	42 0e       	add	r4, r18
    1ac4:	51 1c       	adc	r5, r1
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	a0 80       	ld	r10, Z
    1aca:	b1 80       	ldd	r11, Z+1	; 0x01
    1acc:	36 fe       	sbrs	r3, 6
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <vfprintf+0x174>
    1ad0:	69 2d       	mov	r22, r9
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <vfprintf+0x178>
    1ad6:	6f ef       	ldi	r22, 0xFF	; 255
    1ad8:	7f ef       	ldi	r23, 0xFF	; 255
    1ada:	c5 01       	movw	r24, r10
    1adc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <strnlen_P>
    1ae0:	4c 01       	movw	r8, r24
    1ae2:	f3 2d       	mov	r31, r3
    1ae4:	f0 68       	ori	r31, 0x80	; 128
    1ae6:	3f 2e       	mov	r3, r31
    1ae8:	82 01       	movw	r16, r4
    1aea:	33 fc       	sbrc	r3, 3
    1aec:	1b c0       	rjmp	.+54     	; 0x1b24 <vfprintf+0x1c2>
    1aee:	82 2d       	mov	r24, r2
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	88 16       	cp	r8, r24
    1af4:	99 06       	cpc	r9, r25
    1af6:	b0 f4       	brcc	.+44     	; 0x1b24 <vfprintf+0x1c2>
    1af8:	b6 01       	movw	r22, r12
    1afa:	80 e2       	ldi	r24, 0x20	; 32
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1b02:	2a 94       	dec	r2
    1b04:	f4 cf       	rjmp	.-24     	; 0x1aee <vfprintf+0x18c>
    1b06:	f5 01       	movw	r30, r10
    1b08:	37 fc       	sbrc	r3, 7
    1b0a:	85 91       	lpm	r24, Z+
    1b0c:	37 fe       	sbrs	r3, 7
    1b0e:	81 91       	ld	r24, Z+
    1b10:	5f 01       	movw	r10, r30
    1b12:	b6 01       	movw	r22, r12
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1b1a:	21 10       	cpse	r2, r1
    1b1c:	2a 94       	dec	r2
    1b1e:	21 e0       	ldi	r18, 0x01	; 1
    1b20:	82 1a       	sub	r8, r18
    1b22:	91 08       	sbc	r9, r1
    1b24:	81 14       	cp	r8, r1
    1b26:	91 04       	cpc	r9, r1
    1b28:	71 f7       	brne	.-36     	; 0x1b06 <vfprintf+0x1a4>
    1b2a:	e8 c0       	rjmp	.+464    	; 0x1cfc <vfprintf+0x39a>
    1b2c:	84 36       	cpi	r24, 0x64	; 100
    1b2e:	11 f0       	breq	.+4      	; 0x1b34 <vfprintf+0x1d2>
    1b30:	89 36       	cpi	r24, 0x69	; 105
    1b32:	41 f5       	brne	.+80     	; 0x1b84 <vfprintf+0x222>
    1b34:	f8 01       	movw	r30, r16
    1b36:	37 fe       	sbrs	r3, 7
    1b38:	07 c0       	rjmp	.+14     	; 0x1b48 <vfprintf+0x1e6>
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	0c 5f       	subi	r16, 0xFC	; 252
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	08 c0       	rjmp	.+16     	; 0x1b58 <vfprintf+0x1f6>
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	07 2e       	mov	r0, r23
    1b4e:	00 0c       	add	r0, r0
    1b50:	88 0b       	sbc	r24, r24
    1b52:	99 0b       	sbc	r25, r25
    1b54:	0e 5f       	subi	r16, 0xFE	; 254
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	f3 2d       	mov	r31, r3
    1b5a:	ff 76       	andi	r31, 0x6F	; 111
    1b5c:	3f 2e       	mov	r3, r31
    1b5e:	97 ff       	sbrs	r25, 7
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <vfprintf+0x212>
    1b62:	90 95       	com	r25
    1b64:	80 95       	com	r24
    1b66:	70 95       	com	r23
    1b68:	61 95       	neg	r22
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	f0 68       	ori	r31, 0x80	; 128
    1b72:	3f 2e       	mov	r3, r31
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	a3 01       	movw	r20, r6
    1b7a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__ultoa_invert>
    1b7e:	88 2e       	mov	r8, r24
    1b80:	86 18       	sub	r8, r6
    1b82:	45 c0       	rjmp	.+138    	; 0x1c0e <vfprintf+0x2ac>
    1b84:	85 37       	cpi	r24, 0x75	; 117
    1b86:	31 f4       	brne	.+12     	; 0x1b94 <vfprintf+0x232>
    1b88:	23 2d       	mov	r18, r3
    1b8a:	2f 7e       	andi	r18, 0xEF	; 239
    1b8c:	b2 2e       	mov	r11, r18
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	25 c0       	rjmp	.+74     	; 0x1bde <vfprintf+0x27c>
    1b94:	93 2d       	mov	r25, r3
    1b96:	99 7f       	andi	r25, 0xF9	; 249
    1b98:	b9 2e       	mov	r11, r25
    1b9a:	8f 36       	cpi	r24, 0x6F	; 111
    1b9c:	c1 f0       	breq	.+48     	; 0x1bce <vfprintf+0x26c>
    1b9e:	18 f4       	brcc	.+6      	; 0x1ba6 <vfprintf+0x244>
    1ba0:	88 35       	cpi	r24, 0x58	; 88
    1ba2:	79 f0       	breq	.+30     	; 0x1bc2 <vfprintf+0x260>
    1ba4:	b5 c0       	rjmp	.+362    	; 0x1d10 <vfprintf+0x3ae>
    1ba6:	80 37       	cpi	r24, 0x70	; 112
    1ba8:	19 f0       	breq	.+6      	; 0x1bb0 <vfprintf+0x24e>
    1baa:	88 37       	cpi	r24, 0x78	; 120
    1bac:	21 f0       	breq	.+8      	; 0x1bb6 <vfprintf+0x254>
    1bae:	b0 c0       	rjmp	.+352    	; 0x1d10 <vfprintf+0x3ae>
    1bb0:	e9 2f       	mov	r30, r25
    1bb2:	e0 61       	ori	r30, 0x10	; 16
    1bb4:	be 2e       	mov	r11, r30
    1bb6:	b4 fe       	sbrs	r11, 4
    1bb8:	0d c0       	rjmp	.+26     	; 0x1bd4 <vfprintf+0x272>
    1bba:	fb 2d       	mov	r31, r11
    1bbc:	f4 60       	ori	r31, 0x04	; 4
    1bbe:	bf 2e       	mov	r11, r31
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <vfprintf+0x272>
    1bc2:	34 fe       	sbrs	r3, 4
    1bc4:	0a c0       	rjmp	.+20     	; 0x1bda <vfprintf+0x278>
    1bc6:	29 2f       	mov	r18, r25
    1bc8:	26 60       	ori	r18, 0x06	; 6
    1bca:	b2 2e       	mov	r11, r18
    1bcc:	06 c0       	rjmp	.+12     	; 0x1bda <vfprintf+0x278>
    1bce:	28 e0       	ldi	r18, 0x08	; 8
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <vfprintf+0x27c>
    1bd4:	20 e1       	ldi	r18, 0x10	; 16
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <vfprintf+0x27c>
    1bda:	20 e1       	ldi	r18, 0x10	; 16
    1bdc:	32 e0       	ldi	r19, 0x02	; 2
    1bde:	f8 01       	movw	r30, r16
    1be0:	b7 fe       	sbrs	r11, 7
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <vfprintf+0x290>
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	0c 5f       	subi	r16, 0xFC	; 252
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <vfprintf+0x29c>
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 5f       	subi	r16, 0xFE	; 254
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfe:	a3 01       	movw	r20, r6
    1c00:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__ultoa_invert>
    1c04:	88 2e       	mov	r8, r24
    1c06:	86 18       	sub	r8, r6
    1c08:	fb 2d       	mov	r31, r11
    1c0a:	ff 77       	andi	r31, 0x7F	; 127
    1c0c:	3f 2e       	mov	r3, r31
    1c0e:	36 fe       	sbrs	r3, 6
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <vfprintf+0x2ca>
    1c12:	23 2d       	mov	r18, r3
    1c14:	2e 7f       	andi	r18, 0xFE	; 254
    1c16:	a2 2e       	mov	r10, r18
    1c18:	89 14       	cp	r8, r9
    1c1a:	58 f4       	brcc	.+22     	; 0x1c32 <vfprintf+0x2d0>
    1c1c:	34 fe       	sbrs	r3, 4
    1c1e:	0b c0       	rjmp	.+22     	; 0x1c36 <vfprintf+0x2d4>
    1c20:	32 fc       	sbrc	r3, 2
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <vfprintf+0x2d4>
    1c24:	83 2d       	mov	r24, r3
    1c26:	8e 7e       	andi	r24, 0xEE	; 238
    1c28:	a8 2e       	mov	r10, r24
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <vfprintf+0x2d4>
    1c2c:	b8 2c       	mov	r11, r8
    1c2e:	a3 2c       	mov	r10, r3
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <vfprintf+0x2d6>
    1c32:	b8 2c       	mov	r11, r8
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <vfprintf+0x2d6>
    1c36:	b9 2c       	mov	r11, r9
    1c38:	a4 fe       	sbrs	r10, 4
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <vfprintf+0x2f8>
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e8 0d       	add	r30, r8
    1c40:	f1 1d       	adc	r31, r1
    1c42:	80 81       	ld	r24, Z
    1c44:	80 33       	cpi	r24, 0x30	; 48
    1c46:	21 f4       	brne	.+8      	; 0x1c50 <vfprintf+0x2ee>
    1c48:	9a 2d       	mov	r25, r10
    1c4a:	99 7e       	andi	r25, 0xE9	; 233
    1c4c:	a9 2e       	mov	r10, r25
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <vfprintf+0x300>
    1c50:	a2 fe       	sbrs	r10, 2
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <vfprintf+0x2fe>
    1c54:	b3 94       	inc	r11
    1c56:	b3 94       	inc	r11
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <vfprintf+0x300>
    1c5a:	8a 2d       	mov	r24, r10
    1c5c:	86 78       	andi	r24, 0x86	; 134
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <vfprintf+0x300>
    1c60:	b3 94       	inc	r11
    1c62:	a3 fc       	sbrc	r10, 3
    1c64:	11 c0       	rjmp	.+34     	; 0x1c88 <vfprintf+0x326>
    1c66:	a0 fe       	sbrs	r10, 0
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <vfprintf+0x314>
    1c6a:	b2 14       	cp	r11, r2
    1c6c:	88 f4       	brcc	.+34     	; 0x1c90 <vfprintf+0x32e>
    1c6e:	28 0c       	add	r2, r8
    1c70:	92 2c       	mov	r9, r2
    1c72:	9b 18       	sub	r9, r11
    1c74:	0e c0       	rjmp	.+28     	; 0x1c92 <vfprintf+0x330>
    1c76:	b2 14       	cp	r11, r2
    1c78:	60 f4       	brcc	.+24     	; 0x1c92 <vfprintf+0x330>
    1c7a:	b6 01       	movw	r22, r12
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1c84:	b3 94       	inc	r11
    1c86:	f7 cf       	rjmp	.-18     	; 0x1c76 <vfprintf+0x314>
    1c88:	b2 14       	cp	r11, r2
    1c8a:	18 f4       	brcc	.+6      	; 0x1c92 <vfprintf+0x330>
    1c8c:	2b 18       	sub	r2, r11
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <vfprintf+0x332>
    1c90:	98 2c       	mov	r9, r8
    1c92:	21 2c       	mov	r2, r1
    1c94:	a4 fe       	sbrs	r10, 4
    1c96:	10 c0       	rjmp	.+32     	; 0x1cb8 <vfprintf+0x356>
    1c98:	b6 01       	movw	r22, r12
    1c9a:	80 e3       	ldi	r24, 0x30	; 48
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1ca2:	a2 fe       	sbrs	r10, 2
    1ca4:	17 c0       	rjmp	.+46     	; 0x1cd4 <vfprintf+0x372>
    1ca6:	a1 fc       	sbrc	r10, 1
    1ca8:	03 c0       	rjmp	.+6      	; 0x1cb0 <vfprintf+0x34e>
    1caa:	88 e7       	ldi	r24, 0x78	; 120
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <vfprintf+0x352>
    1cb0:	88 e5       	ldi	r24, 0x58	; 88
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	0c c0       	rjmp	.+24     	; 0x1cd0 <vfprintf+0x36e>
    1cb8:	8a 2d       	mov	r24, r10
    1cba:	86 78       	andi	r24, 0x86	; 134
    1cbc:	59 f0       	breq	.+22     	; 0x1cd4 <vfprintf+0x372>
    1cbe:	a1 fe       	sbrs	r10, 1
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <vfprintf+0x364>
    1cc2:	8b e2       	ldi	r24, 0x2B	; 43
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <vfprintf+0x366>
    1cc6:	80 e2       	ldi	r24, 0x20	; 32
    1cc8:	a7 fc       	sbrc	r10, 7
    1cca:	8d e2       	ldi	r24, 0x2D	; 45
    1ccc:	b6 01       	movw	r22, r12
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1cd4:	89 14       	cp	r8, r9
    1cd6:	38 f4       	brcc	.+14     	; 0x1ce6 <vfprintf+0x384>
    1cd8:	b6 01       	movw	r22, r12
    1cda:	80 e3       	ldi	r24, 0x30	; 48
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1ce2:	9a 94       	dec	r9
    1ce4:	f7 cf       	rjmp	.-18     	; 0x1cd4 <vfprintf+0x372>
    1ce6:	8a 94       	dec	r8
    1ce8:	f3 01       	movw	r30, r6
    1cea:	e8 0d       	add	r30, r8
    1cec:	f1 1d       	adc	r31, r1
    1cee:	80 81       	ld	r24, Z
    1cf0:	b6 01       	movw	r22, r12
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1cf8:	81 10       	cpse	r8, r1
    1cfa:	f5 cf       	rjmp	.-22     	; 0x1ce6 <vfprintf+0x384>
    1cfc:	22 20       	and	r2, r2
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <vfprintf+0x3a0>
    1d00:	42 ce       	rjmp	.-892    	; 0x1986 <vfprintf+0x24>
    1d02:	b6 01       	movw	r22, r12
    1d04:	80 e2       	ldi	r24, 0x20	; 32
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1d0c:	2a 94       	dec	r2
    1d0e:	f6 cf       	rjmp	.-20     	; 0x1cfc <vfprintf+0x39a>
    1d10:	f6 01       	movw	r30, r12
    1d12:	86 81       	ldd	r24, Z+6	; 0x06
    1d14:	97 81       	ldd	r25, Z+7	; 0x07
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x3ba>
    1d18:	8f ef       	ldi	r24, 0xFF	; 255
    1d1a:	9f ef       	ldi	r25, 0xFF	; 255
    1d1c:	2b 96       	adiw	r28, 0x0b	; 11
    1d1e:	e2 e1       	ldi	r30, 0x12	; 18
    1d20:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__epilogue_restores__>

00001d24 <calloc>:
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	86 9f       	mul	r24, r22
    1d2e:	80 01       	movw	r16, r0
    1d30:	87 9f       	mul	r24, r23
    1d32:	10 0d       	add	r17, r0
    1d34:	96 9f       	mul	r25, r22
    1d36:	10 0d       	add	r17, r0
    1d38:	11 24       	eor	r1, r1
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <malloc>
    1d40:	ec 01       	movw	r28, r24
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	29 f0       	breq	.+10     	; 0x1d50 <calloc+0x2c>
    1d46:	a8 01       	movw	r20, r16
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <memset>
    1d50:	ce 01       	movw	r24, r28
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	08 95       	ret

00001d5c <strnlen_P>:
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	05 90       	lpm	r0, Z+
    1d60:	61 50       	subi	r22, 0x01	; 1
    1d62:	70 40       	sbci	r23, 0x00	; 0
    1d64:	01 10       	cpse	r0, r1
    1d66:	d8 f7       	brcc	.-10     	; 0x1d5e <strnlen_P+0x2>
    1d68:	80 95       	com	r24
    1d6a:	90 95       	com	r25
    1d6c:	8e 0f       	add	r24, r30
    1d6e:	9f 1f       	adc	r25, r31
    1d70:	08 95       	ret

00001d72 <memset>:
    1d72:	dc 01       	movw	r26, r24
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <memset+0x6>
    1d76:	6d 93       	st	X+, r22
    1d78:	41 50       	subi	r20, 0x01	; 1
    1d7a:	50 40       	sbci	r21, 0x00	; 0
    1d7c:	e0 f7       	brcc	.-8      	; 0x1d76 <memset+0x4>
    1d7e:	08 95       	ret

00001d80 <strnlen>:
    1d80:	fc 01       	movw	r30, r24
    1d82:	61 50       	subi	r22, 0x01	; 1
    1d84:	70 40       	sbci	r23, 0x00	; 0
    1d86:	01 90       	ld	r0, Z+
    1d88:	01 10       	cpse	r0, r1
    1d8a:	d8 f7       	brcc	.-10     	; 0x1d82 <strnlen+0x2>
    1d8c:	80 95       	com	r24
    1d8e:	90 95       	com	r25
    1d90:	8e 0f       	add	r24, r30
    1d92:	9f 1f       	adc	r25, r31
    1d94:	08 95       	ret

00001d96 <fputc>:
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	fb 01       	movw	r30, r22
    1da0:	23 81       	ldd	r18, Z+3	; 0x03
    1da2:	21 fd       	sbrc	r18, 1
    1da4:	03 c0       	rjmp	.+6      	; 0x1dac <fputc+0x16>
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	2c c0       	rjmp	.+88     	; 0x1e04 <fputc+0x6e>
    1dac:	22 ff       	sbrs	r18, 2
    1dae:	16 c0       	rjmp	.+44     	; 0x1ddc <fputc+0x46>
    1db0:	46 81       	ldd	r20, Z+6	; 0x06
    1db2:	57 81       	ldd	r21, Z+7	; 0x07
    1db4:	24 81       	ldd	r18, Z+4	; 0x04
    1db6:	35 81       	ldd	r19, Z+5	; 0x05
    1db8:	42 17       	cp	r20, r18
    1dba:	53 07       	cpc	r21, r19
    1dbc:	44 f4       	brge	.+16     	; 0x1dce <fputc+0x38>
    1dbe:	a0 81       	ld	r26, Z
    1dc0:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc2:	9d 01       	movw	r18, r26
    1dc4:	2f 5f       	subi	r18, 0xFF	; 255
    1dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc8:	31 83       	std	Z+1, r19	; 0x01
    1dca:	20 83       	st	Z, r18
    1dcc:	8c 93       	st	X, r24
    1dce:	26 81       	ldd	r18, Z+6	; 0x06
    1dd0:	37 81       	ldd	r19, Z+7	; 0x07
    1dd2:	2f 5f       	subi	r18, 0xFF	; 255
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	37 83       	std	Z+7, r19	; 0x07
    1dd8:	26 83       	std	Z+6, r18	; 0x06
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <fputc+0x6e>
    1ddc:	8b 01       	movw	r16, r22
    1dde:	ec 01       	movw	r28, r24
    1de0:	fb 01       	movw	r30, r22
    1de2:	00 84       	ldd	r0, Z+8	; 0x08
    1de4:	f1 85       	ldd	r31, Z+9	; 0x09
    1de6:	e0 2d       	mov	r30, r0
    1de8:	09 95       	icall
    1dea:	89 2b       	or	r24, r25
    1dec:	e1 f6       	brne	.-72     	; 0x1da6 <fputc+0x10>
    1dee:	d8 01       	movw	r26, r16
    1df0:	16 96       	adiw	r26, 0x06	; 6
    1df2:	8d 91       	ld	r24, X+
    1df4:	9c 91       	ld	r25, X
    1df6:	17 97       	sbiw	r26, 0x07	; 7
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	17 96       	adiw	r26, 0x07	; 7
    1dfc:	9c 93       	st	X, r25
    1dfe:	8e 93       	st	-X, r24
    1e00:	16 97       	sbiw	r26, 0x06	; 6
    1e02:	ce 01       	movw	r24, r28
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	08 95       	ret

00001e0e <__ultoa_invert>:
    1e0e:	fa 01       	movw	r30, r20
    1e10:	aa 27       	eor	r26, r26
    1e12:	28 30       	cpi	r18, 0x08	; 8
    1e14:	51 f1       	breq	.+84     	; 0x1e6a <__ultoa_invert+0x5c>
    1e16:	20 31       	cpi	r18, 0x10	; 16
    1e18:	81 f1       	breq	.+96     	; 0x1e7a <__ultoa_invert+0x6c>
    1e1a:	e8 94       	clt
    1e1c:	6f 93       	push	r22
    1e1e:	6e 7f       	andi	r22, 0xFE	; 254
    1e20:	6e 5f       	subi	r22, 0xFE	; 254
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	8f 4f       	sbci	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	af 4f       	sbci	r26, 0xFF	; 255
    1e2a:	b1 e0       	ldi	r27, 0x01	; 1
    1e2c:	3e d0       	rcall	.+124    	; 0x1eaa <__ultoa_invert+0x9c>
    1e2e:	b4 e0       	ldi	r27, 0x04	; 4
    1e30:	3c d0       	rcall	.+120    	; 0x1eaa <__ultoa_invert+0x9c>
    1e32:	67 0f       	add	r22, r23
    1e34:	78 1f       	adc	r23, r24
    1e36:	89 1f       	adc	r24, r25
    1e38:	9a 1f       	adc	r25, r26
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	68 0f       	add	r22, r24
    1e3e:	79 1f       	adc	r23, r25
    1e40:	8a 1f       	adc	r24, r26
    1e42:	91 1d       	adc	r25, r1
    1e44:	a1 1d       	adc	r26, r1
    1e46:	6a 0f       	add	r22, r26
    1e48:	71 1d       	adc	r23, r1
    1e4a:	81 1d       	adc	r24, r1
    1e4c:	91 1d       	adc	r25, r1
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	20 d0       	rcall	.+64     	; 0x1e92 <__ultoa_invert+0x84>
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <__ultoa_invert+0x48>
    1e54:	68 94       	set
    1e56:	3f 91       	pop	r19
    1e58:	2a e0       	ldi	r18, 0x0A	; 10
    1e5a:	26 9f       	mul	r18, r22
    1e5c:	11 24       	eor	r1, r1
    1e5e:	30 19       	sub	r19, r0
    1e60:	30 5d       	subi	r19, 0xD0	; 208
    1e62:	31 93       	st	Z+, r19
    1e64:	de f6       	brtc	.-74     	; 0x1e1c <__ultoa_invert+0xe>
    1e66:	cf 01       	movw	r24, r30
    1e68:	08 95       	ret
    1e6a:	46 2f       	mov	r20, r22
    1e6c:	47 70       	andi	r20, 0x07	; 7
    1e6e:	40 5d       	subi	r20, 0xD0	; 208
    1e70:	41 93       	st	Z+, r20
    1e72:	b3 e0       	ldi	r27, 0x03	; 3
    1e74:	0f d0       	rcall	.+30     	; 0x1e94 <__ultoa_invert+0x86>
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__ultoa_invert+0x5c>
    1e78:	f6 cf       	rjmp	.-20     	; 0x1e66 <__ultoa_invert+0x58>
    1e7a:	46 2f       	mov	r20, r22
    1e7c:	4f 70       	andi	r20, 0x0F	; 15
    1e7e:	40 5d       	subi	r20, 0xD0	; 208
    1e80:	4a 33       	cpi	r20, 0x3A	; 58
    1e82:	18 f0       	brcs	.+6      	; 0x1e8a <__ultoa_invert+0x7c>
    1e84:	49 5d       	subi	r20, 0xD9	; 217
    1e86:	31 fd       	sbrc	r19, 1
    1e88:	40 52       	subi	r20, 0x20	; 32
    1e8a:	41 93       	st	Z+, r20
    1e8c:	02 d0       	rcall	.+4      	; 0x1e92 <__ultoa_invert+0x84>
    1e8e:	a9 f7       	brne	.-22     	; 0x1e7a <__ultoa_invert+0x6c>
    1e90:	ea cf       	rjmp	.-44     	; 0x1e66 <__ultoa_invert+0x58>
    1e92:	b4 e0       	ldi	r27, 0x04	; 4
    1e94:	a6 95       	lsr	r26
    1e96:	97 95       	ror	r25
    1e98:	87 95       	ror	r24
    1e9a:	77 95       	ror	r23
    1e9c:	67 95       	ror	r22
    1e9e:	ba 95       	dec	r27
    1ea0:	c9 f7       	brne	.-14     	; 0x1e94 <__ultoa_invert+0x86>
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	61 05       	cpc	r22, r1
    1ea6:	71 05       	cpc	r23, r1
    1ea8:	08 95       	ret
    1eaa:	9b 01       	movw	r18, r22
    1eac:	ac 01       	movw	r20, r24
    1eae:	0a 2e       	mov	r0, r26
    1eb0:	06 94       	lsr	r0
    1eb2:	57 95       	ror	r21
    1eb4:	47 95       	ror	r20
    1eb6:	37 95       	ror	r19
    1eb8:	27 95       	ror	r18
    1eba:	ba 95       	dec	r27
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__ultoa_invert+0xa2>
    1ebe:	62 0f       	add	r22, r18
    1ec0:	73 1f       	adc	r23, r19
    1ec2:	84 1f       	adc	r24, r20
    1ec4:	95 1f       	adc	r25, r21
    1ec6:	a0 1d       	adc	r26, r0
    1ec8:	08 95       	ret

00001eca <__prologue_saves__>:
    1eca:	2f 92       	push	r2
    1ecc:	3f 92       	push	r3
    1ece:	4f 92       	push	r4
    1ed0:	5f 92       	push	r5
    1ed2:	6f 92       	push	r6
    1ed4:	7f 92       	push	r7
    1ed6:	8f 92       	push	r8
    1ed8:	9f 92       	push	r9
    1eda:	af 92       	push	r10
    1edc:	bf 92       	push	r11
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	ca 1b       	sub	r28, r26
    1ef4:	db 0b       	sbc	r29, r27
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	09 94       	ijmp

00001f02 <__epilogue_restores__>:
    1f02:	2a 88       	ldd	r2, Y+18	; 0x12
    1f04:	39 88       	ldd	r3, Y+17	; 0x11
    1f06:	48 88       	ldd	r4, Y+16	; 0x10
    1f08:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f10:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f12:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f14:	b9 84       	ldd	r11, Y+9	; 0x09
    1f16:	c8 84       	ldd	r12, Y+8	; 0x08
    1f18:	df 80       	ldd	r13, Y+7	; 0x07
    1f1a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f1c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f20:	1b 81       	ldd	r17, Y+3	; 0x03
    1f22:	aa 81       	ldd	r26, Y+2	; 0x02
    1f24:	b9 81       	ldd	r27, Y+1	; 0x01
    1f26:	ce 0f       	add	r28, r30
    1f28:	d1 1d       	adc	r29, r1
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	ed 01       	movw	r28, r26
    1f36:	08 95       	ret

00001f38 <_exit>:
    1f38:	f8 94       	cli

00001f3a <__stop_program>:
    1f3a:	ff cf       	rjmp	.-2      	; 0x1f3a <__stop_program>
