
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  000014cc  00001560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800224  00800224  00001684  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ae3  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001216  00000000  00000000  0000449f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001554  00000000  00000000  000056b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f4  00000000  00000000  00006c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a77  00000000  00000000  00007300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c4  00000000  00000000  00007d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000943b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_17>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec ec       	ldi	r30, 0xCC	; 204
      84:	f4 e1       	ldi	r31, 0x14	; 20
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 32       	cpi	r26, 0x24	; 36
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a4 e2       	ldi	r26, 0x24	; 36
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a5 34       	cpi	r26, 0x45	; 69
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 9a 01 	call	0x334	; 0x334 <main>
      a6:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:



void adc_init(void){
	// Configure PD5 pin as output
	DDRD |= (1 << DDD5);
      ae:	8d 9a       	sbi	0x11, 5	; 17

	// Timer without prescaling
	TCCR1B &= ~(7 << CS10); // Set CS10, CS11, CS12 to 0
      b0:	8e b5       	in	r24, 0x2e	; 46
      b2:	88 7f       	andi	r24, 0xF8	; 248
      b4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10); // Set CS10 to 1
      b6:	8e b5       	in	r24, 0x2e	; 46
      b8:	81 60       	ori	r24, 0x01	; 1
      ba:	8e bd       	out	0x2e, r24	; 46

	// Waveform generation mode = CTC, Top = OCR0
	TCCR1A &= ~(1 << WGM10); // WGM10 = 0
      bc:	8f b5       	in	r24, 0x2f	; 47
      be:	8e 7f       	andi	r24, 0xFE	; 254
      c0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1 << WGM11); // WGM11 = 0
      c2:	8f b5       	in	r24, 0x2f	; 47
      c4:	8d 7f       	andi	r24, 0xFD	; 253
      c6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); // WGM12 = 1
      c8:	8e b5       	in	r24, 0x2e	; 46
      ca:	88 60       	ori	r24, 0x08	; 8
      cc:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1 << WGM13); // WGM13 = 0
      ce:	8e b5       	in	r24, 0x2e	; 46
      d0:	8f 7e       	andi	r24, 0xEF	; 239
      d2:	8e bd       	out	0x2e, r24	; 46
	
	// Toggles pin PD5 when TCNT0 = OCR0
	TCCR1A &= ~(1 << COM1A1); // COM1A1 = 0
      d4:	8f b5       	in	r24, 0x2f	; 47
      d6:	8f 77       	andi	r24, 0x7F	; 127
      d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A0); // COM1A0 = 1
      da:	8f b5       	in	r24, 0x2f	; 47
      dc:	80 64       	ori	r24, 0x40	; 64
      de:	8f bd       	out	0x2f, r24	; 47
	
	// Defines the top value for the counter
	OCR1A = 1;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	9b bd       	out	0x2b, r25	; 43
      e6:	8a bd       	out	0x2a, r24	; 42
      e8:	08 95       	ret

000000ea <adc_rd>:
	
	
}

volatile uint8_t adc_rd(uint8_t channel){
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	08 2f       	mov	r16, r24
		
	xmem_write(channel, OFFSET_ADC);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	74 e0       	ldi	r23, 0x04	; 4
      fa:	0e 94 64 05 	call	0xac8	; 0xac8 <xmem_write>
	_delay_ms((9*4*2/F_CPU));
	
	uint8_t channel_data;
	
	for (int ch = 0; ch < channel; ch++){
      fe:	10 e0       	ldi	r17, 0x00	; 0
     100:	10 16       	cp	r1, r16
     102:	11 06       	cpc	r1, r17
     104:	5c f4       	brge	.+22     	; 0x11c <adc_rd+0x32>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
		channel_data = xmem_read(OFFSET_ADC);
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	94 e0       	ldi	r25, 0x04	; 4
     10e:	0e 94 68 05 	call	0xad0	; 0xad0 <xmem_read>
     112:	f8 2e       	mov	r15, r24
	xmem_write(channel, OFFSET_ADC);
	_delay_ms((9*4*2/F_CPU));
	
	uint8_t channel_data;
	
	for (int ch = 0; ch < channel; ch++){
     114:	21 96       	adiw	r28, 0x01	; 1
     116:	c0 17       	cp	r28, r16
     118:	d1 07       	cpc	r29, r17
     11a:	b9 f7       	brne	.-18     	; 0x10a <adc_rd+0x20>
		channel_data = xmem_read(OFFSET_ADC);
	}
	
	return channel_data;
}
     11c:	8f 2d       	mov	r24, r15
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	1f 91       	pop	r17
     124:	0f 91       	pop	r16
     126:	ff 90       	pop	r15
     128:	08 95       	ret

0000012a <CAN_send_message>:
		// Clear receive flag for receive buffer 1. 
		READ_B1_MESSAGE = 0;
		
		printf("Received message: %x \r\n", p_msg->data[0]);
	}
}
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	6c 01       	movw	r12, r24
     13a:	fc 01       	movw	r30, r24
     13c:	c0 81       	ld	r28, Z
     13e:	d1 81       	ldd	r29, Z+1	; 0x01
     140:	6c 2f       	mov	r22, r28
     142:	62 95       	swap	r22
     144:	66 0f       	add	r22, r22
     146:	60 7e       	andi	r22, 0xE0	; 224
     148:	42 e3       	ldi	r20, 0x32	; 50
     14a:	80 ee       	ldi	r24, 0xE0	; 224
     14c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
     150:	ce 01       	movw	r24, r28
     152:	96 95       	lsr	r25
     154:	87 95       	ror	r24
     156:	96 95       	lsr	r25
     158:	87 95       	ror	r24
     15a:	96 95       	lsr	r25
     15c:	87 95       	ror	r24
     15e:	61 e3       	ldi	r22, 0x31	; 49
     160:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_write>
     164:	45 e3       	ldi	r20, 0x35	; 53
     166:	f6 01       	movw	r30, r12
     168:	62 81       	ldd	r22, Z+2	; 0x02
     16a:	8f e0       	ldi	r24, 0x0F	; 15
     16c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
     170:	f6 01       	movw	r30, r12
     172:	82 81       	ldd	r24, Z+2	; 0x02
     174:	88 23       	and	r24, r24
     176:	a9 f0       	breq	.+42     	; 0x1a2 <CAN_send_message+0x78>
     178:	76 01       	movw	r14, r12
     17a:	f3 e0       	ldi	r31, 0x03	; 3
     17c:	ef 0e       	add	r14, r31
     17e:	f1 1c       	adc	r15, r1
     180:	16 e3       	ldi	r17, 0x36	; 54
     182:	c0 e0       	ldi	r28, 0x00	; 0
     184:	d0 e0       	ldi	r29, 0x00	; 0
     186:	61 2f       	mov	r22, r17
     188:	f7 01       	movw	r30, r14
     18a:	81 91       	ld	r24, Z+
     18c:	7f 01       	movw	r14, r30
     18e:	0e 94 c4 01 	call	0x388	; 0x388 <mcp2515_write>
     192:	21 96       	adiw	r28, 0x01	; 1
     194:	1f 5f       	subi	r17, 0xFF	; 255
     196:	f6 01       	movw	r30, r12
     198:	82 81       	ldd	r24, Z+2	; 0x02
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	c8 17       	cp	r28, r24
     19e:	d9 07       	cpc	r29, r25
     1a0:	94 f3       	brlt	.-28     	; 0x186 <CAN_send_message+0x5c>
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <mcp2515_request_to_send>
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	ff 90       	pop	r15
     1ba:	ef 90       	pop	r14
     1bc:	df 90       	pop	r13
     1be:	cf 90       	pop	r12
     1c0:	08 95       	ret

000001c2 <CAN_interrupt_init>:



void CAN_interrupt_init(void){
	// Disable global interrupts
	cli();
     1c2:	f8 94       	cli
	
	// Enable interrupts on MCP for when messages are received in the receive buffers
	mcp2515_bit_modify(0b00000011, 0xFF, MCP_CANINTE);
     1c4:	4b e2       	ldi	r20, 0x2B	; 43
     1c6:	6f ef       	ldi	r22, 0xFF	; 255
     1c8:	83 e0       	ldi	r24, 0x03	; 3
     1ca:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
	
	DDRD &= ~(1 << PD2);
     1ce:	8a 98       	cbi	0x11, 2	; 17
	
	// Interrupt at falling edge of INT0
	MCUCR |= (1 << ISC01);
     1d0:	85 b7       	in	r24, 0x35	; 53
     1d2:	82 60       	ori	r24, 0x02	; 2
     1d4:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     1d6:	85 b7       	in	r24, 0x35	; 53
     1d8:	8e 7f       	andi	r24, 0xFE	; 254
     1da:	85 bf       	out	0x35, r24	; 53

	// Define INT0 as interrupt input
	GICR |= (1 << INT0);
     1dc:	8b b7       	in	r24, 0x3b	; 59
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	8b bf       	out	0x3b, r24	; 59
	
	// Enable global interrupts
	sei();
     1e2:	78 94       	sei
     1e4:	08 95       	ret

000001e6 <CAN_init>:
// Lower priority message
volatile uint8_t READ_B1_MESSAGE = 0;



void CAN_init(uint8_t mode){
     1e6:	cf 93       	push	r28
     1e8:	c8 2f       	mov	r28, r24
	mcp2515_init(); //Config mode
     1ea:	0e 94 1d 02 	call	0x43a	; 0x43a <mcp2515_init>
	CAN_interrupt_init();
     1ee:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <CAN_interrupt_init>
	mcp2515_bit_modify(MODE_MASK, mode, MCP_CANCTRL);
     1f2:	4f e0       	ldi	r20, 0x0F	; 15
     1f4:	6c 2f       	mov	r22, r28
     1f6:	80 ee       	ldi	r24, 0xE0	; 224
     1f8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
}
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <__vector_1>:
	
	// Enable global interrupts
	sei();
}

ISR(INT0_vect){
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	cf 93       	push	r28
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
	uint8_t interrupt_flag = mcp2515_read(MCP_CANINTF);
     224:	8c e2       	ldi	r24, 0x2C	; 44
     226:	0e 94 b2 01 	call	0x364	; 0x364 <mcp2515_read>
     22a:	c8 2f       	mov	r28, r24
	if (interrupt_flag & 0x01){
     22c:	80 ff       	sbrs	r24, 0
     22e:	07 c0       	rjmp	.+14     	; 0x23e <__vector_1+0x3e>
		// Set receive flag for receive buffer 0
		READ_B0_MESSAGE = 1;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <READ_B0_MESSAGE>
		
		// Clear interrupt flag to allow new message reception
		mcp2515_bit_modify(0x01, 0x00, MCP_CANINTF);
     236:	4c e2       	ldi	r20, 0x2C	; 44
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
	}
	if (interrupt_flag & 0x02){
     23e:	c1 ff       	sbrs	r28, 1
     240:	08 c0       	rjmp	.+16     	; 0x252 <__vector_1+0x52>
		// Set receive flag for receive buffer 1
		READ_B1_MESSAGE = 1;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
		
		// Clear interrupt flag to allow new message reception
		mcp2515_bit_modify(0x02, 0x00, MCP_CANINTF);
     248:	4c e2       	ldi	r20, 0x2C	; 44
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
	}
	
}
     252:	ff 91       	pop	r31
     254:	ef 91       	pop	r30
     256:	cf 91       	pop	r28
     258:	bf 91       	pop	r27
     25a:	af 91       	pop	r26
     25c:	9f 91       	pop	r25
     25e:	8f 91       	pop	r24
     260:	7f 91       	pop	r23
     262:	6f 91       	pop	r22
     264:	5f 91       	pop	r21
     266:	4f 91       	pop	r20
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <game_interrupt_enable>:
	TCCR0 = ( 1 << CS02) | ( 1 << CS00); // start with 1024 prescaler
}

void game_interrupt_disable(void){
	// disable
	TIMSK &= ~((1 << TOIE0) | (1 << TOIE1));
     276:	82 e8       	ldi	r24, 0x82	; 130
     278:	89 bf       	out	0x39, r24	; 57
     27a:	12 be       	out	0x32, r1	; 50
     27c:	85 e0       	ldi	r24, 0x05	; 5
     27e:	83 bf       	out	0x33, r24	; 51
     280:	08 95       	ret

00000282 <__vector_17>:
}

ISR(TIMER0_OVF_vect){
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	0f 92       	push	r0
     28a:	11 24       	eor	r1, r1
     28c:	8f 93       	push	r24
     28e:	9f 93       	push	r25

	SEND_GAME_MSG = 1;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <SEND_GAME_MSG+0x1>
     298:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <SEND_GAME_MSG>

	// reset TCNT0
	TCNT0 = 0x00;
     29c:	12 be       	out	0x32, r1	; 50
}
     29e:	9f 91       	pop	r25
     2a0:	8f 91       	pop	r24
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	1f 90       	pop	r1
     2aa:	18 95       	reti

000002ac <game_play>:

void game_play(void){
	if(SEND_GAME_MSG){
     2ac:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <SEND_GAME_MSG>
     2b0:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <SEND_GAME_MSG+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	a1 f1       	breq	.+104    	; 0x320 <game_play+0x74>
		if(START_GAME){
     2b8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <START_GAME>
     2bc:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <START_GAME+0x1>
     2c0:	89 2b       	or	r24, r25
     2c2:	31 f1       	breq	.+76     	; 0x310 <game_play+0x64>
			mov_send_can_message(CAN_JOYSTICK_ID);
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 40 04 	call	0x880	; 0x880 <mov_send_can_message>
			mov_send_can_message(CAN_SLIDER_ID);
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 40 04 	call	0x880	; 0x880 <mov_send_can_message>
			SEND_GAME_MSG = 0; 
     2d4:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <SEND_GAME_MSG+0x1>
     2d8:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <SEND_GAME_MSG>
			
			send_counter++;
     2dc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <send_counter>
     2e0:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <send_counter+0x1>
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <send_counter+0x1>
     2ea:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <send_counter>
			printf("Sendt ganger: %d\r\n", send_counter);
     2ee:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <send_counter>
     2f2:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <send_counter+0x1>
     2f6:	9f 93       	push	r25
     2f8:	8f 93       	push	r24
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	0e 94 33 07 	call	0xe66	; 0xe66 <printf>
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	08 95       	ret
		}
		else{
			printf("Game has not started\r\n");
     310:	89 e1       	ldi	r24, 0x19	; 25
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 49 07 	call	0xe92	; 0xe92 <puts>
			SEND_GAME_MSG = 0; 
     318:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <SEND_GAME_MSG+0x1>
     31c:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <SEND_GAME_MSG>
     320:	08 95       	ret

00000322 <game_set_start_flag>:
		}
	}
}

void game_set_start_flag(void){
	START_GAME = 1; 
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <START_GAME+0x1>
     32a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <START_GAME>
	game_interrupt_enable();
     32e:	0e 94 3b 01 	call	0x276	; 0x276 <game_interrupt_enable>
     332:	08 95       	ret

00000334 <main>:

// -Wl,--defsym=__heap_start=0x801800,--defsym=__heap_end=0x801fff -Wl,--relax

int main(void)
{
	uart_init( MYUBRR );
     334:	8f e1       	ldi	r24, 0x1F	; 31
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 4d 05 	call	0xa9a	; 0xa9a <uart_init>
	xmem_init();
     33c:	0e 94 5a 05 	call	0xab4	; 0xab4 <xmem_init>
	adc_init();
     340:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	mov_init();
     344:	0e 94 47 02 	call	0x48e	; 0x48e <mov_init>
	CAN_init(MODE_NORMAL);
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <CAN_init>
	OLED_init();
     34e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <OLED_init>
	
	//OLED_print("Hello");
	//menu_init();
	//menu_print();
	//
	printf("######## Starting new session ########\r\n");
     352:	8f e2       	ldi	r24, 0x2F	; 47
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0e 94 49 07 	call	0xe92	; 0xe92 <puts>
	can_message test_joystick_message;

	input_j joystick_input;
	//can_message joy_received;

	game_set_start_flag();
     35a:	0e 94 91 01 	call	0x322	; 0x322 <game_set_start_flag>

	while (1) {
		game_play();		
     35e:	0e 94 56 01 	call	0x2ac	; 0x2ac <game_play>
     362:	fd cf       	rjmp	.-6      	; 0x35e <main+0x2a>

00000364 <mcp2515_read>:
	mcp2515_bit_modify(0xFF, CNF1_REG_VALUE, MCP_CNF1); // Modify CNF1.
	
	return 0; 
}

uint8_t mcp2515_read(uint8_t address){
     364:	cf 93       	push	r28
     366:	c8 2f       	mov	r28, r24
	uint8_t result; 
  
	SPI_select();// Select CAN-controller
     368:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_select>
	SPI_send(MCP_READ); //Send read instruction
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_send(address); //Send address
     372:	8c 2f       	mov	r24, r28
     374:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	result = SPI_read();
     378:	0e 94 3a 05 	call	0xa74	; 0xa74 <SPI_read>
     37c:	c8 2f       	mov	r28, r24
  
	SPI_deselect(); // Deselect CAN-controller
     37e:	0e 94 42 05 	call	0xa84	; 0xa84 <SPI_deselect>
  
	return result; 
}
     382:	8c 2f       	mov	r24, r28
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <mcp2515_write>:

void mcp2515_write(uint8_t data, uint8_t address){
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	c8 2f       	mov	r28, r24
     38e:	d6 2f       	mov	r29, r22
	SPI_select();
     390:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_select>
	SPI_send(MCP_WRITE);
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_send(address);
     39a:	8d 2f       	mov	r24, r29
     39c:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_send(data);
     3a0:	8c 2f       	mov	r24, r28
     3a2:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_deselect();
     3a6:	0e 94 42 05 	call	0xa84	; 0xa84 <SPI_deselect>
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	08 95       	ret

000003b0 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int buff_tx0, int buff_tx1, int buff_tx2){
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	7c 01       	movw	r14, r24
     3be:	8b 01       	movw	r16, r22
     3c0:	ea 01       	movw	r28, r20
	SPI_select();
     3c2:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_select>
	if(buff_tx0){
     3c6:	ef 28       	or	r14, r15
     3c8:	19 f0       	breq	.+6      	; 0x3d0 <mcp2515_request_to_send+0x20>
		SPI_send(MCP_RTS_TX0);
     3ca:	81 e8       	ldi	r24, 0x81	; 129
     3cc:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	}
	if(buff_tx1){
     3d0:	01 2b       	or	r16, r17
     3d2:	19 f0       	breq	.+6      	; 0x3da <mcp2515_request_to_send+0x2a>
		SPI_send(MCP_RTS_TX1);
     3d4:	82 e8       	ldi	r24, 0x82	; 130
     3d6:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	}
	if(buff_tx2){
     3da:	cd 2b       	or	r28, r29
     3dc:	19 f0       	breq	.+6      	; 0x3e4 <mcp2515_request_to_send+0x34>
		SPI_send(MCP_RTS_TX2);
     3de:	84 e8       	ldi	r24, 0x84	; 132
     3e0:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	}
	SPI_deselect();
     3e4:	0e 94 42 05 	call	0xa84	; 0xa84 <SPI_deselect>
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	08 95       	ret

000003f6 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t mask_byte, uint8_t data_byte, uint8_t address){
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	d8 2f       	mov	r29, r24
     3fe:	c6 2f       	mov	r28, r22
     400:	14 2f       	mov	r17, r20
	SPI_select();
     402:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_select>
	SPI_send(MCP_BITMOD);
     406:	85 e0       	ldi	r24, 0x05	; 5
     408:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_send(address);
     40c:	81 2f       	mov	r24, r17
     40e:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_send(mask_byte);
     412:	8d 2f       	mov	r24, r29
     414:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_send(data_byte);
     418:	8c 2f       	mov	r24, r28
     41a:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_deselect();
     41e:	0e 94 42 05 	call	0xa84	; 0xa84 <SPI_deselect>
}
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	08 95       	ret

0000042a <mcp2515_reset>:

void mcp2515_reset(void){
	SPI_select();
     42a:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_select>
	SPI_send(MCP_RESET);
     42e:	80 ec       	ldi	r24, 0xC0	; 192
     430:	0e 94 36 05 	call	0xa6c	; 0xa6c <SPI_send>
	SPI_deselect();
     434:	0e 94 42 05 	call	0xa84	; 0xa84 <SPI_deselect>
     438:	08 95       	ret

0000043a <mcp2515_init>:



uint8_t mcp2515_init(void){
	uint8_t value; 
	SPI_init();
     43a:	0e 94 2b 05 	call	0xa56	; 0xa56 <SPI_init>
	mcp2515_reset();
     43e:	0e 94 15 02 	call	0x42a	; 0x42a <mcp2515_reset>
 
	//Self-test (Should be implemented in all drivers)
	value = mcp2515_read(MCP_CANSTAT);
     442:	8e e0       	ldi	r24, 0x0E	; 14
     444:	0e 94 b2 01 	call	0x364	; 0x364 <mcp2515_read>
	if ((value & MODE_MASK) != MODE_CONFIG){
     448:	98 2f       	mov	r25, r24
     44a:	90 7e       	andi	r25, 0xE0	; 224
     44c:	90 38       	cpi	r25, 0x80	; 128
     44e:	71 f0       	breq	.+28     	; 0x46c <mcp2515_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset: %x\r\n", value);
     450:	1f 92       	push	r1
     452:	8f 93       	push	r24
     454:	87 e5       	ldi	r24, 0x57	; 87
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	0e 94 33 07 	call	0xe66	; 0xe66 <printf>
		return 1;        
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret
	}
	
	// Bit timing configuration
	mcp2515_bit_modify(0xC7, CNF3_REG_VALUE, MCP_CNF3); // Modify CNF3, bits 7, 6, 2-0. 
     46c:	48 e2       	ldi	r20, 0x28	; 40
     46e:	65 e8       	ldi	r22, 0x85	; 133
     470:	87 ec       	ldi	r24, 0xC7	; 199
     472:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
	mcp2515_bit_modify(0xFF, CNF2_REG_VALUE, MCP_CNF2); // Modify CNF2.
     476:	49 e2       	ldi	r20, 0x29	; 41
     478:	61 eb       	ldi	r22, 0xB1	; 177
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
	mcp2515_bit_modify(0xFF, CNF1_REG_VALUE, MCP_CNF1); // Modify CNF1.
     480:	4a e2       	ldi	r20, 0x2A	; 42
     482:	63 ec       	ldi	r22, 0xC3	; 195
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <mcp2515_bit_modify>
	
	return 0; 
     48a:	80 e0       	ldi	r24, 0x00	; 0
}
     48c:	08 95       	ret

0000048e <mov_init>:




void mov_init(void){
	null_x = adc_rd(JOYSTICK_CHANNEL_X);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 75 00 	call	0xea	; 0xea <adc_rd>
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <null_x+0x1>
     49a:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <null_x>
	null_y = adc_rd(JOYSTICK_CHANNEL_Y);
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	0e 94 75 00 	call	0xea	; 0xea <adc_rd>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <null_y+0x1>
     4aa:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <null_y>
	DDRB &= ~(0b111);
     4ae:	87 b3       	in	r24, 0x17	; 23
     4b0:	88 7f       	andi	r24, 0xF8	; 248
     4b2:	87 bb       	out	0x17, r24	; 23
     4b4:	08 95       	ret

000004b6 <mov_pos_joy_rd>:
}


void mov_pos_joy_rd(void){
     4b6:	cf 92       	push	r12
     4b8:	df 92       	push	r13
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
	char x = adc_rd(JOYSTICK_CHANNEL_X);
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 75 00 	call	0xea	; 0xea <adc_rd>
     4c4:	f8 2e       	mov	r15, r24
	char y = adc_rd(JOYSTICK_CHANNEL_Y);
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	0e 94 75 00 	call	0xea	; 0xea <adc_rd>
	int32_t data_x = (int32_t)x;
     4cc:	4f 2d       	mov	r20, r15
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
	int32_t data_y = (int32_t)y;
     4d4:	c8 2e       	mov	r12, r24
     4d6:	d1 2c       	mov	r13, r1
     4d8:	e1 2c       	mov	r14, r1
     4da:	f1 2c       	mov	r15, r1

	if (data_x >= null_x ){
     4dc:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <null_x>
     4e0:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <null_x+0x1>
     4e4:	09 2e       	mov	r0, r25
     4e6:	00 0c       	add	r0, r0
     4e8:	aa 0b       	sbc	r26, r26
     4ea:	bb 0b       	sbc	r27, r27
     4ec:	48 17       	cp	r20, r24
     4ee:	59 07       	cpc	r21, r25
     4f0:	6a 07       	cpc	r22, r26
     4f2:	7b 07       	cpc	r23, r27
     4f4:	2c f1       	brlt	.+74     	; 0x540 <__stack+0x41>
		x_pos = (data_x - null_x)*100/(255 - null_x);
     4f6:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <null_x>
     4fa:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <null_x+0x1>
     4fe:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <null_x>
     502:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <null_x+0x1>
     506:	09 2e       	mov	r0, r25
     508:	00 0c       	add	r0, r0
     50a:	aa 0b       	sbc	r26, r26
     50c:	bb 0b       	sbc	r27, r27
     50e:	9a 01       	movw	r18, r20
     510:	ab 01       	movw	r20, r22
     512:	28 1b       	sub	r18, r24
     514:	39 0b       	sbc	r19, r25
     516:	4a 0b       	sbc	r20, r26
     518:	5b 0b       	sbc	r21, r27
     51a:	a4 e6       	ldi	r26, 0x64	; 100
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__muluhisi3>
     522:	2f ef       	ldi	r18, 0xFF	; 255
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	2e 1b       	sub	r18, r30
     528:	3f 0b       	sbc	r19, r31
     52a:	03 2e       	mov	r0, r19
     52c:	00 0c       	add	r0, r0
     52e:	44 0b       	sbc	r20, r20
     530:	55 0b       	sbc	r21, r21
     532:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divmodsi4>
     536:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <x_pos+0x1>
     53a:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <x_pos>
     53e:	20 c0       	rjmp	.+64     	; 0x580 <__stack+0x81>
	}
	else {
		x_pos = (data_x - null_x)*100/(null_x);
     540:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <null_x>
     544:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <null_x+0x1>
     548:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <null_x>
     54c:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <null_x+0x1>
     550:	09 2e       	mov	r0, r25
     552:	00 0c       	add	r0, r0
     554:	aa 0b       	sbc	r26, r26
     556:	bb 0b       	sbc	r27, r27
     558:	9a 01       	movw	r18, r20
     55a:	ab 01       	movw	r20, r22
     55c:	28 1b       	sub	r18, r24
     55e:	39 0b       	sbc	r19, r25
     560:	4a 0b       	sbc	r20, r26
     562:	5b 0b       	sbc	r21, r27
     564:	a4 e6       	ldi	r26, 0x64	; 100
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	0e 94 9a 05 	call	0xb34	; 0xb34 <__muluhisi3>
     56c:	9f 01       	movw	r18, r30
     56e:	ff 0f       	add	r31, r31
     570:	44 0b       	sbc	r20, r20
     572:	55 0b       	sbc	r21, r21
     574:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divmodsi4>
     578:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <x_pos+0x1>
     57c:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <x_pos>
	}
	if (data_y >= null_y ){
     580:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <null_y>
     584:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <null_y+0x1>
     588:	09 2e       	mov	r0, r25
     58a:	00 0c       	add	r0, r0
     58c:	aa 0b       	sbc	r26, r26
     58e:	bb 0b       	sbc	r27, r27
     590:	c8 16       	cp	r12, r24
     592:	d9 06       	cpc	r13, r25
     594:	ea 06       	cpc	r14, r26
     596:	fb 06       	cpc	r15, r27
     598:	2c f1       	brlt	.+74     	; 0x5e4 <__stack+0xe5>
		y_pos = (data_y - null_y)*100/(255 - null_y);
     59a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <null_y>
     59e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <null_y+0x1>
     5a2:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <null_y>
     5a6:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <null_y+0x1>
     5aa:	09 2e       	mov	r0, r25
     5ac:	00 0c       	add	r0, r0
     5ae:	aa 0b       	sbc	r26, r26
     5b0:	bb 0b       	sbc	r27, r27
     5b2:	a7 01       	movw	r20, r14
     5b4:	96 01       	movw	r18, r12
     5b6:	28 1b       	sub	r18, r24
     5b8:	39 0b       	sbc	r19, r25
     5ba:	4a 0b       	sbc	r20, r26
     5bc:	5b 0b       	sbc	r21, r27
     5be:	a4 e6       	ldi	r26, 0x64	; 100
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	0e 94 9a 05 	call	0xb34	; 0xb34 <__muluhisi3>
     5c6:	2f ef       	ldi	r18, 0xFF	; 255
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	2e 1b       	sub	r18, r30
     5cc:	3f 0b       	sbc	r19, r31
     5ce:	03 2e       	mov	r0, r19
     5d0:	00 0c       	add	r0, r0
     5d2:	44 0b       	sbc	r20, r20
     5d4:	55 0b       	sbc	r21, r21
     5d6:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divmodsi4>
     5da:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <y_pos+0x1>
     5de:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <y_pos>
     5e2:	20 c0       	rjmp	.+64     	; 0x624 <__stack+0x125>
	}
	else {
		y_pos = (data_y - null_y)*100/(null_y);
     5e4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <null_y>
     5e8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <null_y+0x1>
     5ec:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <null_y>
     5f0:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <null_y+0x1>
     5f4:	09 2e       	mov	r0, r25
     5f6:	00 0c       	add	r0, r0
     5f8:	aa 0b       	sbc	r26, r26
     5fa:	bb 0b       	sbc	r27, r27
     5fc:	a7 01       	movw	r20, r14
     5fe:	96 01       	movw	r18, r12
     600:	28 1b       	sub	r18, r24
     602:	39 0b       	sbc	r19, r25
     604:	4a 0b       	sbc	r20, r26
     606:	5b 0b       	sbc	r21, r27
     608:	a4 e6       	ldi	r26, 0x64	; 100
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	0e 94 9a 05 	call	0xb34	; 0xb34 <__muluhisi3>
     610:	9f 01       	movw	r18, r30
     612:	ff 0f       	add	r31, r31
     614:	44 0b       	sbc	r20, r20
     616:	55 0b       	sbc	r21, r21
     618:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divmodsi4>
     61c:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <y_pos+0x1>
     620:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <y_pos>
	}
}
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	08 95       	ret

0000062e <mov_pos_slider_rd>:

void mov_pos_slider_rd(void){
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
	char right = adc_rd(SLIDER_CHANNEL_R);
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 75 00 	call	0xea	; 0xea <adc_rd>
     640:	d8 2f       	mov	r29, r24
	char left = adc_rd(SLIDER_CHANNEL_L);
     642:	84 e0       	ldi	r24, 0x04	; 4
     644:	0e 94 75 00 	call	0xea	; 0xea <adc_rd>
     648:	c8 2f       	mov	r28, r24
	int32_t data_right = (int32_t)right;
	int32_t data_left = (int32_t)left;
	r_pos = (data_right*100)/255;
     64a:	2d 2f       	mov	r18, r29
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	a4 e6       	ldi	r26, 0x64	; 100
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	0e 94 8b 05 	call	0xb16	; 0xb16 <__umulhisi3>
     656:	c1 2c       	mov	r12, r1
     658:	d1 2c       	mov	r13, r1
     65a:	76 01       	movw	r14, r12
     65c:	ca 94       	dec	r12
     65e:	a7 01       	movw	r20, r14
     660:	96 01       	movw	r18, r12
     662:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divmodsi4>
     666:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <r_pos+0x1>
     66a:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <r_pos>
	l_pos = (data_left*100)/255;
     66e:	2c 2f       	mov	r18, r28
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	a4 e6       	ldi	r26, 0x64	; 100
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	0e 94 8b 05 	call	0xb16	; 0xb16 <__umulhisi3>
     67a:	a7 01       	movw	r20, r14
     67c:	96 01       	movw	r18, r12
     67e:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divmodsi4>
     682:	30 93 2f 02 	sts	0x022F, r19	; 0x80022f <l_pos+0x1>
     686:	20 93 2e 02 	sts	0x022E, r18	; 0x80022e <l_pos>
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	08 95       	ret

00000698 <mov_get_joy_dir>:

dir mov_get_joy_dir(void){
	mov_pos_joy_rd();
     698:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mov_pos_joy_rd>
	const int neutral_threshold = 70;
	dir direction = UNDEFINED;
	
	int abs_x = abs(x_pos);
     69c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <x_pos>
     6a0:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <x_pos+0x1>
     6a4:	99 23       	and	r25, r25
     6a6:	1c f4       	brge	.+6      	; 0x6ae <mov_get_joy_dir+0x16>
     6a8:	91 95       	neg	r25
     6aa:	81 95       	neg	r24
     6ac:	91 09       	sbc	r25, r1
	int abs_y = abs(y_pos);
     6ae:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <y_pos>
     6b2:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <y_pos+0x1>
     6b6:	33 23       	and	r19, r19
     6b8:	1c f4       	brge	.+6      	; 0x6c0 <mov_get_joy_dir+0x28>
     6ba:	31 95       	neg	r19
     6bc:	21 95       	neg	r18
     6be:	31 09       	sbc	r19, r1
	
	if (abs_x < neutral_threshold && abs_y < neutral_threshold){
     6c0:	86 34       	cpi	r24, 0x46	; 70
     6c2:	91 05       	cpc	r25, r1
     6c4:	1c f4       	brge	.+6      	; 0x6cc <mov_get_joy_dir+0x34>
     6c6:	26 34       	cpi	r18, 0x46	; 70
     6c8:	31 05       	cpc	r19, r1
     6ca:	fc f0       	brlt	.+62     	; 0x70a <mov_get_joy_dir+0x72>
		direction = NEUTRAL;
		//printf("Direction: NEUTRAL \r\n");
	}
	else if((abs_x > abs_y) && (abs_x > neutral_threshold)){
     6cc:	28 17       	cp	r18, r24
     6ce:	39 07       	cpc	r19, r25
     6d0:	6c f4       	brge	.+26     	; 0x6ec <mov_get_joy_dir+0x54>
     6d2:	87 34       	cpi	r24, 0x47	; 71
     6d4:	91 05       	cpc	r25, r1
     6d6:	54 f0       	brlt	.+20     	; 0x6ec <mov_get_joy_dir+0x54>
		if (x_pos > 0){
     6d8:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <x_pos>
     6dc:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <x_pos+0x1>
	
	int abs_x = abs(x_pos);
	int abs_y = abs(y_pos);
	
	if (abs_x < neutral_threshold && abs_y < neutral_threshold){
		direction = NEUTRAL;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	12 16       	cp	r1, r18
     6e4:	13 06       	cpc	r1, r19
     6e6:	c4 f0       	brlt	.+48     	; 0x718 <mov_get_joy_dir+0x80>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	08 95       	ret
		else {
			//printf("Direction: LEFT \r\n");
			direction = LEFT;
		}
	}
	else if ((abs_y > abs_x) && (abs_y > neutral_threshold)){
     6ec:	82 17       	cp	r24, r18
     6ee:	93 07       	cpc	r25, r19
     6f0:	74 f4       	brge	.+28     	; 0x70e <mov_get_joy_dir+0x76>
     6f2:	27 34       	cpi	r18, 0x47	; 71
     6f4:	31 05       	cpc	r19, r1
     6f6:	6c f0       	brlt	.+26     	; 0x712 <mov_get_joy_dir+0x7a>
		if(y_pos > 0){
     6f8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <y_pos>
     6fc:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <y_pos+0x1>
     700:	18 16       	cp	r1, r24
     702:	19 06       	cpc	r1, r25
     704:	44 f0       	brlt	.+16     	; 0x716 <mov_get_joy_dir+0x7e>
			direction = UP;
			//printf("Direction: UP \r\n");
		}
		else{
			direction = DOWN;
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	08 95       	ret
	
	int abs_x = abs(x_pos);
	int abs_y = abs(y_pos);
	
	if (abs_x < neutral_threshold && abs_y < neutral_threshold){
		direction = NEUTRAL;
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	08 95       	ret
}

dir mov_get_joy_dir(void){
	mov_pos_joy_rd();
	const int neutral_threshold = 70;
	dir direction = UNDEFINED;
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	08 95       	ret
     712:	85 e0       	ldi	r24, 0x05	; 5
     714:	08 95       	ret
			direction = LEFT;
		}
	}
	else if ((abs_y > abs_x) && (abs_y > neutral_threshold)){
		if(y_pos > 0){
			direction = UP;
     716:	82 e0       	ldi	r24, 0x02	; 2
			direction = DOWN;
			//printf("Direction: DOWN \r\n");
		}
	}
	return direction;
}
     718:	08 95       	ret

0000071a <mov_read_button>:

int mov_read_button(button b){
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
	int button_pushed = 0; 
	switch (b){
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	91 f0       	breq	.+36     	; 0x746 <mov_read_button+0x2c>
     722:	18 f0       	brcs	.+6      	; 0x72a <mov_read_button+0x10>
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	c9 f0       	breq	.+50     	; 0x75a <mov_read_button+0x40>
     728:	20 c0       	rjmp	.+64     	; 0x76a <mov_read_button+0x50>
		case jb:{
			if(DEBUG_BUTTON){
				printf("Reading joystick button:\r\n");
     72a:	8e e8       	ldi	r24, 0x8E	; 142
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 49 07 	call	0xe92	; 0xe92 <puts>
			}
			button_pushed = !(PINB & (1 << PB2));
     732:	86 b3       	in	r24, 0x16	; 22
     734:	86 95       	lsr	r24
     736:	86 95       	lsr	r24
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	89 27       	eor	r24, r25
     73c:	81 70       	andi	r24, 0x01	; 1
     73e:	c8 2f       	mov	r28, r24
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	d8 2f       	mov	r29, r24
			break;
     744:	19 c0       	rjmp	.+50     	; 0x778 <mov_read_button+0x5e>
		}
		case rb:{
			if(DEBUG_BUTTON){
				printf("Reading right slider button:\r\n");
     746:	88 ea       	ldi	r24, 0xA8	; 168
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 49 07 	call	0xe92	; 0xe92 <puts>
			}
			button_pushed = PINB & (1 << PB0);
     74e:	86 b3       	in	r24, 0x16	; 22
     750:	81 70       	andi	r24, 0x01	; 1
     752:	c8 2f       	mov	r28, r24
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	d8 2f       	mov	r29, r24
			break;
     758:	0f c0       	rjmp	.+30     	; 0x778 <mov_read_button+0x5e>
		}
		case lb:{
			if(DEBUG_BUTTON){
				printf("Reading left slider button:\r\n");
     75a:	86 ec       	ldi	r24, 0xC6	; 198
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 49 07 	call	0xe92	; 0xe92 <puts>
			}
			button_pushed = PINB & (1 << PB1);
     762:	c6 b3       	in	r28, 0x16	; 22
     764:	c2 70       	andi	r28, 0x02	; 2
     766:	d0 e0       	ldi	r29, 0x00	; 0
			break;
     768:	07 c0       	rjmp	.+14     	; 0x778 <mov_read_button+0x5e>
		}
		default:{
			if(DEBUG_BUTTON){
				printf("Invalid button selected\r\n");
     76a:	83 ee       	ldi	r24, 0xE3	; 227
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 49 07 	call	0xe92	; 0xe92 <puts>
		if(DEBUG_BUTTON){
			printf("Button pressed\r\n");
		}
		return 1; 
	}
	return 0; 
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0b c0       	rjmp	.+22     	; 0x78e <mov_read_button+0x74>
				printf("Invalid button selected\r\n");
			}
			break;
		}
	}
	if (button_pushed){
     778:	cd 2b       	or	r28, r29
     77a:	39 f0       	breq	.+14     	; 0x78a <mov_read_button+0x70>
		if(DEBUG_BUTTON){
			printf("Button pressed\r\n");
     77c:	8c ef       	ldi	r24, 0xFC	; 252
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 49 07 	call	0xe92	; 0xe92 <puts>
		}
		return 1; 
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	02 c0       	rjmp	.+4      	; 0x78e <mov_read_button+0x74>
	}
	return 0; 
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <mov_get_joy_input>:


input_j mov_get_joy_input(void){
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	27 97       	sbiw	r28, 0x07	; 7
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
	mov_pos_joy_rd();
     7b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mov_pos_joy_rd>
	input_j joy_input;
	joy_input.pos_x = x_pos;
     7b8:	c0 90 32 02 	lds	r12, 0x0232	; 0x800232 <x_pos>
     7bc:	d0 90 33 02 	lds	r13, 0x0233	; 0x800233 <x_pos+0x1>
	joy_input.pos_y = y_pos;
     7c0:	e0 90 38 02 	lds	r14, 0x0238	; 0x800238 <y_pos>
     7c4:	f0 90 39 02 	lds	r15, 0x0239	; 0x800239 <y_pos+0x1>
	joy_input.j_button_pressed = mov_read_button(jb);
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 8d 03 	call	0x71a	; 0x71a <mov_read_button>
     7ce:	18 2f       	mov	r17, r24
     7d0:	09 2f       	mov	r16, r25
	joy_input.direction = mov_get_joy_dir();
     7d2:	0e 94 4c 03 	call	0x698	; 0x698 <mov_get_joy_dir>
	return joy_input;
     7d6:	da 82       	std	Y+2, r13	; 0x02
     7d8:	c9 82       	std	Y+1, r12	; 0x01
     7da:	fc 82       	std	Y+4, r15	; 0x04
     7dc:	eb 82       	std	Y+3, r14	; 0x03
     7de:	2c 2d       	mov	r18, r12
     7e0:	3a 81       	ldd	r19, Y+2	; 0x02
     7e2:	4e 2d       	mov	r20, r14
     7e4:	5c 81       	ldd	r21, Y+4	; 0x04
     7e6:	61 2f       	mov	r22, r17
     7e8:	70 2f       	mov	r23, r16
}
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	27 96       	adiw	r28, 0x07	; 7
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	08 95       	ret

0000080a <mov_get_slider_input>:

input_s mov_get_slider_input(void){
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	28 97       	sbiw	r28, 0x08	; 8
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
	mov_pos_slider_rd();
     82a:	0e 94 17 03 	call	0x62e	; 0x62e <mov_pos_slider_rd>
	input_s slider_input;
	slider_input.pos_l_slider = l_pos;
     82e:	e0 90 2e 02 	lds	r14, 0x022E	; 0x80022e <l_pos>
     832:	f0 90 2f 02 	lds	r15, 0x022F	; 0x80022f <l_pos+0x1>
	slider_input.pos_r_slider = r_pos;
     836:	c0 90 34 02 	lds	r12, 0x0234	; 0x800234 <r_pos>
     83a:	d0 90 35 02 	lds	r13, 0x0235	; 0x800235 <r_pos+0x1>
	slider_input.r_button_pressed =  mov_read_button(rb);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 8d 03 	call	0x71a	; 0x71a <mov_read_button>
     844:	18 2f       	mov	r17, r24
     846:	09 2f       	mov	r16, r25
	slider_input.l_button_pressed = mov_read_button(lb);
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	0e 94 8d 03 	call	0x71a	; 0x71a <mov_read_button>
	return slider_input;
     84e:	da 82       	std	Y+2, r13	; 0x02
     850:	c9 82       	std	Y+1, r12	; 0x01
     852:	fc 82       	std	Y+4, r15	; 0x04
     854:	eb 82       	std	Y+3, r14	; 0x03
     856:	2c 2d       	mov	r18, r12
     858:	3a 81       	ldd	r19, Y+2	; 0x02
     85a:	4e 2d       	mov	r20, r14
     85c:	5c 81       	ldd	r21, Y+4	; 0x04
     85e:	61 2f       	mov	r22, r17
     860:	70 2f       	mov	r23, r16
}
     862:	28 96       	adiw	r28, 0x08	; 8
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	08 95       	ret

00000880 <mov_send_can_message>:


// Se på frekvens av meldinger som sendes under spill modus
void mov_send_can_message(int CAN_ID){
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	63 97       	sbiw	r28, 0x13	; 19
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
	can_message movement_msg;
	movement_msg.id = CAN_ID;
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	89 83       	std	Y+1, r24	; 0x01
	movement_msg.length = 4;
     898:	24 e0       	ldi	r18, 0x04	; 4
     89a:	2b 83       	std	Y+3, r18	; 0x03
	switch (CAN_ID){
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	91 05       	cpc	r25, r1
     8a0:	19 f0       	breq	.+6      	; 0x8a8 <mov_send_can_message+0x28>
     8a2:	02 97       	sbiw	r24, 0x02	; 2
     8a4:	61 f0       	breq	.+24     	; 0x8be <mov_send_can_message+0x3e>
     8a6:	16 c0       	rjmp	.+44     	; 0x8d4 <mov_send_can_message+0x54>
		case CAN_JOYSTICK_ID:{
			input_j joystick_input = mov_get_joy_input();
     8a8:	0e 94 ca 03 	call	0x794	; 0x794 <mov_get_joy_input>
			movement_msg.data[0] = joystick_input.pos_x;
     8ac:	2c 83       	std	Y+4, r18	; 0x04
			movement_msg.data[1] = joystick_input.pos_y;
     8ae:	4d 83       	std	Y+5, r20	; 0x05
			movement_msg.data[2] = joystick_input.j_button_pressed;
     8b0:	6e 83       	std	Y+6, r22	; 0x06
			movement_msg.data[3] = joystick_input.direction;
     8b2:	8f 83       	std	Y+7, r24	; 0x07
			CAN_send_message(&movement_msg);
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	0e 94 95 00 	call	0x12a	; 0x12a <CAN_send_message>
     8bc:	13 c0       	rjmp	.+38     	; 0x8e4 <mov_send_can_message+0x64>
			break;
			}
		case CAN_SLIDER_ID:{
			input_s slider_input = mov_get_slider_input();
     8be:	0e 94 05 04 	call	0x80a	; 0x80a <mov_get_slider_input>
			movement_msg.data[0] = slider_input.pos_r_slider;;
     8c2:	2c 83       	std	Y+4, r18	; 0x04
			movement_msg.data[1] = slider_input.pos_l_slider;
     8c4:	4d 83       	std	Y+5, r20	; 0x05
			movement_msg.data[2] = slider_input.r_button_pressed;
     8c6:	6e 83       	std	Y+6, r22	; 0x06
			movement_msg.data[3] = slider_input.l_button_pressed;
     8c8:	8f 83       	std	Y+7, r24	; 0x07
			CAN_send_message(&movement_msg);
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	0e 94 95 00 	call	0x12a	; 0x12a <CAN_send_message>
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <mov_send_can_message+0x64>
			break;
		}
		default:
			printf("Invalid CAN message ID");
     8d4:	8c e0       	ldi	r24, 0x0C	; 12
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	0e 94 33 07 	call	0xe66	; 0xe66 <printf>
			break;
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
		}

}
     8e4:	63 96       	adiw	r28, 0x13	; 19
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <OLED_write_d>:
 OLED_select_font(LARGE);
}



void OLED_write_d(volatile char data){
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	1f 92       	push	r1
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	89 83       	std	Y+1, r24	; 0x01
	xmem_write(data, OFFSET_OLED_DATA);
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	72 e1       	ldi	r23, 0x12	; 18
     908:	0e 94 64 05 	call	0xac8	; 0xac8 <xmem_write>
}
     90c:	0f 90       	pop	r0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <OLED_write_c>:

void OLED_write_c(volatile char command){
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	1f 92       	push	r1
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	89 83       	std	Y+1, r24	; 0x01
	xmem_write(command, OFFSET_OLED_CMD);
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 e1       	ldi	r23, 0x10	; 16
     926:	0e 94 64 05 	call	0xac8	; 0xac8 <xmem_write>
}
     92a:	0f 90       	pop	r0
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <OLED_goto_column>:
	OLED_goto_page(0); 
	OLED_goto_column(0);
	current_page = 0; 
}

void OLED_goto_column(uint8_t col){
     932:	cf 93       	push	r28
	uint8_t lower_col_addr = (0x01 & col); 
	uint8_t upper_col_addr = (0x10 & col); 
	upper_col_addr = (0x10 + (upper_col_addr >> 4)); 
     934:	84 fb       	bst	r24, 4
     936:	cc 27       	eor	r28, r28
     938:	c0 f9       	bld	r28, 0
	OLED_write_c(lower_col_addr); 
     93a:	81 70       	andi	r24, 0x01	; 1
     93c:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
	OLED_write_c(upper_col_addr); 
     940:	80 e1       	ldi	r24, 0x10	; 16
     942:	8c 0f       	add	r24, r28
     944:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
}
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <OLED_goto_page>:

void OLED_goto_page(uint8_t page){ //page og line er synonymer
     94c:	cf 93       	push	r28
     94e:	c8 2f       	mov	r28, r24
	OLED_write_c(0xB0 + page);
     950:	80 eb       	ldi	r24, 0xB0	; 176
     952:	8c 0f       	add	r24, r28
     954:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
	current_page = page; 
     958:	8c 2f       	mov	r24, r28
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <current_page+0x1>
     960:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <current_page>
}
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <OLED_home>:
	}
	OLED_home();
}

void OLED_home(void){
	OLED_goto_page(0); 
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 a6 04 	call	0x94c	; 0x94c <OLED_goto_page>
	OLED_goto_column(0);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 99 04 	call	0x932	; 0x932 <OLED_goto_column>
	current_page = 0; 
     974:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <current_page+0x1>
     978:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <current_page>
     97c:	08 95       	ret

0000097e <OLED_clear_page>:
void OLED_goto_page(uint8_t page){ //page og line er synonymer
	OLED_write_c(0xB0 + page);
	current_page = page; 
}

void OLED_clear_page(uint8_t page){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	OLED_goto_page(page);
     982:	0e 94 a6 04 	call	0x94c	; 0x94c <OLED_goto_page>
     986:	c0 e8       	ldi	r28, 0x80	; 128
     988:	d0 e0       	ldi	r29, 0x00	; 0
	for(int col = 0; col < OLED_SCREEN_WIDTH; col++){
		OLED_write_d(0);
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <OLED_write_d>
     990:	21 97       	sbiw	r28, 0x01	; 1
	current_page = page; 
}

void OLED_clear_page(uint8_t page){
	OLED_goto_page(page);
	for(int col = 0; col < OLED_SCREEN_WIDTH; col++){
     992:	d9 f7       	brne	.-10     	; 0x98a <OLED_clear_page+0xc>
		OLED_write_d(0);
	}
}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <OLED_reset>:

void OLED_write_c(volatile char command){
	xmem_write(command, OFFSET_OLED_CMD);
}

void OLED_reset(void){
     99a:	cf 93       	push	r28
	OLED_home();
     99c:	0e 94 b4 04 	call	0x968	; 0x968 <OLED_home>
     9a0:	c0 e0       	ldi	r28, 0x00	; 0
	for (int pg = 0; pg < NUM_PAGES; pg++){
		OLED_clear_page(pg);
     9a2:	8c 2f       	mov	r24, r28
     9a4:	0e 94 bf 04 	call	0x97e	; 0x97e <OLED_clear_page>
     9a8:	cf 5f       	subi	r28, 0xFF	; 255
	xmem_write(command, OFFSET_OLED_CMD);
}

void OLED_reset(void){
	OLED_home();
	for (int pg = 0; pg < NUM_PAGES; pg++){
     9aa:	c8 30       	cpi	r28, 0x08	; 8
     9ac:	d1 f7       	brne	.-12     	; 0x9a2 <OLED_reset+0x8>
		OLED_clear_page(pg);
	}
	OLED_home();
     9ae:	0e 94 b4 04 	call	0x968	; 0x968 <OLED_home>
}
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <OLED_init>:
//volatile graphic picture; 
volatile int current_page = 0;


void OLED_init(void){
 OLED_write_c(0xae); // display off
     9b6:	8e ea       	ldi	r24, 0xAE	; 174
     9b8:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xa1); //segment remap
     9bc:	81 ea       	ldi	r24, 0xA1	; 161
     9be:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xda); //common pads hardware: alternative
     9c2:	8a ed       	ldi	r24, 0xDA	; 218
     9c4:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x12);
     9c8:	82 e1       	ldi	r24, 0x12	; 18
     9ca:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xc8); //common output scan direction:com63~com0
     9ce:	88 ec       	ldi	r24, 0xC8	; 200
     9d0:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xa8); //multiplex ration mode:63
     9d4:	88 ea       	ldi	r24, 0xA8	; 168
     9d6:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x3f);
     9da:	8f e3       	ldi	r24, 0x3F	; 63
     9dc:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xd5); //display divide ratio/osc. freq. mode
     9e0:	85 ed       	ldi	r24, 0xD5	; 213
     9e2:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x80);
     9e6:	80 e8       	ldi	r24, 0x80	; 128
     9e8:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x81); //contrast control
     9ec:	81 e8       	ldi	r24, 0x81	; 129
     9ee:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x50);
     9f2:	80 e5       	ldi	r24, 0x50	; 80
     9f4:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xd9); //set pre-charge period
     9f8:	89 ed       	ldi	r24, 0xD9	; 217
     9fa:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x21); //Set column address (only for horizontal/vertical addressing mode)? 
     9fe:	81 e2       	ldi	r24, 0x21	; 33
     a00:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x20); //Set Memory Addressing Mode
     a04:	80 e2       	ldi	r24, 0x20	; 32
     a06:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x02); //Page Addressing Mode
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xdb); //VCOM deselect level mode
     a10:	8b ed       	ldi	r24, 0xDB	; 219
     a12:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x30); 
     a16:	80 e3       	ldi	r24, 0x30	; 48
     a18:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xad); //master configuration
     a1c:	8d ea       	ldi	r24, 0xAD	; 173
     a1e:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x00);
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xa4); //out follows RAM content
     a28:	84 ea       	ldi	r24, 0xA4	; 164
     a2a:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xa6); //set normal display
     a2e:	86 ea       	ldi	r24, 0xA6	; 166
     a30:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0xaf); // display on
     a34:	8f ea       	ldi	r24, 0xAF	; 175
     a36:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
	
 OLED_write_c(0xB0); // Page 0 (Address pointer points here) 
     a3a:	80 eb       	ldi	r24, 0xB0	; 176
     a3c:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x00); // (lower column address) 
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>
 OLED_write_c(0x10); // Starting column is SEG0 (higher column address) 
     a46:	80 e1       	ldi	r24, 0x10	; 16
     a48:	0e 94 8a 04 	call	0x914	; 0x914 <OLED_write_c>

 OLED_reset(); 
     a4c:	0e 94 cd 04 	call	0x99a	; 0x99a <OLED_reset>
	OLED_goto_page(row);
	OLED_goto_column(col); 
}

void OLED_select_font(font format){
	style = format; 
     a50:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <style>
     a54:	08 95       	ret

00000a56 <SPI_init>:
#define CAN_CS PB4
#define SPI_PORT PORTB

void SPI_init(void){
  // Set MOSI, SS and SCK output, all others input
  DDRB |= (1 << PB5) | (1 << CAN_CS) | (1 << PB7);
     a56:	87 b3       	in	r24, 0x17	; 23
     a58:	80 6b       	ori	r24, 0xB0	; 176
     a5a:	87 bb       	out	0x17, r24	; 23
  DDRB &= ~(1 << PB6); // PB6 = 0, MISO is input
     a5c:	be 98       	cbi	0x17, 6	; 23
	
  // Enable SPI, Master, set clock rate fck/16
  SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     a5e:	8d b1       	in	r24, 0x0d	; 13
     a60:	81 65       	ori	r24, 0x51	; 81
     a62:	8d b9       	out	0x0d, r24	; 13
  SPCR &= ~(1 << SPR1); // SPR1 = 0 (clk rate)
     a64:	69 98       	cbi	0x0d, 1	; 13
  
  // SPI Mode = 0 -> Leading edge: sample, Trailing edge: setup
  SPCR &= ~(1 << CPOL); // CPOL = 0
     a66:	6b 98       	cbi	0x0d, 3	; 13
  SPCR &= ~(1 << CPHA); // CPHA = 0
     a68:	6a 98       	cbi	0x0d, 2	; 13
     a6a:	08 95       	ret

00000a6c <SPI_send>:
}


void SPI_send(char cData){
  //Start transmission
  SPDR = cData; //SPI Data register
     a6c:	8f b9       	out	0x0f, r24	; 15
  //Wait for transmission complete
  while(!(SPSR & (1 << SPIF))){} //SPIF sets interrupt flag IF when transmission is completed
     a6e:	77 9b       	sbis	0x0e, 7	; 14
     a70:	fe cf       	rjmp	.-4      	; 0xa6e <SPI_send+0x2>
}
     a72:	08 95       	ret

00000a74 <SPI_read>:

char SPI_read(void){
	//Send dummy byte
	SPDR = 0xFF; //SPI Data register
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	8f b9       	out	0x0f, r24	; 15
  
	//Wait for transmission complete
	while(!(SPSR & (1 << SPIF))){} //SPIF sets interrupt flag IF when transmission is completed
     a78:	77 9b       	sbis	0x0e, 7	; 14
     a7a:	fe cf       	rjmp	.-4      	; 0xa78 <SPI_read+0x4>
		
	return SPDR;
     a7c:	8f b1       	in	r24, 0x0f	; 15
}
     a7e:	08 95       	ret

00000a80 <SPI_select>:

void SPI_select(void){
  SPI_PORT &= ~(1 << CAN_CS);
     a80:	c4 98       	cbi	0x18, 4	; 24
     a82:	08 95       	ret

00000a84 <SPI_deselect>:
}
 
        
void SPI_deselect(void){
  SPI_PORT |= (1 << CAN_CS);
     a84:	c4 9a       	sbi	0x18, 4	; 24
     a86:	08 95       	ret

00000a88 <uart_transmit>:
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
	fdevopen(uart_transmit,uart_receive);
}

void uart_transmit(unsigned char message){
	while ( !(UCSR0A & (1 << UDRE0)) ); // Wait until last message has been sent and transmit buffer is empty.
     a88:	5d 9b       	sbis	0x0b, 5	; 11
     a8a:	fe cf       	rjmp	.-4      	; 0xa88 <uart_transmit>
	UDR0 = message;						// Put data in buffer
     a8c:	8c b9       	out	0x0c, r24	; 12
     a8e:	08 95       	ret

00000a90 <uart_receive>:
}

unsigned char uart_receive(void){
	while ( !(UCSR0A & (1 << RXC0)) );	// Wait until last message has been received
     a90:	5f 9b       	sbis	0x0b, 7	; 11
     a92:	fe cf       	rjmp	.-4      	; 0xa90 <uart_receive>
	
	UCSR0A |= (1 << RXC0);
     a94:	5f 9a       	sbi	0x0b, 7	; 11
	return UDR0;					// Put data in buffer
     a96:	8c b1       	in	r24, 0x0c	; 12
}
     a98:	08 95       	ret

00000a9a <uart_init>:

// Here, using USART0-registers

void uart_init(unsigned int UBRR){
	// Baud rate
	UBRR0H = (unsigned char) (UBRR >> 8);	// Baud rate high register
     a9a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (UBRR);		// Baud rate low register
     a9c:	89 b9       	out	0x09, r24	; 9
	// Enable receivers and transmitter on usart 0
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     a9e:	88 e1       	ldi	r24, 0x18	; 24
     aa0:	8a b9       	out	0x0a, r24	; 10
	// Data format (char = 8 bit, + 2 stop bit)
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     aa2:	8e e8       	ldi	r24, 0x8E	; 142
     aa4:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_transmit,uart_receive);
     aa6:	68 e4       	ldi	r22, 0x48	; 72
     aa8:	75 e0       	ldi	r23, 0x05	; 5
     aaa:	84 e4       	ldi	r24, 0x44	; 68
     aac:	95 e0       	ldi	r25, 0x05	; 5
     aae:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fdevopen>
     ab2:	08 95       	ret

00000ab4 <xmem_init>:
#define BASE_ADDRESS 0x1000


void xmem_init(void) {
	// Enables external memory
	MCUCR |= (1 << SRE); 
     ab4:	85 b7       	in	r24, 0x35	; 53
     ab6:	80 68       	ori	r24, 0x80	; 128
     ab8:	85 bf       	out	0x35, r24	; 53
	
	// Masks PC4-PC7 pins
	SFIOR &= ~(7 << XMM0);
     aba:	80 b7       	in	r24, 0x30	; 48
     abc:	87 7c       	andi	r24, 0xC7	; 199
     abe:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1 << XMM2); 
     ac0:	80 b7       	in	r24, 0x30	; 48
     ac2:	80 62       	ori	r24, 0x20	; 32
     ac4:	80 bf       	out	0x30, r24	; 48
     ac6:	08 95       	ret

00000ac8 <xmem_write>:

// xmem read og write er hentet fra labforelesning

void xmem_write(uint8_t data, uint16_t offset) {
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[offset] = data;
     ac8:	fb 01       	movw	r30, r22
     aca:	f0 5f       	subi	r31, 0xF0	; 240
     acc:	80 83       	st	Z, r24
     ace:	08 95       	ret

00000ad0 <xmem_read>:
}

uint8_t xmem_read(uint16_t offset) {	
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[offset];	
     ad0:	90 5f       	subi	r25, 0xF0	; 240
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
	return ret_val;
}
     ad6:	08 95       	ret

00000ad8 <__divmodsi4>:
     ad8:	05 2e       	mov	r0, r21
     ada:	97 fb       	bst	r25, 7
     adc:	1e f4       	brtc	.+6      	; 0xae4 <__divmodsi4+0xc>
     ade:	00 94       	com	r0
     ae0:	0e 94 83 05 	call	0xb06	; 0xb06 <__negsi2>
     ae4:	57 fd       	sbrc	r21, 7
     ae6:	07 d0       	rcall	.+14     	; 0xaf6 <__divmodsi4_neg2>
     ae8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__udivmodsi4>
     aec:	07 fc       	sbrc	r0, 7
     aee:	03 d0       	rcall	.+6      	; 0xaf6 <__divmodsi4_neg2>
     af0:	4e f4       	brtc	.+18     	; 0xb04 <__divmodsi4_exit>
     af2:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__negsi2>

00000af6 <__divmodsi4_neg2>:
     af6:	50 95       	com	r21
     af8:	40 95       	com	r20
     afa:	30 95       	com	r19
     afc:	21 95       	neg	r18
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	4f 4f       	sbci	r20, 0xFF	; 255
     b02:	5f 4f       	sbci	r21, 0xFF	; 255

00000b04 <__divmodsi4_exit>:
     b04:	08 95       	ret

00000b06 <__negsi2>:
     b06:	90 95       	com	r25
     b08:	80 95       	com	r24
     b0a:	70 95       	com	r23
     b0c:	61 95       	neg	r22
     b0e:	7f 4f       	sbci	r23, 0xFF	; 255
     b10:	8f 4f       	sbci	r24, 0xFF	; 255
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	08 95       	ret

00000b16 <__umulhisi3>:
     b16:	a2 9f       	mul	r26, r18
     b18:	b0 01       	movw	r22, r0
     b1a:	b3 9f       	mul	r27, r19
     b1c:	c0 01       	movw	r24, r0
     b1e:	a3 9f       	mul	r26, r19
     b20:	70 0d       	add	r23, r0
     b22:	81 1d       	adc	r24, r1
     b24:	11 24       	eor	r1, r1
     b26:	91 1d       	adc	r25, r1
     b28:	b2 9f       	mul	r27, r18
     b2a:	70 0d       	add	r23, r0
     b2c:	81 1d       	adc	r24, r1
     b2e:	11 24       	eor	r1, r1
     b30:	91 1d       	adc	r25, r1
     b32:	08 95       	ret

00000b34 <__muluhisi3>:
     b34:	0e 94 8b 05 	call	0xb16	; 0xb16 <__umulhisi3>
     b38:	a5 9f       	mul	r26, r21
     b3a:	90 0d       	add	r25, r0
     b3c:	b4 9f       	mul	r27, r20
     b3e:	90 0d       	add	r25, r0
     b40:	a4 9f       	mul	r26, r20
     b42:	80 0d       	add	r24, r0
     b44:	91 1d       	adc	r25, r1
     b46:	11 24       	eor	r1, r1
     b48:	08 95       	ret

00000b4a <__udivmodsi4>:
     b4a:	a1 e2       	ldi	r26, 0x21	; 33
     b4c:	1a 2e       	mov	r1, r26
     b4e:	aa 1b       	sub	r26, r26
     b50:	bb 1b       	sub	r27, r27
     b52:	fd 01       	movw	r30, r26
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <__udivmodsi4_ep>

00000b56 <__udivmodsi4_loop>:
     b56:	aa 1f       	adc	r26, r26
     b58:	bb 1f       	adc	r27, r27
     b5a:	ee 1f       	adc	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	a2 17       	cp	r26, r18
     b60:	b3 07       	cpc	r27, r19
     b62:	e4 07       	cpc	r30, r20
     b64:	f5 07       	cpc	r31, r21
     b66:	20 f0       	brcs	.+8      	; 0xb70 <__udivmodsi4_ep>
     b68:	a2 1b       	sub	r26, r18
     b6a:	b3 0b       	sbc	r27, r19
     b6c:	e4 0b       	sbc	r30, r20
     b6e:	f5 0b       	sbc	r31, r21

00000b70 <__udivmodsi4_ep>:
     b70:	66 1f       	adc	r22, r22
     b72:	77 1f       	adc	r23, r23
     b74:	88 1f       	adc	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	1a 94       	dec	r1
     b7a:	69 f7       	brne	.-38     	; 0xb56 <__udivmodsi4_loop>
     b7c:	60 95       	com	r22
     b7e:	70 95       	com	r23
     b80:	80 95       	com	r24
     b82:	90 95       	com	r25
     b84:	9b 01       	movw	r18, r22
     b86:	ac 01       	movw	r20, r24
     b88:	bd 01       	movw	r22, r26
     b8a:	cf 01       	movw	r24, r30
     b8c:	08 95       	ret

00000b8e <malloc>:
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	91 05       	cpc	r25, r1
     b9a:	10 f4       	brcc	.+4      	; 0xba0 <malloc+0x12>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <__flp>
     ba4:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <__flp+0x1>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	30 97       	sbiw	r30, 0x00	; 0
     bb2:	19 f1       	breq	.+70     	; 0xbfa <malloc+0x6c>
     bb4:	40 81       	ld	r20, Z
     bb6:	51 81       	ldd	r21, Z+1	; 0x01
     bb8:	02 81       	ldd	r16, Z+2	; 0x02
     bba:	13 81       	ldd	r17, Z+3	; 0x03
     bbc:	48 17       	cp	r20, r24
     bbe:	59 07       	cpc	r21, r25
     bc0:	c8 f0       	brcs	.+50     	; 0xbf4 <malloc+0x66>
     bc2:	84 17       	cp	r24, r20
     bc4:	95 07       	cpc	r25, r21
     bc6:	69 f4       	brne	.+26     	; 0xbe2 <malloc+0x54>
     bc8:	10 97       	sbiw	r26, 0x00	; 0
     bca:	31 f0       	breq	.+12     	; 0xbd8 <malloc+0x4a>
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	0c 93       	st	X, r16
     bd0:	12 97       	sbiw	r26, 0x02	; 2
     bd2:	13 96       	adiw	r26, 0x03	; 3
     bd4:	1c 93       	st	X, r17
     bd6:	27 c0       	rjmp	.+78     	; 0xc26 <malloc+0x98>
     bd8:	00 93 3d 02 	sts	0x023D, r16	; 0x80023d <__flp>
     bdc:	10 93 3e 02 	sts	0x023E, r17	; 0x80023e <__flp+0x1>
     be0:	22 c0       	rjmp	.+68     	; 0xc26 <malloc+0x98>
     be2:	21 15       	cp	r18, r1
     be4:	31 05       	cpc	r19, r1
     be6:	19 f0       	breq	.+6      	; 0xbee <malloc+0x60>
     be8:	42 17       	cp	r20, r18
     bea:	53 07       	cpc	r21, r19
     bec:	18 f4       	brcc	.+6      	; 0xbf4 <malloc+0x66>
     bee:	9a 01       	movw	r18, r20
     bf0:	bd 01       	movw	r22, r26
     bf2:	ef 01       	movw	r28, r30
     bf4:	df 01       	movw	r26, r30
     bf6:	f8 01       	movw	r30, r16
     bf8:	db cf       	rjmp	.-74     	; 0xbb0 <malloc+0x22>
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	f9 f0       	breq	.+62     	; 0xc3e <malloc+0xb0>
     c00:	28 1b       	sub	r18, r24
     c02:	39 0b       	sbc	r19, r25
     c04:	24 30       	cpi	r18, 0x04	; 4
     c06:	31 05       	cpc	r19, r1
     c08:	80 f4       	brcc	.+32     	; 0xc2a <malloc+0x9c>
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	9b 81       	ldd	r25, Y+3	; 0x03
     c0e:	61 15       	cp	r22, r1
     c10:	71 05       	cpc	r23, r1
     c12:	21 f0       	breq	.+8      	; 0xc1c <malloc+0x8e>
     c14:	fb 01       	movw	r30, r22
     c16:	93 83       	std	Z+3, r25	; 0x03
     c18:	82 83       	std	Z+2, r24	; 0x02
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <malloc+0x96>
     c1c:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <__flp+0x1>
     c20:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <__flp>
     c24:	fe 01       	movw	r30, r28
     c26:	32 96       	adiw	r30, 0x02	; 2
     c28:	44 c0       	rjmp	.+136    	; 0xcb2 <malloc+0x124>
     c2a:	fe 01       	movw	r30, r28
     c2c:	e2 0f       	add	r30, r18
     c2e:	f3 1f       	adc	r31, r19
     c30:	81 93       	st	Z+, r24
     c32:	91 93       	st	Z+, r25
     c34:	22 50       	subi	r18, 0x02	; 2
     c36:	31 09       	sbc	r19, r1
     c38:	39 83       	std	Y+1, r19	; 0x01
     c3a:	28 83       	st	Y, r18
     c3c:	3a c0       	rjmp	.+116    	; 0xcb2 <malloc+0x124>
     c3e:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
     c42:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
     c46:	23 2b       	or	r18, r19
     c48:	41 f4       	brne	.+16     	; 0xc5a <malloc+0xcc>
     c4a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     c4e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     c52:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <__brkval+0x1>
     c56:	20 93 3b 02 	sts	0x023B, r18	; 0x80023b <__brkval>
     c5a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     c5e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     c62:	21 15       	cp	r18, r1
     c64:	31 05       	cpc	r19, r1
     c66:	41 f4       	brne	.+16     	; 0xc78 <malloc+0xea>
     c68:	2d b7       	in	r18, 0x3d	; 61
     c6a:	3e b7       	in	r19, 0x3e	; 62
     c6c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     c70:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     c74:	24 1b       	sub	r18, r20
     c76:	35 0b       	sbc	r19, r21
     c78:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <__brkval>
     c7c:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <__brkval+0x1>
     c80:	e2 17       	cp	r30, r18
     c82:	f3 07       	cpc	r31, r19
     c84:	a0 f4       	brcc	.+40     	; 0xcae <malloc+0x120>
     c86:	2e 1b       	sub	r18, r30
     c88:	3f 0b       	sbc	r19, r31
     c8a:	28 17       	cp	r18, r24
     c8c:	39 07       	cpc	r19, r25
     c8e:	78 f0       	brcs	.+30     	; 0xcae <malloc+0x120>
     c90:	ac 01       	movw	r20, r24
     c92:	4e 5f       	subi	r20, 0xFE	; 254
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	24 17       	cp	r18, r20
     c98:	35 07       	cpc	r19, r21
     c9a:	48 f0       	brcs	.+18     	; 0xcae <malloc+0x120>
     c9c:	4e 0f       	add	r20, r30
     c9e:	5f 1f       	adc	r21, r31
     ca0:	50 93 3c 02 	sts	0x023C, r21	; 0x80023c <__brkval+0x1>
     ca4:	40 93 3b 02 	sts	0x023B, r20	; 0x80023b <__brkval>
     ca8:	81 93       	st	Z+, r24
     caa:	91 93       	st	Z+, r25
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <malloc+0x124>
     cae:	e0 e0       	ldi	r30, 0x00	; 0
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	cf 01       	movw	r24, r30
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <free>:
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <free+0xa>
     cc6:	81 c0       	rjmp	.+258    	; 0xdca <free+0x10c>
     cc8:	fc 01       	movw	r30, r24
     cca:	32 97       	sbiw	r30, 0x02	; 2
     ccc:	13 82       	std	Z+3, r1	; 0x03
     cce:	12 82       	std	Z+2, r1	; 0x02
     cd0:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <__flp>
     cd4:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <__flp+0x1>
     cd8:	10 97       	sbiw	r26, 0x00	; 0
     cda:	81 f4       	brne	.+32     	; 0xcfc <free+0x3e>
     cdc:	20 81       	ld	r18, Z
     cde:	31 81       	ldd	r19, Z+1	; 0x01
     ce0:	82 0f       	add	r24, r18
     ce2:	93 1f       	adc	r25, r19
     ce4:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
     ce8:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
     cec:	28 17       	cp	r18, r24
     cee:	39 07       	cpc	r19, r25
     cf0:	51 f5       	brne	.+84     	; 0xd46 <free+0x88>
     cf2:	f0 93 3c 02 	sts	0x023C, r31	; 0x80023c <__brkval+0x1>
     cf6:	e0 93 3b 02 	sts	0x023B, r30	; 0x80023b <__brkval>
     cfa:	67 c0       	rjmp	.+206    	; 0xdca <free+0x10c>
     cfc:	ed 01       	movw	r28, r26
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	ce 17       	cp	r28, r30
     d04:	df 07       	cpc	r29, r31
     d06:	40 f4       	brcc	.+16     	; 0xd18 <free+0x5a>
     d08:	4a 81       	ldd	r20, Y+2	; 0x02
     d0a:	5b 81       	ldd	r21, Y+3	; 0x03
     d0c:	9e 01       	movw	r18, r28
     d0e:	41 15       	cp	r20, r1
     d10:	51 05       	cpc	r21, r1
     d12:	f1 f0       	breq	.+60     	; 0xd50 <free+0x92>
     d14:	ea 01       	movw	r28, r20
     d16:	f5 cf       	rjmp	.-22     	; 0xd02 <free+0x44>
     d18:	d3 83       	std	Z+3, r29	; 0x03
     d1a:	c2 83       	std	Z+2, r28	; 0x02
     d1c:	40 81       	ld	r20, Z
     d1e:	51 81       	ldd	r21, Z+1	; 0x01
     d20:	84 0f       	add	r24, r20
     d22:	95 1f       	adc	r25, r21
     d24:	c8 17       	cp	r28, r24
     d26:	d9 07       	cpc	r29, r25
     d28:	59 f4       	brne	.+22     	; 0xd40 <free+0x82>
     d2a:	88 81       	ld	r24, Y
     d2c:	99 81       	ldd	r25, Y+1	; 0x01
     d2e:	84 0f       	add	r24, r20
     d30:	95 1f       	adc	r25, r21
     d32:	02 96       	adiw	r24, 0x02	; 2
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	93 83       	std	Z+3, r25	; 0x03
     d3e:	82 83       	std	Z+2, r24	; 0x02
     d40:	21 15       	cp	r18, r1
     d42:	31 05       	cpc	r19, r1
     d44:	29 f4       	brne	.+10     	; 0xd50 <free+0x92>
     d46:	f0 93 3e 02 	sts	0x023E, r31	; 0x80023e <__flp+0x1>
     d4a:	e0 93 3d 02 	sts	0x023D, r30	; 0x80023d <__flp>
     d4e:	3d c0       	rjmp	.+122    	; 0xdca <free+0x10c>
     d50:	e9 01       	movw	r28, r18
     d52:	fb 83       	std	Y+3, r31	; 0x03
     d54:	ea 83       	std	Y+2, r30	; 0x02
     d56:	49 91       	ld	r20, Y+
     d58:	59 91       	ld	r21, Y+
     d5a:	c4 0f       	add	r28, r20
     d5c:	d5 1f       	adc	r29, r21
     d5e:	ec 17       	cp	r30, r28
     d60:	fd 07       	cpc	r31, r29
     d62:	61 f4       	brne	.+24     	; 0xd7c <free+0xbe>
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	84 0f       	add	r24, r20
     d6a:	95 1f       	adc	r25, r21
     d6c:	02 96       	adiw	r24, 0x02	; 2
     d6e:	e9 01       	movw	r28, r18
     d70:	99 83       	std	Y+1, r25	; 0x01
     d72:	88 83       	st	Y, r24
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	9b 83       	std	Y+3, r25	; 0x03
     d7a:	8a 83       	std	Y+2, r24	; 0x02
     d7c:	e0 e0       	ldi	r30, 0x00	; 0
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	12 96       	adiw	r26, 0x02	; 2
     d82:	8d 91       	ld	r24, X+
     d84:	9c 91       	ld	r25, X
     d86:	13 97       	sbiw	r26, 0x03	; 3
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	19 f0       	breq	.+6      	; 0xd92 <free+0xd4>
     d8c:	fd 01       	movw	r30, r26
     d8e:	dc 01       	movw	r26, r24
     d90:	f7 cf       	rjmp	.-18     	; 0xd80 <free+0xc2>
     d92:	8d 91       	ld	r24, X+
     d94:	9c 91       	ld	r25, X
     d96:	11 97       	sbiw	r26, 0x01	; 1
     d98:	9d 01       	movw	r18, r26
     d9a:	2e 5f       	subi	r18, 0xFE	; 254
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	82 0f       	add	r24, r18
     da0:	93 1f       	adc	r25, r19
     da2:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
     da6:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	69 f4       	brne	.+26     	; 0xdca <free+0x10c>
     db0:	30 97       	sbiw	r30, 0x00	; 0
     db2:	29 f4       	brne	.+10     	; 0xdbe <free+0x100>
     db4:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__flp+0x1>
     db8:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__flp>
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <free+0x104>
     dbe:	13 82       	std	Z+3, r1	; 0x03
     dc0:	12 82       	std	Z+2, r1	; 0x02
     dc2:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <__brkval+0x1>
     dc6:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <__brkval>
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <fdevopen>:
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	31 f4       	brne	.+12     	; 0xde8 <fdevopen+0x18>
     ddc:	61 15       	cp	r22, r1
     dde:	71 05       	cpc	r23, r1
     de0:	19 f4       	brne	.+6      	; 0xde8 <fdevopen+0x18>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	3a c0       	rjmp	.+116    	; 0xe5c <fdevopen+0x8c>
     de8:	8b 01       	movw	r16, r22
     dea:	ec 01       	movw	r28, r24
     dec:	6e e0       	ldi	r22, 0x0E	; 14
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <calloc>
     df8:	fc 01       	movw	r30, r24
     dfa:	89 2b       	or	r24, r25
     dfc:	91 f3       	breq	.-28     	; 0xde2 <fdevopen+0x12>
     dfe:	80 e8       	ldi	r24, 0x80	; 128
     e00:	83 83       	std	Z+3, r24	; 0x03
     e02:	01 15       	cp	r16, r1
     e04:	11 05       	cpc	r17, r1
     e06:	71 f0       	breq	.+28     	; 0xe24 <fdevopen+0x54>
     e08:	13 87       	std	Z+11, r17	; 0x0b
     e0a:	02 87       	std	Z+10, r16	; 0x0a
     e0c:	81 e8       	ldi	r24, 0x81	; 129
     e0e:	83 83       	std	Z+3, r24	; 0x03
     e10:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <__iob>
     e14:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__iob+0x1>
     e18:	89 2b       	or	r24, r25
     e1a:	21 f4       	brne	.+8      	; 0xe24 <fdevopen+0x54>
     e1c:	f0 93 40 02 	sts	0x0240, r31	; 0x800240 <__iob+0x1>
     e20:	e0 93 3f 02 	sts	0x023F, r30	; 0x80023f <__iob>
     e24:	20 97       	sbiw	r28, 0x00	; 0
     e26:	c9 f0       	breq	.+50     	; 0xe5a <fdevopen+0x8a>
     e28:	d1 87       	std	Z+9, r29	; 0x09
     e2a:	c0 87       	std	Z+8, r28	; 0x08
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	82 60       	ori	r24, 0x02	; 2
     e30:	83 83       	std	Z+3, r24	; 0x03
     e32:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <__iob+0x2>
     e36:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__iob+0x3>
     e3a:	89 2b       	or	r24, r25
     e3c:	71 f4       	brne	.+28     	; 0xe5a <fdevopen+0x8a>
     e3e:	f0 93 42 02 	sts	0x0242, r31	; 0x800242 <__iob+0x3>
     e42:	e0 93 41 02 	sts	0x0241, r30	; 0x800241 <__iob+0x2>
     e46:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <__iob+0x4>
     e4a:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <__iob+0x5>
     e4e:	89 2b       	or	r24, r25
     e50:	21 f4       	brne	.+8      	; 0xe5a <fdevopen+0x8a>
     e52:	f0 93 44 02 	sts	0x0244, r31	; 0x800244 <__iob+0x5>
     e56:	e0 93 43 02 	sts	0x0243, r30	; 0x800243 <__iob+0x4>
     e5a:	cf 01       	movw	r24, r30
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <printf>:
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e9 e3       	ldi	r30, 0x39	; 57
     e6c:	f7 e0       	ldi	r31, 0x07	; 7
     e6e:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__prologue_saves__+0x20>
     e72:	ae 01       	movw	r20, r28
     e74:	4b 5f       	subi	r20, 0xFB	; 251
     e76:	5f 4f       	sbci	r21, 0xFF	; 255
     e78:	fa 01       	movw	r30, r20
     e7a:	61 91       	ld	r22, Z+
     e7c:	71 91       	ld	r23, Z+
     e7e:	af 01       	movw	r20, r30
     e80:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <__iob+0x2>
     e84:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__iob+0x3>
     e88:	0e 94 79 07 	call	0xef2	; 0xef2 <vfprintf>
     e8c:	e2 e0       	ldi	r30, 0x02	; 2
     e8e:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__epilogue_restores__+0x20>

00000e92 <puts>:
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <__iob+0x2>
     e9e:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <__iob+0x3>
     ea2:	23 81       	ldd	r18, Z+3	; 0x03
     ea4:	21 ff       	sbrs	r18, 1
     ea6:	1b c0       	rjmp	.+54     	; 0xede <puts+0x4c>
     ea8:	8c 01       	movw	r16, r24
     eaa:	d0 e0       	ldi	r29, 0x00	; 0
     eac:	c0 e0       	ldi	r28, 0x00	; 0
     eae:	f8 01       	movw	r30, r16
     eb0:	81 91       	ld	r24, Z+
     eb2:	8f 01       	movw	r16, r30
     eb4:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <__iob+0x2>
     eb8:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <__iob+0x3>
     ebc:	db 01       	movw	r26, r22
     ebe:	18 96       	adiw	r26, 0x08	; 8
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	19 97       	sbiw	r26, 0x09	; 9
     ec6:	88 23       	and	r24, r24
     ec8:	31 f0       	breq	.+12     	; 0xed6 <puts+0x44>
     eca:	09 95       	icall
     ecc:	89 2b       	or	r24, r25
     ece:	79 f3       	breq	.-34     	; 0xeae <puts+0x1c>
     ed0:	df ef       	ldi	r29, 0xFF	; 255
     ed2:	cf ef       	ldi	r28, 0xFF	; 255
     ed4:	ec cf       	rjmp	.-40     	; 0xeae <puts+0x1c>
     ed6:	8a e0       	ldi	r24, 0x0A	; 10
     ed8:	09 95       	icall
     eda:	89 2b       	or	r24, r25
     edc:	19 f0       	breq	.+6      	; 0xee4 <puts+0x52>
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	9f ef       	ldi	r25, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <puts+0x56>
     ee4:	8d 2f       	mov	r24, r29
     ee6:	9c 2f       	mov	r25, r28
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret

00000ef2 <vfprintf>:
     ef2:	ab e0       	ldi	r26, 0x0B	; 11
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ef e7       	ldi	r30, 0x7F	; 127
     ef8:	f7 e0       	ldi	r31, 0x07	; 7
     efa:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__prologue_saves__>
     efe:	6c 01       	movw	r12, r24
     f00:	7b 01       	movw	r14, r22
     f02:	8a 01       	movw	r16, r20
     f04:	fc 01       	movw	r30, r24
     f06:	17 82       	std	Z+7, r1	; 0x07
     f08:	16 82       	std	Z+6, r1	; 0x06
     f0a:	83 81       	ldd	r24, Z+3	; 0x03
     f0c:	81 ff       	sbrs	r24, 1
     f0e:	cc c1       	rjmp	.+920    	; 0x12a8 <vfprintf+0x3b6>
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	3c 01       	movw	r6, r24
     f16:	f6 01       	movw	r30, r12
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	f7 01       	movw	r30, r14
     f1c:	93 fd       	sbrc	r25, 3
     f1e:	85 91       	lpm	r24, Z+
     f20:	93 ff       	sbrs	r25, 3
     f22:	81 91       	ld	r24, Z+
     f24:	7f 01       	movw	r14, r30
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <vfprintf+0x3a>
     f2a:	ba c1       	rjmp	.+884    	; 0x12a0 <vfprintf+0x3ae>
     f2c:	85 32       	cpi	r24, 0x25	; 37
     f2e:	39 f4       	brne	.+14     	; 0xf3e <vfprintf+0x4c>
     f30:	93 fd       	sbrc	r25, 3
     f32:	85 91       	lpm	r24, Z+
     f34:	93 ff       	sbrs	r25, 3
     f36:	81 91       	ld	r24, Z+
     f38:	7f 01       	movw	r14, r30
     f3a:	85 32       	cpi	r24, 0x25	; 37
     f3c:	29 f4       	brne	.+10     	; 0xf48 <vfprintf+0x56>
     f3e:	b6 01       	movw	r22, r12
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
     f46:	e7 cf       	rjmp	.-50     	; 0xf16 <vfprintf+0x24>
     f48:	91 2c       	mov	r9, r1
     f4a:	21 2c       	mov	r2, r1
     f4c:	31 2c       	mov	r3, r1
     f4e:	ff e1       	ldi	r31, 0x1F	; 31
     f50:	f3 15       	cp	r31, r3
     f52:	d8 f0       	brcs	.+54     	; 0xf8a <vfprintf+0x98>
     f54:	8b 32       	cpi	r24, 0x2B	; 43
     f56:	79 f0       	breq	.+30     	; 0xf76 <vfprintf+0x84>
     f58:	38 f4       	brcc	.+14     	; 0xf68 <vfprintf+0x76>
     f5a:	80 32       	cpi	r24, 0x20	; 32
     f5c:	79 f0       	breq	.+30     	; 0xf7c <vfprintf+0x8a>
     f5e:	83 32       	cpi	r24, 0x23	; 35
     f60:	a1 f4       	brne	.+40     	; 0xf8a <vfprintf+0x98>
     f62:	23 2d       	mov	r18, r3
     f64:	20 61       	ori	r18, 0x10	; 16
     f66:	1d c0       	rjmp	.+58     	; 0xfa2 <vfprintf+0xb0>
     f68:	8d 32       	cpi	r24, 0x2D	; 45
     f6a:	61 f0       	breq	.+24     	; 0xf84 <vfprintf+0x92>
     f6c:	80 33       	cpi	r24, 0x30	; 48
     f6e:	69 f4       	brne	.+26     	; 0xf8a <vfprintf+0x98>
     f70:	23 2d       	mov	r18, r3
     f72:	21 60       	ori	r18, 0x01	; 1
     f74:	16 c0       	rjmp	.+44     	; 0xfa2 <vfprintf+0xb0>
     f76:	83 2d       	mov	r24, r3
     f78:	82 60       	ori	r24, 0x02	; 2
     f7a:	38 2e       	mov	r3, r24
     f7c:	e3 2d       	mov	r30, r3
     f7e:	e4 60       	ori	r30, 0x04	; 4
     f80:	3e 2e       	mov	r3, r30
     f82:	2a c0       	rjmp	.+84     	; 0xfd8 <vfprintf+0xe6>
     f84:	f3 2d       	mov	r31, r3
     f86:	f8 60       	ori	r31, 0x08	; 8
     f88:	1d c0       	rjmp	.+58     	; 0xfc4 <vfprintf+0xd2>
     f8a:	37 fc       	sbrc	r3, 7
     f8c:	2d c0       	rjmp	.+90     	; 0xfe8 <vfprintf+0xf6>
     f8e:	20 ed       	ldi	r18, 0xD0	; 208
     f90:	28 0f       	add	r18, r24
     f92:	2a 30       	cpi	r18, 0x0A	; 10
     f94:	40 f0       	brcs	.+16     	; 0xfa6 <vfprintf+0xb4>
     f96:	8e 32       	cpi	r24, 0x2E	; 46
     f98:	b9 f4       	brne	.+46     	; 0xfc8 <vfprintf+0xd6>
     f9a:	36 fc       	sbrc	r3, 6
     f9c:	81 c1       	rjmp	.+770    	; 0x12a0 <vfprintf+0x3ae>
     f9e:	23 2d       	mov	r18, r3
     fa0:	20 64       	ori	r18, 0x40	; 64
     fa2:	32 2e       	mov	r3, r18
     fa4:	19 c0       	rjmp	.+50     	; 0xfd8 <vfprintf+0xe6>
     fa6:	36 fe       	sbrs	r3, 6
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <vfprintf+0xc4>
     faa:	8a e0       	ldi	r24, 0x0A	; 10
     fac:	98 9e       	mul	r9, r24
     fae:	20 0d       	add	r18, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	92 2e       	mov	r9, r18
     fb4:	11 c0       	rjmp	.+34     	; 0xfd8 <vfprintf+0xe6>
     fb6:	ea e0       	ldi	r30, 0x0A	; 10
     fb8:	2e 9e       	mul	r2, r30
     fba:	20 0d       	add	r18, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	22 2e       	mov	r2, r18
     fc0:	f3 2d       	mov	r31, r3
     fc2:	f0 62       	ori	r31, 0x20	; 32
     fc4:	3f 2e       	mov	r3, r31
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <vfprintf+0xe6>
     fc8:	8c 36       	cpi	r24, 0x6C	; 108
     fca:	21 f4       	brne	.+8      	; 0xfd4 <vfprintf+0xe2>
     fcc:	83 2d       	mov	r24, r3
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	38 2e       	mov	r3, r24
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <vfprintf+0xe6>
     fd4:	88 36       	cpi	r24, 0x68	; 104
     fd6:	41 f4       	brne	.+16     	; 0xfe8 <vfprintf+0xf6>
     fd8:	f7 01       	movw	r30, r14
     fda:	93 fd       	sbrc	r25, 3
     fdc:	85 91       	lpm	r24, Z+
     fde:	93 ff       	sbrs	r25, 3
     fe0:	81 91       	ld	r24, Z+
     fe2:	7f 01       	movw	r14, r30
     fe4:	81 11       	cpse	r24, r1
     fe6:	b3 cf       	rjmp	.-154    	; 0xf4e <vfprintf+0x5c>
     fe8:	98 2f       	mov	r25, r24
     fea:	9f 7d       	andi	r25, 0xDF	; 223
     fec:	95 54       	subi	r25, 0x45	; 69
     fee:	93 30       	cpi	r25, 0x03	; 3
     ff0:	28 f4       	brcc	.+10     	; 0xffc <vfprintf+0x10a>
     ff2:	0c 5f       	subi	r16, 0xFC	; 252
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	9f e3       	ldi	r25, 0x3F	; 63
     ff8:	99 83       	std	Y+1, r25	; 0x01
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <vfprintf+0x124>
     ffc:	83 36       	cpi	r24, 0x63	; 99
     ffe:	31 f0       	breq	.+12     	; 0x100c <vfprintf+0x11a>
    1000:	83 37       	cpi	r24, 0x73	; 115
    1002:	71 f0       	breq	.+28     	; 0x1020 <vfprintf+0x12e>
    1004:	83 35       	cpi	r24, 0x53	; 83
    1006:	09 f0       	breq	.+2      	; 0x100a <vfprintf+0x118>
    1008:	59 c0       	rjmp	.+178    	; 0x10bc <vfprintf+0x1ca>
    100a:	21 c0       	rjmp	.+66     	; 0x104e <vfprintf+0x15c>
    100c:	f8 01       	movw	r30, r16
    100e:	80 81       	ld	r24, Z
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	0e 5f       	subi	r16, 0xFE	; 254
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	88 24       	eor	r8, r8
    1018:	83 94       	inc	r8
    101a:	91 2c       	mov	r9, r1
    101c:	53 01       	movw	r10, r6
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <vfprintf+0x154>
    1020:	28 01       	movw	r4, r16
    1022:	f2 e0       	ldi	r31, 0x02	; 2
    1024:	4f 0e       	add	r4, r31
    1026:	51 1c       	adc	r5, r1
    1028:	f8 01       	movw	r30, r16
    102a:	a0 80       	ld	r10, Z
    102c:	b1 80       	ldd	r11, Z+1	; 0x01
    102e:	36 fe       	sbrs	r3, 6
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <vfprintf+0x146>
    1032:	69 2d       	mov	r22, r9
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <vfprintf+0x14a>
    1038:	6f ef       	ldi	r22, 0xFF	; 255
    103a:	7f ef       	ldi	r23, 0xFF	; 255
    103c:	c5 01       	movw	r24, r10
    103e:	0e 94 88 09 	call	0x1310	; 0x1310 <strnlen>
    1042:	4c 01       	movw	r8, r24
    1044:	82 01       	movw	r16, r4
    1046:	f3 2d       	mov	r31, r3
    1048:	ff 77       	andi	r31, 0x7F	; 127
    104a:	3f 2e       	mov	r3, r31
    104c:	16 c0       	rjmp	.+44     	; 0x107a <vfprintf+0x188>
    104e:	28 01       	movw	r4, r16
    1050:	22 e0       	ldi	r18, 0x02	; 2
    1052:	42 0e       	add	r4, r18
    1054:	51 1c       	adc	r5, r1
    1056:	f8 01       	movw	r30, r16
    1058:	a0 80       	ld	r10, Z
    105a:	b1 80       	ldd	r11, Z+1	; 0x01
    105c:	36 fe       	sbrs	r3, 6
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x174>
    1060:	69 2d       	mov	r22, r9
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0x178>
    1066:	6f ef       	ldi	r22, 0xFF	; 255
    1068:	7f ef       	ldi	r23, 0xFF	; 255
    106a:	c5 01       	movw	r24, r10
    106c:	0e 94 76 09 	call	0x12ec	; 0x12ec <strnlen_P>
    1070:	4c 01       	movw	r8, r24
    1072:	f3 2d       	mov	r31, r3
    1074:	f0 68       	ori	r31, 0x80	; 128
    1076:	3f 2e       	mov	r3, r31
    1078:	82 01       	movw	r16, r4
    107a:	33 fc       	sbrc	r3, 3
    107c:	1b c0       	rjmp	.+54     	; 0x10b4 <vfprintf+0x1c2>
    107e:	82 2d       	mov	r24, r2
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	88 16       	cp	r8, r24
    1084:	99 06       	cpc	r9, r25
    1086:	b0 f4       	brcc	.+44     	; 0x10b4 <vfprintf+0x1c2>
    1088:	b6 01       	movw	r22, r12
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    1092:	2a 94       	dec	r2
    1094:	f4 cf       	rjmp	.-24     	; 0x107e <vfprintf+0x18c>
    1096:	f5 01       	movw	r30, r10
    1098:	37 fc       	sbrc	r3, 7
    109a:	85 91       	lpm	r24, Z+
    109c:	37 fe       	sbrs	r3, 7
    109e:	81 91       	ld	r24, Z+
    10a0:	5f 01       	movw	r10, r30
    10a2:	b6 01       	movw	r22, r12
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    10aa:	21 10       	cpse	r2, r1
    10ac:	2a 94       	dec	r2
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	82 1a       	sub	r8, r18
    10b2:	91 08       	sbc	r9, r1
    10b4:	81 14       	cp	r8, r1
    10b6:	91 04       	cpc	r9, r1
    10b8:	71 f7       	brne	.-36     	; 0x1096 <vfprintf+0x1a4>
    10ba:	e8 c0       	rjmp	.+464    	; 0x128c <vfprintf+0x39a>
    10bc:	84 36       	cpi	r24, 0x64	; 100
    10be:	11 f0       	breq	.+4      	; 0x10c4 <vfprintf+0x1d2>
    10c0:	89 36       	cpi	r24, 0x69	; 105
    10c2:	41 f5       	brne	.+80     	; 0x1114 <vfprintf+0x222>
    10c4:	f8 01       	movw	r30, r16
    10c6:	37 fe       	sbrs	r3, 7
    10c8:	07 c0       	rjmp	.+14     	; 0x10d8 <vfprintf+0x1e6>
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	0c 5f       	subi	r16, 0xFC	; 252
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	08 c0       	rjmp	.+16     	; 0x10e8 <vfprintf+0x1f6>
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	07 2e       	mov	r0, r23
    10de:	00 0c       	add	r0, r0
    10e0:	88 0b       	sbc	r24, r24
    10e2:	99 0b       	sbc	r25, r25
    10e4:	0e 5f       	subi	r16, 0xFE	; 254
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	f3 2d       	mov	r31, r3
    10ea:	ff 76       	andi	r31, 0x6F	; 111
    10ec:	3f 2e       	mov	r3, r31
    10ee:	97 ff       	sbrs	r25, 7
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <vfprintf+0x212>
    10f2:	90 95       	com	r25
    10f4:	80 95       	com	r24
    10f6:	70 95       	com	r23
    10f8:	61 95       	neg	r22
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	f0 68       	ori	r31, 0x80	; 128
    1102:	3f 2e       	mov	r3, r31
    1104:	2a e0       	ldi	r18, 0x0A	; 10
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	a3 01       	movw	r20, r6
    110a:	0e 94 cf 09 	call	0x139e	; 0x139e <__ultoa_invert>
    110e:	88 2e       	mov	r8, r24
    1110:	86 18       	sub	r8, r6
    1112:	45 c0       	rjmp	.+138    	; 0x119e <vfprintf+0x2ac>
    1114:	85 37       	cpi	r24, 0x75	; 117
    1116:	31 f4       	brne	.+12     	; 0x1124 <vfprintf+0x232>
    1118:	23 2d       	mov	r18, r3
    111a:	2f 7e       	andi	r18, 0xEF	; 239
    111c:	b2 2e       	mov	r11, r18
    111e:	2a e0       	ldi	r18, 0x0A	; 10
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	25 c0       	rjmp	.+74     	; 0x116e <vfprintf+0x27c>
    1124:	93 2d       	mov	r25, r3
    1126:	99 7f       	andi	r25, 0xF9	; 249
    1128:	b9 2e       	mov	r11, r25
    112a:	8f 36       	cpi	r24, 0x6F	; 111
    112c:	c1 f0       	breq	.+48     	; 0x115e <vfprintf+0x26c>
    112e:	18 f4       	brcc	.+6      	; 0x1136 <vfprintf+0x244>
    1130:	88 35       	cpi	r24, 0x58	; 88
    1132:	79 f0       	breq	.+30     	; 0x1152 <vfprintf+0x260>
    1134:	b5 c0       	rjmp	.+362    	; 0x12a0 <vfprintf+0x3ae>
    1136:	80 37       	cpi	r24, 0x70	; 112
    1138:	19 f0       	breq	.+6      	; 0x1140 <vfprintf+0x24e>
    113a:	88 37       	cpi	r24, 0x78	; 120
    113c:	21 f0       	breq	.+8      	; 0x1146 <vfprintf+0x254>
    113e:	b0 c0       	rjmp	.+352    	; 0x12a0 <vfprintf+0x3ae>
    1140:	e9 2f       	mov	r30, r25
    1142:	e0 61       	ori	r30, 0x10	; 16
    1144:	be 2e       	mov	r11, r30
    1146:	b4 fe       	sbrs	r11, 4
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <vfprintf+0x272>
    114a:	fb 2d       	mov	r31, r11
    114c:	f4 60       	ori	r31, 0x04	; 4
    114e:	bf 2e       	mov	r11, r31
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <vfprintf+0x272>
    1152:	34 fe       	sbrs	r3, 4
    1154:	0a c0       	rjmp	.+20     	; 0x116a <vfprintf+0x278>
    1156:	29 2f       	mov	r18, r25
    1158:	26 60       	ori	r18, 0x06	; 6
    115a:	b2 2e       	mov	r11, r18
    115c:	06 c0       	rjmp	.+12     	; 0x116a <vfprintf+0x278>
    115e:	28 e0       	ldi	r18, 0x08	; 8
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	05 c0       	rjmp	.+10     	; 0x116e <vfprintf+0x27c>
    1164:	20 e1       	ldi	r18, 0x10	; 16
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0x27c>
    116a:	20 e1       	ldi	r18, 0x10	; 16
    116c:	32 e0       	ldi	r19, 0x02	; 2
    116e:	f8 01       	movw	r30, r16
    1170:	b7 fe       	sbrs	r11, 7
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <vfprintf+0x290>
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	0c 5f       	subi	r16, 0xFC	; 252
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	06 c0       	rjmp	.+12     	; 0x118e <vfprintf+0x29c>
    1182:	60 81       	ld	r22, Z
    1184:	71 81       	ldd	r23, Z+1	; 0x01
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 5f       	subi	r16, 0xFE	; 254
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
    118e:	a3 01       	movw	r20, r6
    1190:	0e 94 cf 09 	call	0x139e	; 0x139e <__ultoa_invert>
    1194:	88 2e       	mov	r8, r24
    1196:	86 18       	sub	r8, r6
    1198:	fb 2d       	mov	r31, r11
    119a:	ff 77       	andi	r31, 0x7F	; 127
    119c:	3f 2e       	mov	r3, r31
    119e:	36 fe       	sbrs	r3, 6
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <vfprintf+0x2ca>
    11a2:	23 2d       	mov	r18, r3
    11a4:	2e 7f       	andi	r18, 0xFE	; 254
    11a6:	a2 2e       	mov	r10, r18
    11a8:	89 14       	cp	r8, r9
    11aa:	58 f4       	brcc	.+22     	; 0x11c2 <vfprintf+0x2d0>
    11ac:	34 fe       	sbrs	r3, 4
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <vfprintf+0x2d4>
    11b0:	32 fc       	sbrc	r3, 2
    11b2:	09 c0       	rjmp	.+18     	; 0x11c6 <vfprintf+0x2d4>
    11b4:	83 2d       	mov	r24, r3
    11b6:	8e 7e       	andi	r24, 0xEE	; 238
    11b8:	a8 2e       	mov	r10, r24
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <vfprintf+0x2d4>
    11bc:	b8 2c       	mov	r11, r8
    11be:	a3 2c       	mov	r10, r3
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <vfprintf+0x2d6>
    11c2:	b8 2c       	mov	r11, r8
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <vfprintf+0x2d6>
    11c6:	b9 2c       	mov	r11, r9
    11c8:	a4 fe       	sbrs	r10, 4
    11ca:	0f c0       	rjmp	.+30     	; 0x11ea <vfprintf+0x2f8>
    11cc:	fe 01       	movw	r30, r28
    11ce:	e8 0d       	add	r30, r8
    11d0:	f1 1d       	adc	r31, r1
    11d2:	80 81       	ld	r24, Z
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	21 f4       	brne	.+8      	; 0x11e0 <vfprintf+0x2ee>
    11d8:	9a 2d       	mov	r25, r10
    11da:	99 7e       	andi	r25, 0xE9	; 233
    11dc:	a9 2e       	mov	r10, r25
    11de:	09 c0       	rjmp	.+18     	; 0x11f2 <vfprintf+0x300>
    11e0:	a2 fe       	sbrs	r10, 2
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <vfprintf+0x2fe>
    11e4:	b3 94       	inc	r11
    11e6:	b3 94       	inc	r11
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <vfprintf+0x300>
    11ea:	8a 2d       	mov	r24, r10
    11ec:	86 78       	andi	r24, 0x86	; 134
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <vfprintf+0x300>
    11f0:	b3 94       	inc	r11
    11f2:	a3 fc       	sbrc	r10, 3
    11f4:	11 c0       	rjmp	.+34     	; 0x1218 <vfprintf+0x326>
    11f6:	a0 fe       	sbrs	r10, 0
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <vfprintf+0x314>
    11fa:	b2 14       	cp	r11, r2
    11fc:	88 f4       	brcc	.+34     	; 0x1220 <vfprintf+0x32e>
    11fe:	28 0c       	add	r2, r8
    1200:	92 2c       	mov	r9, r2
    1202:	9b 18       	sub	r9, r11
    1204:	0e c0       	rjmp	.+28     	; 0x1222 <vfprintf+0x330>
    1206:	b2 14       	cp	r11, r2
    1208:	60 f4       	brcc	.+24     	; 0x1222 <vfprintf+0x330>
    120a:	b6 01       	movw	r22, r12
    120c:	80 e2       	ldi	r24, 0x20	; 32
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    1214:	b3 94       	inc	r11
    1216:	f7 cf       	rjmp	.-18     	; 0x1206 <vfprintf+0x314>
    1218:	b2 14       	cp	r11, r2
    121a:	18 f4       	brcc	.+6      	; 0x1222 <vfprintf+0x330>
    121c:	2b 18       	sub	r2, r11
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <vfprintf+0x332>
    1220:	98 2c       	mov	r9, r8
    1222:	21 2c       	mov	r2, r1
    1224:	a4 fe       	sbrs	r10, 4
    1226:	10 c0       	rjmp	.+32     	; 0x1248 <vfprintf+0x356>
    1228:	b6 01       	movw	r22, r12
    122a:	80 e3       	ldi	r24, 0x30	; 48
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    1232:	a2 fe       	sbrs	r10, 2
    1234:	17 c0       	rjmp	.+46     	; 0x1264 <vfprintf+0x372>
    1236:	a1 fc       	sbrc	r10, 1
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <vfprintf+0x34e>
    123a:	88 e7       	ldi	r24, 0x78	; 120
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <vfprintf+0x352>
    1240:	88 e5       	ldi	r24, 0x58	; 88
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	b6 01       	movw	r22, r12
    1246:	0c c0       	rjmp	.+24     	; 0x1260 <vfprintf+0x36e>
    1248:	8a 2d       	mov	r24, r10
    124a:	86 78       	andi	r24, 0x86	; 134
    124c:	59 f0       	breq	.+22     	; 0x1264 <vfprintf+0x372>
    124e:	a1 fe       	sbrs	r10, 1
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <vfprintf+0x364>
    1252:	8b e2       	ldi	r24, 0x2B	; 43
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <vfprintf+0x366>
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	a7 fc       	sbrc	r10, 7
    125a:	8d e2       	ldi	r24, 0x2D	; 45
    125c:	b6 01       	movw	r22, r12
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    1264:	89 14       	cp	r8, r9
    1266:	38 f4       	brcc	.+14     	; 0x1276 <vfprintf+0x384>
    1268:	b6 01       	movw	r22, r12
    126a:	80 e3       	ldi	r24, 0x30	; 48
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    1272:	9a 94       	dec	r9
    1274:	f7 cf       	rjmp	.-18     	; 0x1264 <vfprintf+0x372>
    1276:	8a 94       	dec	r8
    1278:	f3 01       	movw	r30, r6
    127a:	e8 0d       	add	r30, r8
    127c:	f1 1d       	adc	r31, r1
    127e:	80 81       	ld	r24, Z
    1280:	b6 01       	movw	r22, r12
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    1288:	81 10       	cpse	r8, r1
    128a:	f5 cf       	rjmp	.-22     	; 0x1276 <vfprintf+0x384>
    128c:	22 20       	and	r2, r2
    128e:	09 f4       	brne	.+2      	; 0x1292 <vfprintf+0x3a0>
    1290:	42 ce       	rjmp	.-892    	; 0xf16 <vfprintf+0x24>
    1292:	b6 01       	movw	r22, r12
    1294:	80 e2       	ldi	r24, 0x20	; 32
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 93 09 	call	0x1326	; 0x1326 <fputc>
    129c:	2a 94       	dec	r2
    129e:	f6 cf       	rjmp	.-20     	; 0x128c <vfprintf+0x39a>
    12a0:	f6 01       	movw	r30, r12
    12a2:	86 81       	ldd	r24, Z+6	; 0x06
    12a4:	97 81       	ldd	r25, Z+7	; 0x07
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x3ba>
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	2b 96       	adiw	r28, 0x0b	; 11
    12ae:	e2 e1       	ldi	r30, 0x12	; 18
    12b0:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__epilogue_restores__>

000012b4 <calloc>:
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	86 9f       	mul	r24, r22
    12be:	80 01       	movw	r16, r0
    12c0:	87 9f       	mul	r24, r23
    12c2:	10 0d       	add	r17, r0
    12c4:	96 9f       	mul	r25, r22
    12c6:	10 0d       	add	r17, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	c8 01       	movw	r24, r16
    12cc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <malloc>
    12d0:	ec 01       	movw	r28, r24
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <calloc+0x2c>
    12d6:	a8 01       	movw	r20, r16
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	0e 94 81 09 	call	0x1302	; 0x1302 <memset>
    12e0:	ce 01       	movw	r24, r28
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <strnlen_P>:
    12ec:	fc 01       	movw	r30, r24
    12ee:	05 90       	lpm	r0, Z+
    12f0:	61 50       	subi	r22, 0x01	; 1
    12f2:	70 40       	sbci	r23, 0x00	; 0
    12f4:	01 10       	cpse	r0, r1
    12f6:	d8 f7       	brcc	.-10     	; 0x12ee <strnlen_P+0x2>
    12f8:	80 95       	com	r24
    12fa:	90 95       	com	r25
    12fc:	8e 0f       	add	r24, r30
    12fe:	9f 1f       	adc	r25, r31
    1300:	08 95       	ret

00001302 <memset>:
    1302:	dc 01       	movw	r26, r24
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <memset+0x6>
    1306:	6d 93       	st	X+, r22
    1308:	41 50       	subi	r20, 0x01	; 1
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	e0 f7       	brcc	.-8      	; 0x1306 <memset+0x4>
    130e:	08 95       	ret

00001310 <strnlen>:
    1310:	fc 01       	movw	r30, r24
    1312:	61 50       	subi	r22, 0x01	; 1
    1314:	70 40       	sbci	r23, 0x00	; 0
    1316:	01 90       	ld	r0, Z+
    1318:	01 10       	cpse	r0, r1
    131a:	d8 f7       	brcc	.-10     	; 0x1312 <strnlen+0x2>
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	8e 0f       	add	r24, r30
    1322:	9f 1f       	adc	r25, r31
    1324:	08 95       	ret

00001326 <fputc>:
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	fb 01       	movw	r30, r22
    1330:	23 81       	ldd	r18, Z+3	; 0x03
    1332:	21 fd       	sbrc	r18, 1
    1334:	03 c0       	rjmp	.+6      	; 0x133c <fputc+0x16>
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	9f ef       	ldi	r25, 0xFF	; 255
    133a:	2c c0       	rjmp	.+88     	; 0x1394 <fputc+0x6e>
    133c:	22 ff       	sbrs	r18, 2
    133e:	16 c0       	rjmp	.+44     	; 0x136c <fputc+0x46>
    1340:	46 81       	ldd	r20, Z+6	; 0x06
    1342:	57 81       	ldd	r21, Z+7	; 0x07
    1344:	24 81       	ldd	r18, Z+4	; 0x04
    1346:	35 81       	ldd	r19, Z+5	; 0x05
    1348:	42 17       	cp	r20, r18
    134a:	53 07       	cpc	r21, r19
    134c:	44 f4       	brge	.+16     	; 0x135e <fputc+0x38>
    134e:	a0 81       	ld	r26, Z
    1350:	b1 81       	ldd	r27, Z+1	; 0x01
    1352:	9d 01       	movw	r18, r26
    1354:	2f 5f       	subi	r18, 0xFF	; 255
    1356:	3f 4f       	sbci	r19, 0xFF	; 255
    1358:	31 83       	std	Z+1, r19	; 0x01
    135a:	20 83       	st	Z, r18
    135c:	8c 93       	st	X, r24
    135e:	26 81       	ldd	r18, Z+6	; 0x06
    1360:	37 81       	ldd	r19, Z+7	; 0x07
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	37 83       	std	Z+7, r19	; 0x07
    1368:	26 83       	std	Z+6, r18	; 0x06
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <fputc+0x6e>
    136c:	8b 01       	movw	r16, r22
    136e:	ec 01       	movw	r28, r24
    1370:	fb 01       	movw	r30, r22
    1372:	00 84       	ldd	r0, Z+8	; 0x08
    1374:	f1 85       	ldd	r31, Z+9	; 0x09
    1376:	e0 2d       	mov	r30, r0
    1378:	09 95       	icall
    137a:	89 2b       	or	r24, r25
    137c:	e1 f6       	brne	.-72     	; 0x1336 <fputc+0x10>
    137e:	d8 01       	movw	r26, r16
    1380:	16 96       	adiw	r26, 0x06	; 6
    1382:	8d 91       	ld	r24, X+
    1384:	9c 91       	ld	r25, X
    1386:	17 97       	sbiw	r26, 0x07	; 7
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	17 96       	adiw	r26, 0x07	; 7
    138c:	9c 93       	st	X, r25
    138e:	8e 93       	st	-X, r24
    1390:	16 97       	sbiw	r26, 0x06	; 6
    1392:	ce 01       	movw	r24, r28
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <__ultoa_invert>:
    139e:	fa 01       	movw	r30, r20
    13a0:	aa 27       	eor	r26, r26
    13a2:	28 30       	cpi	r18, 0x08	; 8
    13a4:	51 f1       	breq	.+84     	; 0x13fa <__ultoa_invert+0x5c>
    13a6:	20 31       	cpi	r18, 0x10	; 16
    13a8:	81 f1       	breq	.+96     	; 0x140a <__ultoa_invert+0x6c>
    13aa:	e8 94       	clt
    13ac:	6f 93       	push	r22
    13ae:	6e 7f       	andi	r22, 0xFE	; 254
    13b0:	6e 5f       	subi	r22, 0xFE	; 254
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	af 4f       	sbci	r26, 0xFF	; 255
    13ba:	b1 e0       	ldi	r27, 0x01	; 1
    13bc:	3e d0       	rcall	.+124    	; 0x143a <__ultoa_invert+0x9c>
    13be:	b4 e0       	ldi	r27, 0x04	; 4
    13c0:	3c d0       	rcall	.+120    	; 0x143a <__ultoa_invert+0x9c>
    13c2:	67 0f       	add	r22, r23
    13c4:	78 1f       	adc	r23, r24
    13c6:	89 1f       	adc	r24, r25
    13c8:	9a 1f       	adc	r25, r26
    13ca:	a1 1d       	adc	r26, r1
    13cc:	68 0f       	add	r22, r24
    13ce:	79 1f       	adc	r23, r25
    13d0:	8a 1f       	adc	r24, r26
    13d2:	91 1d       	adc	r25, r1
    13d4:	a1 1d       	adc	r26, r1
    13d6:	6a 0f       	add	r22, r26
    13d8:	71 1d       	adc	r23, r1
    13da:	81 1d       	adc	r24, r1
    13dc:	91 1d       	adc	r25, r1
    13de:	a1 1d       	adc	r26, r1
    13e0:	20 d0       	rcall	.+64     	; 0x1422 <__ultoa_invert+0x84>
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <__ultoa_invert+0x48>
    13e4:	68 94       	set
    13e6:	3f 91       	pop	r19
    13e8:	2a e0       	ldi	r18, 0x0A	; 10
    13ea:	26 9f       	mul	r18, r22
    13ec:	11 24       	eor	r1, r1
    13ee:	30 19       	sub	r19, r0
    13f0:	30 5d       	subi	r19, 0xD0	; 208
    13f2:	31 93       	st	Z+, r19
    13f4:	de f6       	brtc	.-74     	; 0x13ac <__ultoa_invert+0xe>
    13f6:	cf 01       	movw	r24, r30
    13f8:	08 95       	ret
    13fa:	46 2f       	mov	r20, r22
    13fc:	47 70       	andi	r20, 0x07	; 7
    13fe:	40 5d       	subi	r20, 0xD0	; 208
    1400:	41 93       	st	Z+, r20
    1402:	b3 e0       	ldi	r27, 0x03	; 3
    1404:	0f d0       	rcall	.+30     	; 0x1424 <__ultoa_invert+0x86>
    1406:	c9 f7       	brne	.-14     	; 0x13fa <__ultoa_invert+0x5c>
    1408:	f6 cf       	rjmp	.-20     	; 0x13f6 <__ultoa_invert+0x58>
    140a:	46 2f       	mov	r20, r22
    140c:	4f 70       	andi	r20, 0x0F	; 15
    140e:	40 5d       	subi	r20, 0xD0	; 208
    1410:	4a 33       	cpi	r20, 0x3A	; 58
    1412:	18 f0       	brcs	.+6      	; 0x141a <__ultoa_invert+0x7c>
    1414:	49 5d       	subi	r20, 0xD9	; 217
    1416:	31 fd       	sbrc	r19, 1
    1418:	40 52       	subi	r20, 0x20	; 32
    141a:	41 93       	st	Z+, r20
    141c:	02 d0       	rcall	.+4      	; 0x1422 <__ultoa_invert+0x84>
    141e:	a9 f7       	brne	.-22     	; 0x140a <__ultoa_invert+0x6c>
    1420:	ea cf       	rjmp	.-44     	; 0x13f6 <__ultoa_invert+0x58>
    1422:	b4 e0       	ldi	r27, 0x04	; 4
    1424:	a6 95       	lsr	r26
    1426:	97 95       	ror	r25
    1428:	87 95       	ror	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	ba 95       	dec	r27
    1430:	c9 f7       	brne	.-14     	; 0x1424 <__ultoa_invert+0x86>
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	61 05       	cpc	r22, r1
    1436:	71 05       	cpc	r23, r1
    1438:	08 95       	ret
    143a:	9b 01       	movw	r18, r22
    143c:	ac 01       	movw	r20, r24
    143e:	0a 2e       	mov	r0, r26
    1440:	06 94       	lsr	r0
    1442:	57 95       	ror	r21
    1444:	47 95       	ror	r20
    1446:	37 95       	ror	r19
    1448:	27 95       	ror	r18
    144a:	ba 95       	dec	r27
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__ultoa_invert+0xa2>
    144e:	62 0f       	add	r22, r18
    1450:	73 1f       	adc	r23, r19
    1452:	84 1f       	adc	r24, r20
    1454:	95 1f       	adc	r25, r21
    1456:	a0 1d       	adc	r26, r0
    1458:	08 95       	ret

0000145a <__prologue_saves__>:
    145a:	2f 92       	push	r2
    145c:	3f 92       	push	r3
    145e:	4f 92       	push	r4
    1460:	5f 92       	push	r5
    1462:	6f 92       	push	r6
    1464:	7f 92       	push	r7
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	ca 1b       	sub	r28, r26
    1484:	db 0b       	sbc	r29, r27
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	09 94       	ijmp

00001492 <__epilogue_restores__>:
    1492:	2a 88       	ldd	r2, Y+18	; 0x12
    1494:	39 88       	ldd	r3, Y+17	; 0x11
    1496:	48 88       	ldd	r4, Y+16	; 0x10
    1498:	5f 84       	ldd	r5, Y+15	; 0x0f
    149a:	6e 84       	ldd	r6, Y+14	; 0x0e
    149c:	7d 84       	ldd	r7, Y+13	; 0x0d
    149e:	8c 84       	ldd	r8, Y+12	; 0x0c
    14a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    14a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    14a4:	b9 84       	ldd	r11, Y+9	; 0x09
    14a6:	c8 84       	ldd	r12, Y+8	; 0x08
    14a8:	df 80       	ldd	r13, Y+7	; 0x07
    14aa:	ee 80       	ldd	r14, Y+6	; 0x06
    14ac:	fd 80       	ldd	r15, Y+5	; 0x05
    14ae:	0c 81       	ldd	r16, Y+4	; 0x04
    14b0:	1b 81       	ldd	r17, Y+3	; 0x03
    14b2:	aa 81       	ldd	r26, Y+2	; 0x02
    14b4:	b9 81       	ldd	r27, Y+1	; 0x01
    14b6:	ce 0f       	add	r28, r30
    14b8:	d1 1d       	adc	r29, r1
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	ed 01       	movw	r28, r26
    14c6:	08 95       	ret

000014c8 <_exit>:
    14c8:	f8 94       	cli

000014ca <__stop_program>:
    14ca:	ff cf       	rjmp	.-2      	; 0x14ca <__stop_program>
