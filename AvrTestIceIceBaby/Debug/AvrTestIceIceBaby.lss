
AvrTestIceIceBaby.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000424  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a7  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000825  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041d  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006d  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000020d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e2       	ldi	r30, 0x24	; 36
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
	ext_mem[address] = data;
}

int main(void)
{
	uart_init( MYUBRR );
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 74 00 	call	0xe8	; 0xe8 <uart_init>
	
	xmem_init();
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <xmem_init>
#include "test.h"
#include "xmem.h"

void xmem_write(uint8_t data, uint16_t address, uint16_t BASE_ADDRESS) {
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[address] = data;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	80 93 ff 10 	sts	0x10FF, r24	; 0x8010ff <__bss_end+0xfef>
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x12>

000000c2 <xmem_init>:
#include "test.h"
#include "xmem.h"


void xmem_init(void) {
	MCUCR |= (1 << SRE);
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	85 bf       	out	0x35, r24	; 53
	SFIOR &= ~(7 << XMM0); // 111 TO XMM0-2
  c8:	80 b7       	in	r24, 0x30	; 48
  ca:	87 7c       	andi	r24, 0xC7	; 199
  cc:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1 << XMM2);
  ce:	80 b7       	in	r24, 0x30	; 48
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	80 bf       	out	0x30, r24	; 48
  d4:	08 95       	ret

000000d6 <uart_transmit>:
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
	fdevopen(uart_transmit,uart_receive);
}

void uart_transmit(unsigned char message){
	while ( !(UCSR0A & (1 << UDRE0)) ); // Wait until last message has been sent and transmit buffer is empty.
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <uart_transmit>
	UDR0 = message;						// Put data in buffer
  da:	8c b9       	out	0x0c, r24	; 12
  dc:	08 95       	ret

000000de <uart_receive>:
}

unsigned char uart_receive(void){
	while ( !(UCSR0A & (1 << RXC0)) );	// Wait until last message has been received
  de:	5f 9b       	sbis	0x0b, 7	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <uart_receive>
	
	UCSR0A |= (1 << RXC0);
  e2:	5f 9a       	sbi	0x0b, 7	; 11
	return UDR0;					// Put data in buffer
  e4:	8c b1       	in	r24, 0x0c	; 12
}
  e6:	08 95       	ret

000000e8 <uart_init>:

// Here, using USART0-registers

void uart_init(unsigned int ubrr){
	// Baud rate
	UBRR0H = (unsigned char) (ubrr >> 8);	// Baud rate high register
  e8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);		// Baud rate low register
  ea:	89 b9       	out	0x09, r24	; 9
	// Enable receivers and transmitter on usart 0
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  ec:	88 e1       	ldi	r24, 0x18	; 24
  ee:	8a b9       	out	0x0a, r24	; 10
	// Data format (char = 8 bit, + 2 stop bit)
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
  f0:	8e e8       	ldi	r24, 0x8E	; 142
  f2:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_transmit,uart_receive);
  f4:	6f e6       	ldi	r22, 0x6F	; 111
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	8b e6       	ldi	r24, 0x6B	; 107
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 81 00 	call	0x102	; 0x102 <fdevopen>
 100:	08 95       	ret

00000102 <fdevopen>:
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	31 f4       	brne	.+12     	; 0x11a <fdevopen+0x18>
 10e:	61 15       	cp	r22, r1
 110:	71 05       	cpc	r23, r1
 112:	19 f4       	brne	.+6      	; 0x11a <fdevopen+0x18>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	3a c0       	rjmp	.+116    	; 0x18e <fdevopen+0x8c>
 11a:	8b 01       	movw	r16, r22
 11c:	ec 01       	movw	r28, r24
 11e:	6e e0       	ldi	r22, 0x0E	; 14
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 cc 00 	call	0x198	; 0x198 <calloc>
 12a:	fc 01       	movw	r30, r24
 12c:	89 2b       	or	r24, r25
 12e:	91 f3       	breq	.-28     	; 0x114 <fdevopen+0x12>
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	83 83       	std	Z+3, r24	; 0x03
 134:	01 15       	cp	r16, r1
 136:	11 05       	cpc	r17, r1
 138:	71 f0       	breq	.+28     	; 0x156 <fdevopen+0x54>
 13a:	13 87       	std	Z+11, r17	; 0x0b
 13c:	02 87       	std	Z+10, r16	; 0x0a
 13e:	81 e8       	ldi	r24, 0x81	; 129
 140:	83 83       	std	Z+3, r24	; 0x03
 142:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 146:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 14a:	89 2b       	or	r24, r25
 14c:	21 f4       	brne	.+8      	; 0x156 <fdevopen+0x54>
 14e:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 152:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 156:	20 97       	sbiw	r28, 0x00	; 0
 158:	c9 f0       	breq	.+50     	; 0x18c <fdevopen+0x8a>
 15a:	d1 87       	std	Z+9, r29	; 0x09
 15c:	c0 87       	std	Z+8, r28	; 0x08
 15e:	83 81       	ldd	r24, Z+3	; 0x03
 160:	82 60       	ori	r24, 0x02	; 2
 162:	83 83       	std	Z+3, r24	; 0x03
 164:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 168:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 16c:	89 2b       	or	r24, r25
 16e:	71 f4       	brne	.+28     	; 0x18c <fdevopen+0x8a>
 170:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x3>
 174:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end+0x2>
 178:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x4>
 17c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x5>
 180:	89 2b       	or	r24, r25
 182:	21 f4       	brne	.+8      	; 0x18c <fdevopen+0x8a>
 184:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x5>
 188:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x4>
 18c:	cf 01       	movw	r24, r30
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <calloc>:
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	86 9f       	mul	r24, r22
 1a2:	80 01       	movw	r16, r0
 1a4:	87 9f       	mul	r24, r23
 1a6:	10 0d       	add	r17, r0
 1a8:	96 9f       	mul	r25, r22
 1aa:	10 0d       	add	r17, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	c8 01       	movw	r24, r16
 1b0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <malloc>
 1b4:	ec 01       	movw	r28, r24
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <calloc+0x2c>
 1ba:	a8 01       	movw	r20, r16
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	0e 94 09 02 	call	0x412	; 0x412 <memset>
 1c4:	ce 01       	movw	r24, r28
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <malloc>:
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	91 05       	cpc	r25, r1
 1dc:	10 f4       	brcc	.+4      	; 0x1e2 <malloc+0x12>
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 1e6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	a0 e0       	ldi	r26, 0x00	; 0
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	30 97       	sbiw	r30, 0x00	; 0
 1f4:	19 f1       	breq	.+70     	; 0x23c <malloc+0x6c>
 1f6:	40 81       	ld	r20, Z
 1f8:	51 81       	ldd	r21, Z+1	; 0x01
 1fa:	02 81       	ldd	r16, Z+2	; 0x02
 1fc:	13 81       	ldd	r17, Z+3	; 0x03
 1fe:	48 17       	cp	r20, r24
 200:	59 07       	cpc	r21, r25
 202:	c8 f0       	brcs	.+50     	; 0x236 <malloc+0x66>
 204:	84 17       	cp	r24, r20
 206:	95 07       	cpc	r25, r21
 208:	69 f4       	brne	.+26     	; 0x224 <malloc+0x54>
 20a:	10 97       	sbiw	r26, 0x00	; 0
 20c:	31 f0       	breq	.+12     	; 0x21a <malloc+0x4a>
 20e:	12 96       	adiw	r26, 0x02	; 2
 210:	0c 93       	st	X, r16
 212:	12 97       	sbiw	r26, 0x02	; 2
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	1c 93       	st	X, r17
 218:	27 c0       	rjmp	.+78     	; 0x268 <malloc+0x98>
 21a:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 21e:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 222:	22 c0       	rjmp	.+68     	; 0x268 <malloc+0x98>
 224:	21 15       	cp	r18, r1
 226:	31 05       	cpc	r19, r1
 228:	19 f0       	breq	.+6      	; 0x230 <malloc+0x60>
 22a:	42 17       	cp	r20, r18
 22c:	53 07       	cpc	r21, r19
 22e:	18 f4       	brcc	.+6      	; 0x236 <malloc+0x66>
 230:	9a 01       	movw	r18, r20
 232:	bd 01       	movw	r22, r26
 234:	ef 01       	movw	r28, r30
 236:	df 01       	movw	r26, r30
 238:	f8 01       	movw	r30, r16
 23a:	db cf       	rjmp	.-74     	; 0x1f2 <malloc+0x22>
 23c:	21 15       	cp	r18, r1
 23e:	31 05       	cpc	r19, r1
 240:	f9 f0       	breq	.+62     	; 0x280 <malloc+0xb0>
 242:	28 1b       	sub	r18, r24
 244:	39 0b       	sbc	r19, r25
 246:	24 30       	cpi	r18, 0x04	; 4
 248:	31 05       	cpc	r19, r1
 24a:	80 f4       	brcc	.+32     	; 0x26c <malloc+0x9c>
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	9b 81       	ldd	r25, Y+3	; 0x03
 250:	61 15       	cp	r22, r1
 252:	71 05       	cpc	r23, r1
 254:	21 f0       	breq	.+8      	; 0x25e <malloc+0x8e>
 256:	fb 01       	movw	r30, r22
 258:	93 83       	std	Z+3, r25	; 0x03
 25a:	82 83       	std	Z+2, r24	; 0x02
 25c:	04 c0       	rjmp	.+8      	; 0x266 <malloc+0x96>
 25e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 262:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 266:	fe 01       	movw	r30, r28
 268:	32 96       	adiw	r30, 0x02	; 2
 26a:	44 c0       	rjmp	.+136    	; 0x2f4 <malloc+0x124>
 26c:	fe 01       	movw	r30, r28
 26e:	e2 0f       	add	r30, r18
 270:	f3 1f       	adc	r31, r19
 272:	81 93       	st	Z+, r24
 274:	91 93       	st	Z+, r25
 276:	22 50       	subi	r18, 0x02	; 2
 278:	31 09       	sbc	r19, r1
 27a:	39 83       	std	Y+1, r19	; 0x01
 27c:	28 83       	st	Y, r18
 27e:	3a c0       	rjmp	.+116    	; 0x2f4 <malloc+0x124>
 280:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 284:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 288:	23 2b       	or	r18, r19
 28a:	41 f4       	brne	.+16     	; 0x29c <malloc+0xcc>
 28c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 290:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 294:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 298:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 29c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2a4:	21 15       	cp	r18, r1
 2a6:	31 05       	cpc	r19, r1
 2a8:	41 f4       	brne	.+16     	; 0x2ba <malloc+0xea>
 2aa:	2d b7       	in	r18, 0x3d	; 61
 2ac:	3e b7       	in	r19, 0x3e	; 62
 2ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 2b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 2b6:	24 1b       	sub	r18, r20
 2b8:	35 0b       	sbc	r19, r21
 2ba:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 2be:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 2c2:	e2 17       	cp	r30, r18
 2c4:	f3 07       	cpc	r31, r19
 2c6:	a0 f4       	brcc	.+40     	; 0x2f0 <malloc+0x120>
 2c8:	2e 1b       	sub	r18, r30
 2ca:	3f 0b       	sbc	r19, r31
 2cc:	28 17       	cp	r18, r24
 2ce:	39 07       	cpc	r19, r25
 2d0:	78 f0       	brcs	.+30     	; 0x2f0 <malloc+0x120>
 2d2:	ac 01       	movw	r20, r24
 2d4:	4e 5f       	subi	r20, 0xFE	; 254
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	24 17       	cp	r18, r20
 2da:	35 07       	cpc	r19, r21
 2dc:	48 f0       	brcs	.+18     	; 0x2f0 <malloc+0x120>
 2de:	4e 0f       	add	r20, r30
 2e0:	5f 1f       	adc	r21, r31
 2e2:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 2e6:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 2ea:	81 93       	st	Z+, r24
 2ec:	91 93       	st	Z+, r25
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <malloc+0x124>
 2f0:	e0 e0       	ldi	r30, 0x00	; 0
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	cf 01       	movw	r24, r30
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <free>:
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	09 f4       	brne	.+2      	; 0x30a <free+0xa>
 308:	81 c0       	rjmp	.+258    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 30a:	fc 01       	movw	r30, r24
 30c:	32 97       	sbiw	r30, 0x02	; 2
 30e:	13 82       	std	Z+3, r1	; 0x03
 310:	12 82       	std	Z+2, r1	; 0x02
 312:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 316:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 31a:	10 97       	sbiw	r26, 0x00	; 0
 31c:	81 f4       	brne	.+32     	; 0x33e <free+0x3e>
 31e:	20 81       	ld	r18, Z
 320:	31 81       	ldd	r19, Z+1	; 0x01
 322:	82 0f       	add	r24, r18
 324:	93 1f       	adc	r25, r19
 326:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 32a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 32e:	28 17       	cp	r18, r24
 330:	39 07       	cpc	r19, r25
 332:	51 f5       	brne	.+84     	; 0x388 <free+0x88>
 334:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 338:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 33c:	67 c0       	rjmp	.+206    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 33e:	ed 01       	movw	r28, r26
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	ce 17       	cp	r28, r30
 346:	df 07       	cpc	r29, r31
 348:	40 f4       	brcc	.+16     	; 0x35a <free+0x5a>
 34a:	4a 81       	ldd	r20, Y+2	; 0x02
 34c:	5b 81       	ldd	r21, Y+3	; 0x03
 34e:	9e 01       	movw	r18, r28
 350:	41 15       	cp	r20, r1
 352:	51 05       	cpc	r21, r1
 354:	f1 f0       	breq	.+60     	; 0x392 <free+0x92>
 356:	ea 01       	movw	r28, r20
 358:	f5 cf       	rjmp	.-22     	; 0x344 <free+0x44>
 35a:	d3 83       	std	Z+3, r29	; 0x03
 35c:	c2 83       	std	Z+2, r28	; 0x02
 35e:	40 81       	ld	r20, Z
 360:	51 81       	ldd	r21, Z+1	; 0x01
 362:	84 0f       	add	r24, r20
 364:	95 1f       	adc	r25, r21
 366:	c8 17       	cp	r28, r24
 368:	d9 07       	cpc	r29, r25
 36a:	59 f4       	brne	.+22     	; 0x382 <free+0x82>
 36c:	88 81       	ld	r24, Y
 36e:	99 81       	ldd	r25, Y+1	; 0x01
 370:	84 0f       	add	r24, r20
 372:	95 1f       	adc	r25, r21
 374:	02 96       	adiw	r24, 0x02	; 2
 376:	91 83       	std	Z+1, r25	; 0x01
 378:	80 83       	st	Z, r24
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	9b 81       	ldd	r25, Y+3	; 0x03
 37e:	93 83       	std	Z+3, r25	; 0x03
 380:	82 83       	std	Z+2, r24	; 0x02
 382:	21 15       	cp	r18, r1
 384:	31 05       	cpc	r19, r1
 386:	29 f4       	brne	.+10     	; 0x392 <free+0x92>
 388:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 38c:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 390:	3d c0       	rjmp	.+122    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 392:	e9 01       	movw	r28, r18
 394:	fb 83       	std	Y+3, r31	; 0x03
 396:	ea 83       	std	Y+2, r30	; 0x02
 398:	49 91       	ld	r20, Y+
 39a:	59 91       	ld	r21, Y+
 39c:	c4 0f       	add	r28, r20
 39e:	d5 1f       	adc	r29, r21
 3a0:	ec 17       	cp	r30, r28
 3a2:	fd 07       	cpc	r31, r29
 3a4:	61 f4       	brne	.+24     	; 0x3be <free+0xbe>
 3a6:	80 81       	ld	r24, Z
 3a8:	91 81       	ldd	r25, Z+1	; 0x01
 3aa:	84 0f       	add	r24, r20
 3ac:	95 1f       	adc	r25, r21
 3ae:	02 96       	adiw	r24, 0x02	; 2
 3b0:	e9 01       	movw	r28, r18
 3b2:	99 83       	std	Y+1, r25	; 0x01
 3b4:	88 83       	st	Y, r24
 3b6:	82 81       	ldd	r24, Z+2	; 0x02
 3b8:	93 81       	ldd	r25, Z+3	; 0x03
 3ba:	9b 83       	std	Y+3, r25	; 0x03
 3bc:	8a 83       	std	Y+2, r24	; 0x02
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	12 96       	adiw	r26, 0x02	; 2
 3c4:	8d 91       	ld	r24, X+
 3c6:	9c 91       	ld	r25, X
 3c8:	13 97       	sbiw	r26, 0x03	; 3
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <free+0xd4>
 3ce:	fd 01       	movw	r30, r26
 3d0:	dc 01       	movw	r26, r24
 3d2:	f7 cf       	rjmp	.-18     	; 0x3c2 <free+0xc2>
 3d4:	8d 91       	ld	r24, X+
 3d6:	9c 91       	ld	r25, X
 3d8:	11 97       	sbiw	r26, 0x01	; 1
 3da:	9d 01       	movw	r18, r26
 3dc:	2e 5f       	subi	r18, 0xFE	; 254
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	82 0f       	add	r24, r18
 3e2:	93 1f       	adc	r25, r19
 3e4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 3e8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 3ec:	28 17       	cp	r18, r24
 3ee:	39 07       	cpc	r19, r25
 3f0:	69 f4       	brne	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f2:	30 97       	sbiw	r30, 0x00	; 0
 3f4:	29 f4       	brne	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 3fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	13 82       	std	Z+3, r1	; 0x03
 402:	12 82       	std	Z+2, r1	; 0x02
 404:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 408:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <memset>:
 412:	dc 01       	movw	r26, r24
 414:	01 c0       	rjmp	.+2      	; 0x418 <memset+0x6>
 416:	6d 93       	st	X+, r22
 418:	41 50       	subi	r20, 0x01	; 1
 41a:	50 40       	sbci	r21, 0x00	; 0
 41c:	e0 f7       	brcc	.-8      	; 0x416 <memset+0x4>
 41e:	08 95       	ret

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
